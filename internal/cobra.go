package internal

import (
	"github.com/spf13/cobra"
)

func GenMarkdownTreeCustom(cmd *cobra.Command, db *DB) error {
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		if err := GenMarkdownTreeCustom(c, db); err != nil {
			return err
		}
	}

	return GenMarkdownCustom(cmd, db)
}

// GenMarkdownCustom creates custom markdown output.
func GenMarkdownCustom(cmd *cobra.Command, db *DB) error {
	if !cmd.Runnable() {
		return nil
	}

	//buf := new(bytes.Buffer)
	//name := cmd.CommandPath()

	//buf.WriteString(fmt.Sprintf("```bash\n%s\n```\n\n", cmd.UseLine())) // usage ([flags].. etc)
	//
	//buf.WriteString("# " + name + "\n\n")
	//
	//buf.WriteString(cmd.Short + "\n\n")

	//if len(cmd.Long) > 0 {
	//	buf.WriteString("## What does it do?\n\n")
	//	buf.WriteString(cmd.Long + "\n\n")
	//}

	if cmd.Example != "" {
		examples := ProcessSimpleExamples(cmd.Example)
		for _, e := range examples {
			db.AddExample(e)
		}
		//buf.WriteString("## Examples\n\n")
		//buf.WriteString(cmd.Example)
	}
	//
	//if hasSeeAlso(cmd) {
	//	buf.WriteString("## SEE ALSO\n\n")
	//	if cmd.HasParent() {
	//		parent := cmd.Parent()
	//		pname := parent.CommandPath()
	//		link := pname + ".md"
	//		link = strings.ReplaceAll(link, " ", "_")
	//		//buf.WriteString(fmt.Sprintf("* [%s](%s) - %s\n", pname, linkHandler(link), parent.Short))
	//		cmd.VisitParents(func(c *cobra.Command) {
	//			if c.DisableAutoGenTag {
	//				cmd.DisableAutoGenTag = c.DisableAutoGenTag
	//			}
	//		})
	//	}
	//
	//	children := cmd.Commands()
	//	sort.Sort(byName(children))
	//
	//	for _, child := range children {
	//		if !child.IsAvailableCommand() || child.IsAdditionalHelpTopicCommand() {
	//			continue
	//		}
	//		cname := name + " " + child.Name()
	//		link := cname + ".md"
	//		link = strings.ReplaceAll(link, " ", "_")
	//		//buf.WriteString(fmt.Sprintf("* [%s](%s) - %s\n", cname, linkHandler(link), child.Short))
	//	}
	//}
	//_, err := buf.WriteTo(w)
	return nil
}

// Test to see if we have a reason to print See Also information in docs
// Basically this is a test for a parent command or a subcommand which is
// both not deprecated and not the autogenerated help command.
func hasSeeAlso(cmd *cobra.Command) bool {
	if cmd.HasParent() {
		return true
	}
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		return true
	}
	return false
}

type byName []*cobra.Command

func (s byName) Len() int           { return len(s) }
func (s byName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
func (s byName) Less(i, j int) bool { return s[i].Name() < s[j].Name() }
