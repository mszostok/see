package template

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"k8s.io/kubectl/pkg/util/templates"

	"go.szostok/see/internal"
)

const (
	WhatDoesItLooksLikeSection = "looks-like"
	CodePrefixLine             = "/code "
)

// GenMarkdownTreeCustom was copied from:
// https://github.com/spf13/cobra/blob/eb3b6397b1b5d1b0a2cd66a9afe0520f480c0a87/doc/md_docs.go#L128-L129
func GenMarkdownTreeCustom(cmd *cobra.Command, db *internal.DB, filePrepender, linkHandler func(string) string) error {
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		if err := GenMarkdownTreeCustom(c, db, filePrepender, linkHandler); err != nil {
			return err
		}
	}

	data, examples, err := GenMarkdownCustom(cmd, linkHandler)
	if err != nil {
		return err
	}

	//fmt.Println(out)
	if err != nil {
		return err
	}

	for _, e := range examples {
		//e.Content = out
		e.Content = data
		db.AddExample(e)
	}

	return nil
}

// GenMarkdownCustom creates custom markdown output.
// Was adjusted to:
// - print all flags in a single code block
// - print command with h1, so mkdocs consumes it properly
// - change the sections to `## What does it do?`
// - introduce `## What does it look like?` section
// - interprets /code in examples section
// - change the order of printed sections
func GenMarkdownCustom(cmd *cobra.Command, linkHandler func(string) string) (string, []internal.Example, error) {
	var examples []internal.Example
	cmd.InitDefaultHelpCmd()
	cmd.InitDefaultHelpFlag()

	buf := new(bytes.Buffer)
	name := cmd.CommandPath()

	//cmd.SetOut(buf)
	templates.UseOptionsTemplates(cmd)
	//if err := cmd.Usage(); err != nil {
	//	return "", nil, err
	//}
	buf.WriteString("# " + name + "\n\n")

	buf.WriteString(cmd.Short + "\n\n")

	if cmd.Runnable() {
		buf.WriteString(fmt.Sprintf("```bash\n%s\n```\n\n", cmd.UseLine()))
	}

	if len(cmd.Long) > 0 {
		buf.WriteString("## What does it do?\n\n")
		buf.WriteString(cmd.Long + "\n\n")
	}

	if len(cmd.Example) > 0 {
		examples = internal.ProcessSimpleExamples(cmd.Example)

		buf.WriteString("## Examples\n\n")
		buf.WriteString(code(cmd.Example))
	}

	if err := printOptions(buf, cmd); err != nil {
		return "", nil, err
	}

	if hasSeeAlso(cmd) {
		buf.WriteString("## SEE ALSO\n\n")
		if cmd.HasParent() {
			parent := cmd.Parent()
			pname := parent.CommandPath()
			//link := pname + ".md"
			//link = strings.ReplaceAll(link, " ", "_")
			buf.WriteString(fmt.Sprintf("* %s - %s\n", pname, parent.Short))
			cmd.VisitParents(func(c *cobra.Command) {
				if c.DisableAutoGenTag {
					cmd.DisableAutoGenTag = c.DisableAutoGenTag
				}
			})
		}

		children := cmd.Commands()
		sort.Sort(byName(children))

		for _, child := range children {
			if !child.IsAvailableCommand() || child.IsAdditionalHelpTopicCommand() {
				continue
			}
			cname := name + " " + child.Name()
			link := cname + ".md"
			link = strings.ReplaceAll(link, " ", "_")
			buf.WriteString(fmt.Sprintf("* [%s](%s) - %s\n", cname, linkHandler(link), child.Short))
		}
	}

	return buf.String(), examples, nil
}

func printOptions(buf *bytes.Buffer, cmd *cobra.Command) error {
	allFlags := pflag.NewFlagSet("aggregated", pflag.ExitOnError)
	allFlags.SetOutput(buf)
	local := cmd.NonInheritedFlags()
	//global := cmd.InheritedFlags()

	allFlags.SortFlags = false

	local.VisitAll(func(flag *pflag.Flag) {
		allFlags.AddFlag(flag)
	})
	//  print global in the same code block
	//global.VisitAll(func(flag *pflag.Flag) {
	//	allFlags.AddFlag(flag)
	//})

	if allFlags.HasAvailableFlags() {
		buf.WriteString("## What are the flags?\n\n```bash\n")
		allFlags.PrintDefaults()
		buf.WriteString("```\n\n")
	}

	return nil
}

func hasLookLike(command *cobra.Command) ([]string, bool) {
	content, found := command.Annotations[WhatDoesItLooksLikeSection]
	if !found {
		return nil, false
	}
	return strings.SplitN(content, "\n", 10), true
}

func code(text string) string {
	lines := strings.Split(text, "\n")

	var b strings.Builder
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}

		if strings.HasPrefix(line, "#") {
			b.WriteString(fmt.Sprintf("%s\n", strings.TrimSpace(line)))
		} else {
			b.WriteString(fmt.Sprintf("\n%s\n\n", line))
		}
	}

	return b.String()
}

// Test to see if we have a reason to print See Also information in docs
// Basically this is a test for a parent command or a subcommand which is
// both not deprecated and not the autogenerated help command.
func hasSeeAlso(cmd *cobra.Command) bool {
	if cmd.HasParent() {
		return true
	}
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		return true
	}
	return false
}

type byName []*cobra.Command

func (s byName) Len() int           { return len(s) }
func (s byName) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
func (s byName) Less(i, j int) bool { return s[i].Name() < s[j].Name() }
