[{"Description":" List recent events in the default namespace.","Command":"kubectl alpha events","Content":"# kubectl alpha events\n\nExperimental: List events\n\n```bash\nkubectl alpha events [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file] [--for TYPE/NAME] [--watch] [--event=Normal,Warning]\n```\n\n## What does it do?\n\nExperimental: Display events\n\n Prints a table of the most important information about events. You can request events for a namespace, for all namespace, or filtered to only those pertaining to a specified resource.\n\n## Examples\n\n# List recent events in the default namespace.\n\nkubectl alpha events\n\n# List recent events in all namespaces.\n\nkubectl alpha events --all-namespaces\n\n# List recent events for the specified pod, then wait for more events and list them as they arrive.\n\nkubectl alpha events --for pod/web-pod-13je7 --watch\n\n# List recent events in given format. Supported ones, apart from default, are json and yaml.\n\nkubectl alpha events -oyaml\n\n# List recent only events in given event types\n\nkubectl alpha events --types=Warning,Normal\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --for string                    Filter events to only those pertaining to the specified resource.\n  -h, --help                          help for events\n      --no-headers                    When using the default output format, don't print headers.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --types strings                 Output only events of given types.\n  -w, --watch                         After listing the requested events, watch for more events.\n```\n\n## SEE ALSO\n\n* kubectl alpha - Commands for features in alpha\n"},{"Description":" List recent events in all namespaces.","Command":"kubectl alpha events --all-namespaces","Content":"# kubectl alpha events\n\nExperimental: List events\n\n```bash\nkubectl alpha events [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file] [--for TYPE/NAME] [--watch] [--event=Normal,Warning]\n```\n\n## What does it do?\n\nExperimental: Display events\n\n Prints a table of the most important information about events. You can request events for a namespace, for all namespace, or filtered to only those pertaining to a specified resource.\n\n## Examples\n\n# List recent events in the default namespace.\n\nkubectl alpha events\n\n# List recent events in all namespaces.\n\nkubectl alpha events --all-namespaces\n\n# List recent events for the specified pod, then wait for more events and list them as they arrive.\n\nkubectl alpha events --for pod/web-pod-13je7 --watch\n\n# List recent events in given format. Supported ones, apart from default, are json and yaml.\n\nkubectl alpha events -oyaml\n\n# List recent only events in given event types\n\nkubectl alpha events --types=Warning,Normal\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --for string                    Filter events to only those pertaining to the specified resource.\n  -h, --help                          help for events\n      --no-headers                    When using the default output format, don't print headers.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --types strings                 Output only events of given types.\n  -w, --watch                         After listing the requested events, watch for more events.\n```\n\n## SEE ALSO\n\n* kubectl alpha - Commands for features in alpha\n"},{"Description":" List recent events for the specified pod, then wait for more events and list them as they arrive.","Command":"kubectl alpha events --for pod/web-pod-13je7 --watch","Content":"# kubectl alpha events\n\nExperimental: List events\n\n```bash\nkubectl alpha events [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file] [--for TYPE/NAME] [--watch] [--event=Normal,Warning]\n```\n\n## What does it do?\n\nExperimental: Display events\n\n Prints a table of the most important information about events. You can request events for a namespace, for all namespace, or filtered to only those pertaining to a specified resource.\n\n## Examples\n\n# List recent events in the default namespace.\n\nkubectl alpha events\n\n# List recent events in all namespaces.\n\nkubectl alpha events --all-namespaces\n\n# List recent events for the specified pod, then wait for more events and list them as they arrive.\n\nkubectl alpha events --for pod/web-pod-13je7 --watch\n\n# List recent events in given format. Supported ones, apart from default, are json and yaml.\n\nkubectl alpha events -oyaml\n\n# List recent only events in given event types\n\nkubectl alpha events --types=Warning,Normal\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --for string                    Filter events to only those pertaining to the specified resource.\n  -h, --help                          help for events\n      --no-headers                    When using the default output format, don't print headers.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --types strings                 Output only events of given types.\n  -w, --watch                         After listing the requested events, watch for more events.\n```\n\n## SEE ALSO\n\n* kubectl alpha - Commands for features in alpha\n"},{"Description":" List recent events in given format. Supported ones, apart from default, are json and yaml.","Command":"kubectl alpha events -oyaml","Content":"# kubectl alpha events\n\nExperimental: List events\n\n```bash\nkubectl alpha events [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file] [--for TYPE/NAME] [--watch] [--event=Normal,Warning]\n```\n\n## What does it do?\n\nExperimental: Display events\n\n Prints a table of the most important information about events. You can request events for a namespace, for all namespace, or filtered to only those pertaining to a specified resource.\n\n## Examples\n\n# List recent events in the default namespace.\n\nkubectl alpha events\n\n# List recent events in all namespaces.\n\nkubectl alpha events --all-namespaces\n\n# List recent events for the specified pod, then wait for more events and list them as they arrive.\n\nkubectl alpha events --for pod/web-pod-13je7 --watch\n\n# List recent events in given format. Supported ones, apart from default, are json and yaml.\n\nkubectl alpha events -oyaml\n\n# List recent only events in given event types\n\nkubectl alpha events --types=Warning,Normal\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --for string                    Filter events to only those pertaining to the specified resource.\n  -h, --help                          help for events\n      --no-headers                    When using the default output format, don't print headers.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --types strings                 Output only events of given types.\n  -w, --watch                         After listing the requested events, watch for more events.\n```\n\n## SEE ALSO\n\n* kubectl alpha - Commands for features in alpha\n"},{"Description":" List recent only events in given event types","Command":"kubectl alpha events --types=Warning,Normal","Content":"# kubectl alpha events\n\nExperimental: List events\n\n```bash\nkubectl alpha events [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file] [--for TYPE/NAME] [--watch] [--event=Normal,Warning]\n```\n\n## What does it do?\n\nExperimental: Display events\n\n Prints a table of the most important information about events. You can request events for a namespace, for all namespace, or filtered to only those pertaining to a specified resource.\n\n## Examples\n\n# List recent events in the default namespace.\n\nkubectl alpha events\n\n# List recent events in all namespaces.\n\nkubectl alpha events --all-namespaces\n\n# List recent events for the specified pod, then wait for more events and list them as they arrive.\n\nkubectl alpha events --for pod/web-pod-13je7 --watch\n\n# List recent events in given format. Supported ones, apart from default, are json and yaml.\n\nkubectl alpha events -oyaml\n\n# List recent only events in given event types\n\nkubectl alpha events --types=Warning,Normal\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --for string                    Filter events to only those pertaining to the specified resource.\n  -h, --help                          help for events\n      --no-headers                    When using the default output format, don't print headers.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --types strings                 Output only events of given types.\n  -w, --watch                         After listing the requested events, watch for more events.\n```\n\n## SEE ALSO\n\n* kubectl alpha - Commands for features in alpha\n"},{"Description":" Update pod 'foo' with the annotation 'description' and the value 'my frontend' If the same annotation is set multiple times, only the last value will be applied","Command":"kubectl annotate pods foo description='my frontend'","Content":"# kubectl annotate\n\nUpdate the annotations on a resource\n\n```bash\nkubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the annotations on one or more resources.\n\n All Kubernetes objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.\n\n Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend'\n# If the same annotation is set multiple times, only the last value will be applied\n\nkubectl annotate pods foo description='my frontend'\n\n# Update a pod identified by type and name in \"pod.json\"\n\nkubectl annotate -f pod.json description='my frontend'\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend running nginx', overwriting any existing value\n\nkubectl annotate --overwrite pods foo description='my frontend running nginx'\n\n# Update all pods in the namespace\n\nkubectl annotate pods --all description='my frontend running nginx'\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl annotate pods foo description='my frontend running nginx' --resource-version=1\n\n# Update pod 'foo' by removing an annotation named 'description' if it exists\n# Does not require the --overwrite flag\n\nkubectl annotate pods foo description-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-annotate\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the annotation\n  -h, --help                           help for annotate\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the annotations for a given resource.\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update a pod identified by type and name in \"pod.json\"","Command":"kubectl annotate -f pod.json description='my frontend'","Content":"# kubectl annotate\n\nUpdate the annotations on a resource\n\n```bash\nkubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the annotations on one or more resources.\n\n All Kubernetes objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.\n\n Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend'\n# If the same annotation is set multiple times, only the last value will be applied\n\nkubectl annotate pods foo description='my frontend'\n\n# Update a pod identified by type and name in \"pod.json\"\n\nkubectl annotate -f pod.json description='my frontend'\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend running nginx', overwriting any existing value\n\nkubectl annotate --overwrite pods foo description='my frontend running nginx'\n\n# Update all pods in the namespace\n\nkubectl annotate pods --all description='my frontend running nginx'\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl annotate pods foo description='my frontend running nginx' --resource-version=1\n\n# Update pod 'foo' by removing an annotation named 'description' if it exists\n# Does not require the --overwrite flag\n\nkubectl annotate pods foo description-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-annotate\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the annotation\n  -h, --help                           help for annotate\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the annotations for a given resource.\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update pod 'foo' with the annotation 'description' and the value 'my frontend running nginx', overwriting any existing value","Command":"kubectl annotate --overwrite pods foo description='my frontend running nginx'","Content":"# kubectl annotate\n\nUpdate the annotations on a resource\n\n```bash\nkubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the annotations on one or more resources.\n\n All Kubernetes objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.\n\n Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend'\n# If the same annotation is set multiple times, only the last value will be applied\n\nkubectl annotate pods foo description='my frontend'\n\n# Update a pod identified by type and name in \"pod.json\"\n\nkubectl annotate -f pod.json description='my frontend'\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend running nginx', overwriting any existing value\n\nkubectl annotate --overwrite pods foo description='my frontend running nginx'\n\n# Update all pods in the namespace\n\nkubectl annotate pods --all description='my frontend running nginx'\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl annotate pods foo description='my frontend running nginx' --resource-version=1\n\n# Update pod 'foo' by removing an annotation named 'description' if it exists\n# Does not require the --overwrite flag\n\nkubectl annotate pods foo description-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-annotate\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the annotation\n  -h, --help                           help for annotate\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the annotations for a given resource.\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update all pods in the namespace","Command":"kubectl annotate pods --all description='my frontend running nginx'","Content":"# kubectl annotate\n\nUpdate the annotations on a resource\n\n```bash\nkubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the annotations on one or more resources.\n\n All Kubernetes objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.\n\n Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend'\n# If the same annotation is set multiple times, only the last value will be applied\n\nkubectl annotate pods foo description='my frontend'\n\n# Update a pod identified by type and name in \"pod.json\"\n\nkubectl annotate -f pod.json description='my frontend'\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend running nginx', overwriting any existing value\n\nkubectl annotate --overwrite pods foo description='my frontend running nginx'\n\n# Update all pods in the namespace\n\nkubectl annotate pods --all description='my frontend running nginx'\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl annotate pods foo description='my frontend running nginx' --resource-version=1\n\n# Update pod 'foo' by removing an annotation named 'description' if it exists\n# Does not require the --overwrite flag\n\nkubectl annotate pods foo description-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-annotate\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the annotation\n  -h, --help                           help for annotate\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the annotations for a given resource.\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update pod 'foo' only if the resource is unchanged from version 1","Command":"kubectl annotate pods foo description='my frontend running nginx' --resource-version=1","Content":"# kubectl annotate\n\nUpdate the annotations on a resource\n\n```bash\nkubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the annotations on one or more resources.\n\n All Kubernetes objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.\n\n Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend'\n# If the same annotation is set multiple times, only the last value will be applied\n\nkubectl annotate pods foo description='my frontend'\n\n# Update a pod identified by type and name in \"pod.json\"\n\nkubectl annotate -f pod.json description='my frontend'\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend running nginx', overwriting any existing value\n\nkubectl annotate --overwrite pods foo description='my frontend running nginx'\n\n# Update all pods in the namespace\n\nkubectl annotate pods --all description='my frontend running nginx'\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl annotate pods foo description='my frontend running nginx' --resource-version=1\n\n# Update pod 'foo' by removing an annotation named 'description' if it exists\n# Does not require the --overwrite flag\n\nkubectl annotate pods foo description-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-annotate\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the annotation\n  -h, --help                           help for annotate\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the annotations for a given resource.\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update pod 'foo' by removing an annotation named 'description' if it exists Does not require the --overwrite flag","Command":"kubectl annotate pods foo description-","Content":"# kubectl annotate\n\nUpdate the annotations on a resource\n\n```bash\nkubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the annotations on one or more resources.\n\n All Kubernetes objects support the ability to store additional data with the object as annotations. Annotations are key/value pairs that can be larger than labels and include arbitrary string values such as structured JSON. Tools and system extensions may use annotations to store their own data.\n\n Attempting to set an annotation that already exists will fail unless --overwrite is set. If --resource-version is specified and does not match the current resource version on the server the command will fail.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend'\n# If the same annotation is set multiple times, only the last value will be applied\n\nkubectl annotate pods foo description='my frontend'\n\n# Update a pod identified by type and name in \"pod.json\"\n\nkubectl annotate -f pod.json description='my frontend'\n\n# Update pod 'foo' with the annotation 'description' and the value 'my frontend running nginx', overwriting any existing value\n\nkubectl annotate --overwrite pods foo description='my frontend running nginx'\n\n# Update all pods in the namespace\n\nkubectl annotate pods --all description='my frontend running nginx'\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl annotate pods foo description='my frontend running nginx' --resource-version=1\n\n# Update pod 'foo' by removing an annotation named 'description' if it exists\n# Does not require the --overwrite flag\n\nkubectl annotate pods foo description-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-annotate\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the annotation\n  -h, --help                           help for annotate\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the annotations for a given resource.\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the supported API resources","Command":"kubectl api-resources","Content":"# kubectl api-resources\n\nPrint the supported API resources on the server\n\n```bash\nkubectl api-resources [flags]\n```\n\n## What does it do?\n\nPrint the supported API resources on the server.\n\n## Examples\n\n# Print the supported API resources\n\nkubectl api-resources\n\n# Print the supported API resources with more information\n\nkubectl api-resources -o wide\n\n# Print the supported API resources sorted by a column\n\nkubectl api-resources --sort-by=name\n\n# Print the supported namespaced resources\n\nkubectl api-resources --namespaced=true\n\n# Print the supported non-namespaced resources\n\nkubectl api-resources --namespaced=false\n\n# Print the supported API resources with a specific APIGroup\n\nkubectl api-resources --api-group=rbac.authorization.k8s.io\n\n## What are the flags?\n\n```bash\n      --api-group string   Limit to resources in the specified API group.\n      --cached             Use the cached list of resources if available.\n  -h, --help               help for api-resources\n      --namespaced         If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default. (default true)\n      --no-headers         When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string      Output format. One of: (wide, name).\n      --sort-by string     If non-empty, sort list of resources using specified field. The field can be either 'name' or 'kind'.\n      --verbs strings      Limit to resources that support the specified verbs.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the supported API resources with more information","Command":"kubectl api-resources -o wide","Content":"# kubectl api-resources\n\nPrint the supported API resources on the server\n\n```bash\nkubectl api-resources [flags]\n```\n\n## What does it do?\n\nPrint the supported API resources on the server.\n\n## Examples\n\n# Print the supported API resources\n\nkubectl api-resources\n\n# Print the supported API resources with more information\n\nkubectl api-resources -o wide\n\n# Print the supported API resources sorted by a column\n\nkubectl api-resources --sort-by=name\n\n# Print the supported namespaced resources\n\nkubectl api-resources --namespaced=true\n\n# Print the supported non-namespaced resources\n\nkubectl api-resources --namespaced=false\n\n# Print the supported API resources with a specific APIGroup\n\nkubectl api-resources --api-group=rbac.authorization.k8s.io\n\n## What are the flags?\n\n```bash\n      --api-group string   Limit to resources in the specified API group.\n      --cached             Use the cached list of resources if available.\n  -h, --help               help for api-resources\n      --namespaced         If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default. (default true)\n      --no-headers         When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string      Output format. One of: (wide, name).\n      --sort-by string     If non-empty, sort list of resources using specified field. The field can be either 'name' or 'kind'.\n      --verbs strings      Limit to resources that support the specified verbs.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the supported API resources sorted by a column","Command":"kubectl api-resources --sort-by=name","Content":"# kubectl api-resources\n\nPrint the supported API resources on the server\n\n```bash\nkubectl api-resources [flags]\n```\n\n## What does it do?\n\nPrint the supported API resources on the server.\n\n## Examples\n\n# Print the supported API resources\n\nkubectl api-resources\n\n# Print the supported API resources with more information\n\nkubectl api-resources -o wide\n\n# Print the supported API resources sorted by a column\n\nkubectl api-resources --sort-by=name\n\n# Print the supported namespaced resources\n\nkubectl api-resources --namespaced=true\n\n# Print the supported non-namespaced resources\n\nkubectl api-resources --namespaced=false\n\n# Print the supported API resources with a specific APIGroup\n\nkubectl api-resources --api-group=rbac.authorization.k8s.io\n\n## What are the flags?\n\n```bash\n      --api-group string   Limit to resources in the specified API group.\n      --cached             Use the cached list of resources if available.\n  -h, --help               help for api-resources\n      --namespaced         If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default. (default true)\n      --no-headers         When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string      Output format. One of: (wide, name).\n      --sort-by string     If non-empty, sort list of resources using specified field. The field can be either 'name' or 'kind'.\n      --verbs strings      Limit to resources that support the specified verbs.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the supported namespaced resources","Command":"kubectl api-resources --namespaced=true","Content":"# kubectl api-resources\n\nPrint the supported API resources on the server\n\n```bash\nkubectl api-resources [flags]\n```\n\n## What does it do?\n\nPrint the supported API resources on the server.\n\n## Examples\n\n# Print the supported API resources\n\nkubectl api-resources\n\n# Print the supported API resources with more information\n\nkubectl api-resources -o wide\n\n# Print the supported API resources sorted by a column\n\nkubectl api-resources --sort-by=name\n\n# Print the supported namespaced resources\n\nkubectl api-resources --namespaced=true\n\n# Print the supported non-namespaced resources\n\nkubectl api-resources --namespaced=false\n\n# Print the supported API resources with a specific APIGroup\n\nkubectl api-resources --api-group=rbac.authorization.k8s.io\n\n## What are the flags?\n\n```bash\n      --api-group string   Limit to resources in the specified API group.\n      --cached             Use the cached list of resources if available.\n  -h, --help               help for api-resources\n      --namespaced         If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default. (default true)\n      --no-headers         When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string      Output format. One of: (wide, name).\n      --sort-by string     If non-empty, sort list of resources using specified field. The field can be either 'name' or 'kind'.\n      --verbs strings      Limit to resources that support the specified verbs.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the supported non-namespaced resources","Command":"kubectl api-resources --namespaced=false","Content":"# kubectl api-resources\n\nPrint the supported API resources on the server\n\n```bash\nkubectl api-resources [flags]\n```\n\n## What does it do?\n\nPrint the supported API resources on the server.\n\n## Examples\n\n# Print the supported API resources\n\nkubectl api-resources\n\n# Print the supported API resources with more information\n\nkubectl api-resources -o wide\n\n# Print the supported API resources sorted by a column\n\nkubectl api-resources --sort-by=name\n\n# Print the supported namespaced resources\n\nkubectl api-resources --namespaced=true\n\n# Print the supported non-namespaced resources\n\nkubectl api-resources --namespaced=false\n\n# Print the supported API resources with a specific APIGroup\n\nkubectl api-resources --api-group=rbac.authorization.k8s.io\n\n## What are the flags?\n\n```bash\n      --api-group string   Limit to resources in the specified API group.\n      --cached             Use the cached list of resources if available.\n  -h, --help               help for api-resources\n      --namespaced         If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default. (default true)\n      --no-headers         When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string      Output format. One of: (wide, name).\n      --sort-by string     If non-empty, sort list of resources using specified field. The field can be either 'name' or 'kind'.\n      --verbs strings      Limit to resources that support the specified verbs.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the supported API resources with a specific APIGroup","Command":"kubectl api-resources --api-group=rbac.authorization.k8s.io","Content":"# kubectl api-resources\n\nPrint the supported API resources on the server\n\n```bash\nkubectl api-resources [flags]\n```\n\n## What does it do?\n\nPrint the supported API resources on the server.\n\n## Examples\n\n# Print the supported API resources\n\nkubectl api-resources\n\n# Print the supported API resources with more information\n\nkubectl api-resources -o wide\n\n# Print the supported API resources sorted by a column\n\nkubectl api-resources --sort-by=name\n\n# Print the supported namespaced resources\n\nkubectl api-resources --namespaced=true\n\n# Print the supported non-namespaced resources\n\nkubectl api-resources --namespaced=false\n\n# Print the supported API resources with a specific APIGroup\n\nkubectl api-resources --api-group=rbac.authorization.k8s.io\n\n## What are the flags?\n\n```bash\n      --api-group string   Limit to resources in the specified API group.\n      --cached             Use the cached list of resources if available.\n  -h, --help               help for api-resources\n      --namespaced         If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default. (default true)\n      --no-headers         When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string      Output format. One of: (wide, name).\n      --sort-by string     If non-empty, sort list of resources using specified field. The field can be either 'name' or 'kind'.\n      --verbs strings      Limit to resources that support the specified verbs.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the supported API versions","Command":"kubectl api-versions","Content":"# kubectl api-versions\n\nPrint the supported API versions on the server, in the form of \"group/version\"\n\n```bash\nkubectl api-versions\n```\n\n## What does it do?\n\nPrint the supported API versions on the server, in the form of \"group/version\".\n\n## Examples\n\n# Print the supported API versions\n\nkubectl api-versions\n\n## What are the flags?\n\n```bash\n  -h, --help   help for api-versions\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Edit the last-applied-configuration annotations by type/name in YAML","Command":"kubectl apply edit-last-applied deployment/nginx","Content":"# kubectl apply edit-last-applied\n\nEdit latest last-applied-configuration annotations of a resource/object\n\n```bash\nkubectl apply edit-last-applied (RESOURCE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nEdit the latest last-applied-configuration annotations of resources from the default editor.\n\n The edit-last-applied command allows you to directly edit any API resource you can retrieve via the command-line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts file names as well as command-line arguments, although the files you point to must be previously saved versions of resources.\n\n The default format is YAML. To edit in JSON, specify \"-o json\".\n\n The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.\n\n In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.\n\n## Examples\n\n# Edit the last-applied-configuration annotations by type/name in YAML\n\nkubectl apply edit-last-applied deployment/nginx\n\n# Edit the last-applied-configuration annotations by file in JSON\n\nkubectl apply edit-last-applied -f deploy.yaml -o json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings              Filename, directory, or URL to files to use to edit the resource\n  -h, --help                          help for edit-last-applied\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]    Must be one of: strict (or true), warn, ignore (or false).\n                                      \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                      \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                      \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings          Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl apply - Apply a configuration to a resource by file name or stdin\n"},{"Description":" Edit the last-applied-configuration annotations by file in JSON","Command":"kubectl apply edit-last-applied -f deploy.yaml -o json","Content":"# kubectl apply edit-last-applied\n\nEdit latest last-applied-configuration annotations of a resource/object\n\n```bash\nkubectl apply edit-last-applied (RESOURCE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nEdit the latest last-applied-configuration annotations of resources from the default editor.\n\n The edit-last-applied command allows you to directly edit any API resource you can retrieve via the command-line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts file names as well as command-line arguments, although the files you point to must be previously saved versions of resources.\n\n The default format is YAML. To edit in JSON, specify \"-o json\".\n\n The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.\n\n In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.\n\n## Examples\n\n# Edit the last-applied-configuration annotations by type/name in YAML\n\nkubectl apply edit-last-applied deployment/nginx\n\n# Edit the last-applied-configuration annotations by file in JSON\n\nkubectl apply edit-last-applied -f deploy.yaml -o json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings              Filename, directory, or URL to files to use to edit the resource\n  -h, --help                          help for edit-last-applied\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]    Must be one of: strict (or true), warn, ignore (or false).\n                                      \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                      \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                      \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings          Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl apply - Apply a configuration to a resource by file name or stdin\n"},{"Description":" Set the last-applied-configuration of a resource to match the contents of a file","Command":"kubectl apply set-last-applied -f deploy.yaml","Content":"# kubectl apply set-last-applied\n\nSet the last-applied-configuration annotation on a live object to match the contents of a file\n\n```bash\nkubectl apply set-last-applied -f FILENAME\n```\n\n## What does it do?\n\nSet the latest last-applied-configuration annotations by setting it to match the contents of a file. This results in the last-applied-configuration being updated as though 'kubectl apply -f\u003cfile\u003e ' was run, without updating any other parts of the object.\n\n## Examples\n\n# Set the last-applied-configuration of a resource to match the contents of a file\n\nkubectl apply set-last-applied -f deploy.yaml\n\n# Execute set-last-applied against each configuration file in a directory\n\nkubectl apply set-last-applied -f path/\n\n# Set the last-applied-configuration of a resource to match the contents of a file; will create the annotation if it does not already exist\n\nkubectl apply set-last-applied -f deploy.yaml --create-annotation=true\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --create-annotation              Will create 'last-applied-configuration' annotations if current objects doesn't have one\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files that contains the last-applied-configuration annotations\n  -h, --help                           help for set-last-applied\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl apply - Apply a configuration to a resource by file name or stdin\n"},{"Description":" Execute set-last-applied against each configuration file in a directory","Command":"kubectl apply set-last-applied -f path/","Content":"# kubectl apply set-last-applied\n\nSet the last-applied-configuration annotation on a live object to match the contents of a file\n\n```bash\nkubectl apply set-last-applied -f FILENAME\n```\n\n## What does it do?\n\nSet the latest last-applied-configuration annotations by setting it to match the contents of a file. This results in the last-applied-configuration being updated as though 'kubectl apply -f\u003cfile\u003e ' was run, without updating any other parts of the object.\n\n## Examples\n\n# Set the last-applied-configuration of a resource to match the contents of a file\n\nkubectl apply set-last-applied -f deploy.yaml\n\n# Execute set-last-applied against each configuration file in a directory\n\nkubectl apply set-last-applied -f path/\n\n# Set the last-applied-configuration of a resource to match the contents of a file; will create the annotation if it does not already exist\n\nkubectl apply set-last-applied -f deploy.yaml --create-annotation=true\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --create-annotation              Will create 'last-applied-configuration' annotations if current objects doesn't have one\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files that contains the last-applied-configuration annotations\n  -h, --help                           help for set-last-applied\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl apply - Apply a configuration to a resource by file name or stdin\n"},{"Description":" Set the last-applied-configuration of a resource to match the contents of a file; will create the annotation if it does not already exist","Command":"kubectl apply set-last-applied -f deploy.yaml --create-annotation=true","Content":"# kubectl apply set-last-applied\n\nSet the last-applied-configuration annotation on a live object to match the contents of a file\n\n```bash\nkubectl apply set-last-applied -f FILENAME\n```\n\n## What does it do?\n\nSet the latest last-applied-configuration annotations by setting it to match the contents of a file. This results in the last-applied-configuration being updated as though 'kubectl apply -f\u003cfile\u003e ' was run, without updating any other parts of the object.\n\n## Examples\n\n# Set the last-applied-configuration of a resource to match the contents of a file\n\nkubectl apply set-last-applied -f deploy.yaml\n\n# Execute set-last-applied against each configuration file in a directory\n\nkubectl apply set-last-applied -f path/\n\n# Set the last-applied-configuration of a resource to match the contents of a file; will create the annotation if it does not already exist\n\nkubectl apply set-last-applied -f deploy.yaml --create-annotation=true\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --create-annotation              Will create 'last-applied-configuration' annotations if current objects doesn't have one\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files that contains the last-applied-configuration annotations\n  -h, --help                           help for set-last-applied\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl apply - Apply a configuration to a resource by file name or stdin\n"},{"Description":" View the last-applied-configuration annotations by type/name in YAML","Command":"kubectl apply view-last-applied deployment/nginx","Content":"# kubectl apply view-last-applied\n\nView the latest last-applied-configuration annotations of a resource/object\n\n```bash\nkubectl apply view-last-applied (TYPE [NAME | -l label] | TYPE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nView the latest last-applied-configuration annotations by type/name or file.\n\n The default output will be printed to stdout in YAML format. You can use the -o option to change the output format.\n\n## Examples\n\n# View the last-applied-configuration annotations by type/name in YAML\n\nkubectl apply view-last-applied deployment/nginx\n\n# View the last-applied-configuration annotations by file in JSON\n\nkubectl apply view-last-applied -f deploy.yaml -o json\n\n## What are the flags?\n\n```bash\n      --all                Select all resources in the namespace of the specified resource types\n  -f, --filename strings   Filename, directory, or URL to files that contains the last-applied-configuration annotations\n  -h, --help               help for view-last-applied\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string      Output format. Must be one of (yaml, json) (default \"yaml\")\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n```\n\n## SEE ALSO\n\n* kubectl apply - Apply a configuration to a resource by file name or stdin\n"},{"Description":" View the last-applied-configuration annotations by file in JSON","Command":"kubectl apply view-last-applied -f deploy.yaml -o json","Content":"# kubectl apply view-last-applied\n\nView the latest last-applied-configuration annotations of a resource/object\n\n```bash\nkubectl apply view-last-applied (TYPE [NAME | -l label] | TYPE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nView the latest last-applied-configuration annotations by type/name or file.\n\n The default output will be printed to stdout in YAML format. You can use the -o option to change the output format.\n\n## Examples\n\n# View the last-applied-configuration annotations by type/name in YAML\n\nkubectl apply view-last-applied deployment/nginx\n\n# View the last-applied-configuration annotations by file in JSON\n\nkubectl apply view-last-applied -f deploy.yaml -o json\n\n## What are the flags?\n\n```bash\n      --all                Select all resources in the namespace of the specified resource types\n  -f, --filename strings   Filename, directory, or URL to files that contains the last-applied-configuration annotations\n  -h, --help               help for view-last-applied\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string      Output format. Must be one of (yaml, json) (default \"yaml\")\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n```\n\n## SEE ALSO\n\n* kubectl apply - Apply a configuration to a resource by file name or stdin\n"},{"Description":" Apply the configuration in pod.json to a pod","Command":"kubectl apply -f ./pod.json","Content":"# kubectl apply\n\nApply a configuration to a resource by file name or stdin\n\n```bash\nkubectl apply (-f FILENAME | -k DIRECTORY)\n```\n\n## What does it do?\n\nApply a configuration to a resource by file name or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.\n\n JSON and YAML formats are accepted.\n\n Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.\n\n## Examples\n\n# Apply the configuration in pod.json to a pod\n\nkubectl apply -f ./pod.json\n\n# Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl apply -k dir/\n\n# Apply the JSON passed into stdin to a pod\n\ncat pod.json | kubectl apply -f -\n\n# Apply the configuration from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl apply -f '*.json'\n\n# Note: --prune is still in Alpha\n# Apply the configuration in manifest.yaml that matches label app=nginx and delete all other resources that are not in the file and match label app=nginx\n\nkubectl apply --prune -f manifest.yaml -l app=nginx\n\n# Apply the configuration in manifest.yaml and delete all the other config maps that are not in the file\n\nkubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap\n\n## What are the flags?\n\n```bash\n      --all                             Select all resources in the namespace of the specified resource types.\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings                The files that contain the configurations to apply.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --force-conflicts                 If true, server-side apply will force the changes against conflicts.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for apply\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --openapi-patch                   If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types. (default true)\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                       Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration (default true)\n      --prune                           Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.\n      --prune-whitelist stringArray     Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                     If true, apply runs in the server instead of the client.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl apply edit-last-applied](kubectl_apply_edit-last-applied.md) - Edit latest last-applied-configuration annotations of a resource/object\n* [kubectl apply set-last-applied](kubectl_apply_set-last-applied.md) - Set the last-applied-configuration annotation on a live object to match the contents of a file\n* [kubectl apply view-last-applied](kubectl_apply_view-last-applied.md) - View the latest last-applied-configuration annotations of a resource/object\n"},{"Description":" Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml","Command":"kubectl apply -k dir/","Content":"# kubectl apply\n\nApply a configuration to a resource by file name or stdin\n\n```bash\nkubectl apply (-f FILENAME | -k DIRECTORY)\n```\n\n## What does it do?\n\nApply a configuration to a resource by file name or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.\n\n JSON and YAML formats are accepted.\n\n Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.\n\n## Examples\n\n# Apply the configuration in pod.json to a pod\n\nkubectl apply -f ./pod.json\n\n# Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl apply -k dir/\n\n# Apply the JSON passed into stdin to a pod\n\ncat pod.json | kubectl apply -f -\n\n# Apply the configuration from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl apply -f '*.json'\n\n# Note: --prune is still in Alpha\n# Apply the configuration in manifest.yaml that matches label app=nginx and delete all other resources that are not in the file and match label app=nginx\n\nkubectl apply --prune -f manifest.yaml -l app=nginx\n\n# Apply the configuration in manifest.yaml and delete all the other config maps that are not in the file\n\nkubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap\n\n## What are the flags?\n\n```bash\n      --all                             Select all resources in the namespace of the specified resource types.\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings                The files that contain the configurations to apply.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --force-conflicts                 If true, server-side apply will force the changes against conflicts.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for apply\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --openapi-patch                   If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types. (default true)\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                       Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration (default true)\n      --prune                           Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.\n      --prune-whitelist stringArray     Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                     If true, apply runs in the server instead of the client.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl apply edit-last-applied](kubectl_apply_edit-last-applied.md) - Edit latest last-applied-configuration annotations of a resource/object\n* [kubectl apply set-last-applied](kubectl_apply_set-last-applied.md) - Set the last-applied-configuration annotation on a live object to match the contents of a file\n* [kubectl apply view-last-applied](kubectl_apply_view-last-applied.md) - View the latest last-applied-configuration annotations of a resource/object\n"},{"Description":" Apply the JSON passed into stdin to a pod","Command":"cat pod.json | kubectl apply -f -","Content":"# kubectl apply\n\nApply a configuration to a resource by file name or stdin\n\n```bash\nkubectl apply (-f FILENAME | -k DIRECTORY)\n```\n\n## What does it do?\n\nApply a configuration to a resource by file name or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.\n\n JSON and YAML formats are accepted.\n\n Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.\n\n## Examples\n\n# Apply the configuration in pod.json to a pod\n\nkubectl apply -f ./pod.json\n\n# Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl apply -k dir/\n\n# Apply the JSON passed into stdin to a pod\n\ncat pod.json | kubectl apply -f -\n\n# Apply the configuration from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl apply -f '*.json'\n\n# Note: --prune is still in Alpha\n# Apply the configuration in manifest.yaml that matches label app=nginx and delete all other resources that are not in the file and match label app=nginx\n\nkubectl apply --prune -f manifest.yaml -l app=nginx\n\n# Apply the configuration in manifest.yaml and delete all the other config maps that are not in the file\n\nkubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap\n\n## What are the flags?\n\n```bash\n      --all                             Select all resources in the namespace of the specified resource types.\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings                The files that contain the configurations to apply.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --force-conflicts                 If true, server-side apply will force the changes against conflicts.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for apply\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --openapi-patch                   If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types. (default true)\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                       Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration (default true)\n      --prune                           Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.\n      --prune-whitelist stringArray     Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                     If true, apply runs in the server instead of the client.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl apply edit-last-applied](kubectl_apply_edit-last-applied.md) - Edit latest last-applied-configuration annotations of a resource/object\n* [kubectl apply set-last-applied](kubectl_apply_set-last-applied.md) - Set the last-applied-configuration annotation on a live object to match the contents of a file\n* [kubectl apply view-last-applied](kubectl_apply_view-last-applied.md) - View the latest last-applied-configuration annotations of a resource/object\n"},{"Description":" Apply the configuration from all files that end with '.json' - i.e. expand wildcard characters in file names","Command":"kubectl apply -f '*.json'","Content":"# kubectl apply\n\nApply a configuration to a resource by file name or stdin\n\n```bash\nkubectl apply (-f FILENAME | -k DIRECTORY)\n```\n\n## What does it do?\n\nApply a configuration to a resource by file name or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.\n\n JSON and YAML formats are accepted.\n\n Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.\n\n## Examples\n\n# Apply the configuration in pod.json to a pod\n\nkubectl apply -f ./pod.json\n\n# Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl apply -k dir/\n\n# Apply the JSON passed into stdin to a pod\n\ncat pod.json | kubectl apply -f -\n\n# Apply the configuration from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl apply -f '*.json'\n\n# Note: --prune is still in Alpha\n# Apply the configuration in manifest.yaml that matches label app=nginx and delete all other resources that are not in the file and match label app=nginx\n\nkubectl apply --prune -f manifest.yaml -l app=nginx\n\n# Apply the configuration in manifest.yaml and delete all the other config maps that are not in the file\n\nkubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap\n\n## What are the flags?\n\n```bash\n      --all                             Select all resources in the namespace of the specified resource types.\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings                The files that contain the configurations to apply.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --force-conflicts                 If true, server-side apply will force the changes against conflicts.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for apply\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --openapi-patch                   If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types. (default true)\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                       Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration (default true)\n      --prune                           Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.\n      --prune-whitelist stringArray     Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                     If true, apply runs in the server instead of the client.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl apply edit-last-applied](kubectl_apply_edit-last-applied.md) - Edit latest last-applied-configuration annotations of a resource/object\n* [kubectl apply set-last-applied](kubectl_apply_set-last-applied.md) - Set the last-applied-configuration annotation on a live object to match the contents of a file\n* [kubectl apply view-last-applied](kubectl_apply_view-last-applied.md) - View the latest last-applied-configuration annotations of a resource/object\n"},{"Description":" Note: --prune is still in Alpha Apply the configuration in manifest.yaml that matches label app=nginx and delete all other resources that are not in the file and match label app=nginx","Command":"kubectl apply --prune -f manifest.yaml -l app=nginx","Content":"# kubectl apply\n\nApply a configuration to a resource by file name or stdin\n\n```bash\nkubectl apply (-f FILENAME | -k DIRECTORY)\n```\n\n## What does it do?\n\nApply a configuration to a resource by file name or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.\n\n JSON and YAML formats are accepted.\n\n Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.\n\n## Examples\n\n# Apply the configuration in pod.json to a pod\n\nkubectl apply -f ./pod.json\n\n# Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl apply -k dir/\n\n# Apply the JSON passed into stdin to a pod\n\ncat pod.json | kubectl apply -f -\n\n# Apply the configuration from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl apply -f '*.json'\n\n# Note: --prune is still in Alpha\n# Apply the configuration in manifest.yaml that matches label app=nginx and delete all other resources that are not in the file and match label app=nginx\n\nkubectl apply --prune -f manifest.yaml -l app=nginx\n\n# Apply the configuration in manifest.yaml and delete all the other config maps that are not in the file\n\nkubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap\n\n## What are the flags?\n\n```bash\n      --all                             Select all resources in the namespace of the specified resource types.\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings                The files that contain the configurations to apply.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --force-conflicts                 If true, server-side apply will force the changes against conflicts.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for apply\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --openapi-patch                   If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types. (default true)\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                       Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration (default true)\n      --prune                           Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.\n      --prune-whitelist stringArray     Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                     If true, apply runs in the server instead of the client.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl apply edit-last-applied](kubectl_apply_edit-last-applied.md) - Edit latest last-applied-configuration annotations of a resource/object\n* [kubectl apply set-last-applied](kubectl_apply_set-last-applied.md) - Set the last-applied-configuration annotation on a live object to match the contents of a file\n* [kubectl apply view-last-applied](kubectl_apply_view-last-applied.md) - View the latest last-applied-configuration annotations of a resource/object\n"},{"Description":" Apply the configuration in manifest.yaml and delete all the other config maps that are not in the file","Command":"kubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap","Content":"# kubectl apply\n\nApply a configuration to a resource by file name or stdin\n\n```bash\nkubectl apply (-f FILENAME | -k DIRECTORY)\n```\n\n## What does it do?\n\nApply a configuration to a resource by file name or stdin. The resource name must be specified. This resource will be created if it doesn't exist yet. To use 'apply', always create the resource initially with either 'apply' or 'create --save-config'.\n\n JSON and YAML formats are accepted.\n\n Alpha Disclaimer: the --prune functionality is not yet complete. Do not use unless you are aware of what the current state is. See https://issues.k8s.io/34274.\n\n## Examples\n\n# Apply the configuration in pod.json to a pod\n\nkubectl apply -f ./pod.json\n\n# Apply resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl apply -k dir/\n\n# Apply the JSON passed into stdin to a pod\n\ncat pod.json | kubectl apply -f -\n\n# Apply the configuration from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl apply -f '*.json'\n\n# Note: --prune is still in Alpha\n# Apply the configuration in manifest.yaml that matches label app=nginx and delete all other resources that are not in the file and match label app=nginx\n\nkubectl apply --prune -f manifest.yaml -l app=nginx\n\n# Apply the configuration in manifest.yaml and delete all the other config maps that are not in the file\n\nkubectl apply --prune -f manifest.yaml --all --prune-whitelist=core/v1/ConfigMap\n\n## What are the flags?\n\n```bash\n      --all                             Select all resources in the namespace of the specified resource types.\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings                The files that contain the configurations to apply.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --force-conflicts                 If true, server-side apply will force the changes against conflicts.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for apply\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --openapi-patch                   If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types. (default true)\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                       Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration (default true)\n      --prune                           Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.\n      --prune-whitelist stringArray     Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                     If true, apply runs in the server instead of the client.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl apply edit-last-applied](kubectl_apply_edit-last-applied.md) - Edit latest last-applied-configuration annotations of a resource/object\n* [kubectl apply set-last-applied](kubectl_apply_set-last-applied.md) - Set the last-applied-configuration annotation on a live object to match the contents of a file\n* [kubectl apply view-last-applied](kubectl_apply_view-last-applied.md) - View the latest last-applied-configuration annotations of a resource/object\n"},{"Description":" Get output from running pod mypod; use the 'kubectl.kubernetes.io/default-container' annotation for selecting the container to be attached or the first container in the pod will be chosen","Command":"kubectl attach mypod","Content":"# kubectl attach\n\nAttach to a running container\n\n```bash\nkubectl attach (POD | TYPE/NAME) -c CONTAINER\n```\n\n## What does it do?\n\nAttach to a process that is already running inside an existing container.\n\n## Examples\n\n# Get output from running pod mypod; use the 'kubectl.kubernetes.io/default-container' annotation\n# for selecting the container to be attached or the first container in the pod will be chosen\n\nkubectl attach mypod\n\n# Get output from ruby-container from pod mypod\n\nkubectl attach mypod -c ruby-container\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl attach mypod -c ruby-container -i -t\n\n# Get output from the first pod of a replica set named nginx\n\nkubectl attach rs/nginx\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help                           help for attach\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get output from ruby-container from pod mypod","Command":"kubectl attach mypod -c ruby-container","Content":"# kubectl attach\n\nAttach to a running container\n\n```bash\nkubectl attach (POD | TYPE/NAME) -c CONTAINER\n```\n\n## What does it do?\n\nAttach to a process that is already running inside an existing container.\n\n## Examples\n\n# Get output from running pod mypod; use the 'kubectl.kubernetes.io/default-container' annotation\n# for selecting the container to be attached or the first container in the pod will be chosen\n\nkubectl attach mypod\n\n# Get output from ruby-container from pod mypod\n\nkubectl attach mypod -c ruby-container\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl attach mypod -c ruby-container -i -t\n\n# Get output from the first pod of a replica set named nginx\n\nkubectl attach rs/nginx\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help                           help for attach\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod and sends stdout/stderr from 'bash' back to the client","Command":"kubectl attach mypod -c ruby-container -i -t","Content":"# kubectl attach\n\nAttach to a running container\n\n```bash\nkubectl attach (POD | TYPE/NAME) -c CONTAINER\n```\n\n## What does it do?\n\nAttach to a process that is already running inside an existing container.\n\n## Examples\n\n# Get output from running pod mypod; use the 'kubectl.kubernetes.io/default-container' annotation\n# for selecting the container to be attached or the first container in the pod will be chosen\n\nkubectl attach mypod\n\n# Get output from ruby-container from pod mypod\n\nkubectl attach mypod -c ruby-container\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl attach mypod -c ruby-container -i -t\n\n# Get output from the first pod of a replica set named nginx\n\nkubectl attach rs/nginx\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help                           help for attach\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get output from the first pod of a replica set named nginx","Command":"kubectl attach rs/nginx","Content":"# kubectl attach\n\nAttach to a running container\n\n```bash\nkubectl attach (POD | TYPE/NAME) -c CONTAINER\n```\n\n## What does it do?\n\nAttach to a process that is already running inside an existing container.\n\n## Examples\n\n# Get output from running pod mypod; use the 'kubectl.kubernetes.io/default-container' annotation\n# for selecting the container to be attached or the first container in the pod will be chosen\n\nkubectl attach mypod\n\n# Get output from ruby-container from pod mypod\n\nkubectl attach mypod -c ruby-container\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl attach mypod -c ruby-container -i -t\n\n# Get output from the first pod of a replica set named nginx\n\nkubectl attach rs/nginx\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help                           help for attach\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Check to see if I can create pods in any namespace","Command":"kubectl auth can-i create pods --all-namespaces","Content":"# kubectl auth can-i\n\nCheck whether an action is allowed\n\n```bash\nkubectl auth can-i VERB [TYPE | TYPE/NAME | NONRESOURCEURL]\n```\n\n## What does it do?\n\nCheck whether an action is allowed.\n\n VERB is a logical Kubernetes API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubernetes resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL that starts with \"/\". NAME is the name of a particular Kubernetes resource. This command pairs nicely with impersonation. See --as global flag.\n\n## Examples\n\n# Check to see if I can create pods in any namespace\n\nkubectl auth can-i create pods --all-namespaces\n\n# Check to see if I can list deployments in my current namespace\n\nkubectl auth can-i list deployments.apps\n\n# Check to see if I can do everything in my current namespace (\"*\" means all)\n\nkubectl auth can-i '*' '*'\n\n# Check to see if I can get the job named \"bar\" in namespace \"foo\"\n\nkubectl auth can-i list jobs.batch/bar -n foo\n\n# Check to see if I can read pod logs\n\nkubectl auth can-i get pods --subresource=log\n\n# Check to see if I can access the URL /logs/\n\nkubectl auth can-i get /logs/\n\n# List all allowed actions in namespace \"foo\"\n\nkubectl auth can-i --list --namespace=foo\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces       If true, check the specified action in all namespaces.\n  -h, --help                 help for can-i\n      --list                 If true, prints all allowed actions.\n      --no-headers           If true, prints allowed actions without headers\n  -q, --quiet                If true, suppress output and just return the exit code.\n      --subresource string   SubResource such as pod/log or deployment/scale\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" Check to see if I can list deployments in my current namespace","Command":"kubectl auth can-i list deployments.apps","Content":"# kubectl auth can-i\n\nCheck whether an action is allowed\n\n```bash\nkubectl auth can-i VERB [TYPE | TYPE/NAME | NONRESOURCEURL]\n```\n\n## What does it do?\n\nCheck whether an action is allowed.\n\n VERB is a logical Kubernetes API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubernetes resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL that starts with \"/\". NAME is the name of a particular Kubernetes resource. This command pairs nicely with impersonation. See --as global flag.\n\n## Examples\n\n# Check to see if I can create pods in any namespace\n\nkubectl auth can-i create pods --all-namespaces\n\n# Check to see if I can list deployments in my current namespace\n\nkubectl auth can-i list deployments.apps\n\n# Check to see if I can do everything in my current namespace (\"*\" means all)\n\nkubectl auth can-i '*' '*'\n\n# Check to see if I can get the job named \"bar\" in namespace \"foo\"\n\nkubectl auth can-i list jobs.batch/bar -n foo\n\n# Check to see if I can read pod logs\n\nkubectl auth can-i get pods --subresource=log\n\n# Check to see if I can access the URL /logs/\n\nkubectl auth can-i get /logs/\n\n# List all allowed actions in namespace \"foo\"\n\nkubectl auth can-i --list --namespace=foo\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces       If true, check the specified action in all namespaces.\n  -h, --help                 help for can-i\n      --list                 If true, prints all allowed actions.\n      --no-headers           If true, prints allowed actions without headers\n  -q, --quiet                If true, suppress output and just return the exit code.\n      --subresource string   SubResource such as pod/log or deployment/scale\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" Check to see if I can do everything in my current namespace (\"*\" means all)","Command":"kubectl auth can-i '*' '*'","Content":"# kubectl auth can-i\n\nCheck whether an action is allowed\n\n```bash\nkubectl auth can-i VERB [TYPE | TYPE/NAME | NONRESOURCEURL]\n```\n\n## What does it do?\n\nCheck whether an action is allowed.\n\n VERB is a logical Kubernetes API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubernetes resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL that starts with \"/\". NAME is the name of a particular Kubernetes resource. This command pairs nicely with impersonation. See --as global flag.\n\n## Examples\n\n# Check to see if I can create pods in any namespace\n\nkubectl auth can-i create pods --all-namespaces\n\n# Check to see if I can list deployments in my current namespace\n\nkubectl auth can-i list deployments.apps\n\n# Check to see if I can do everything in my current namespace (\"*\" means all)\n\nkubectl auth can-i '*' '*'\n\n# Check to see if I can get the job named \"bar\" in namespace \"foo\"\n\nkubectl auth can-i list jobs.batch/bar -n foo\n\n# Check to see if I can read pod logs\n\nkubectl auth can-i get pods --subresource=log\n\n# Check to see if I can access the URL /logs/\n\nkubectl auth can-i get /logs/\n\n# List all allowed actions in namespace \"foo\"\n\nkubectl auth can-i --list --namespace=foo\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces       If true, check the specified action in all namespaces.\n  -h, --help                 help for can-i\n      --list                 If true, prints all allowed actions.\n      --no-headers           If true, prints allowed actions without headers\n  -q, --quiet                If true, suppress output and just return the exit code.\n      --subresource string   SubResource such as pod/log or deployment/scale\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" Check to see if I can get the job named \"bar\" in namespace \"foo\"","Command":"kubectl auth can-i list jobs.batch/bar -n foo","Content":"# kubectl auth can-i\n\nCheck whether an action is allowed\n\n```bash\nkubectl auth can-i VERB [TYPE | TYPE/NAME | NONRESOURCEURL]\n```\n\n## What does it do?\n\nCheck whether an action is allowed.\n\n VERB is a logical Kubernetes API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubernetes resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL that starts with \"/\". NAME is the name of a particular Kubernetes resource. This command pairs nicely with impersonation. See --as global flag.\n\n## Examples\n\n# Check to see if I can create pods in any namespace\n\nkubectl auth can-i create pods --all-namespaces\n\n# Check to see if I can list deployments in my current namespace\n\nkubectl auth can-i list deployments.apps\n\n# Check to see if I can do everything in my current namespace (\"*\" means all)\n\nkubectl auth can-i '*' '*'\n\n# Check to see if I can get the job named \"bar\" in namespace \"foo\"\n\nkubectl auth can-i list jobs.batch/bar -n foo\n\n# Check to see if I can read pod logs\n\nkubectl auth can-i get pods --subresource=log\n\n# Check to see if I can access the URL /logs/\n\nkubectl auth can-i get /logs/\n\n# List all allowed actions in namespace \"foo\"\n\nkubectl auth can-i --list --namespace=foo\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces       If true, check the specified action in all namespaces.\n  -h, --help                 help for can-i\n      --list                 If true, prints all allowed actions.\n      --no-headers           If true, prints allowed actions without headers\n  -q, --quiet                If true, suppress output and just return the exit code.\n      --subresource string   SubResource such as pod/log or deployment/scale\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" Check to see if I can read pod logs","Command":"kubectl auth can-i get pods --subresource=log","Content":"# kubectl auth can-i\n\nCheck whether an action is allowed\n\n```bash\nkubectl auth can-i VERB [TYPE | TYPE/NAME | NONRESOURCEURL]\n```\n\n## What does it do?\n\nCheck whether an action is allowed.\n\n VERB is a logical Kubernetes API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubernetes resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL that starts with \"/\". NAME is the name of a particular Kubernetes resource. This command pairs nicely with impersonation. See --as global flag.\n\n## Examples\n\n# Check to see if I can create pods in any namespace\n\nkubectl auth can-i create pods --all-namespaces\n\n# Check to see if I can list deployments in my current namespace\n\nkubectl auth can-i list deployments.apps\n\n# Check to see if I can do everything in my current namespace (\"*\" means all)\n\nkubectl auth can-i '*' '*'\n\n# Check to see if I can get the job named \"bar\" in namespace \"foo\"\n\nkubectl auth can-i list jobs.batch/bar -n foo\n\n# Check to see if I can read pod logs\n\nkubectl auth can-i get pods --subresource=log\n\n# Check to see if I can access the URL /logs/\n\nkubectl auth can-i get /logs/\n\n# List all allowed actions in namespace \"foo\"\n\nkubectl auth can-i --list --namespace=foo\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces       If true, check the specified action in all namespaces.\n  -h, --help                 help for can-i\n      --list                 If true, prints all allowed actions.\n      --no-headers           If true, prints allowed actions without headers\n  -q, --quiet                If true, suppress output and just return the exit code.\n      --subresource string   SubResource such as pod/log or deployment/scale\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" Check to see if I can access the URL /logs/","Command":"kubectl auth can-i get /logs/","Content":"# kubectl auth can-i\n\nCheck whether an action is allowed\n\n```bash\nkubectl auth can-i VERB [TYPE | TYPE/NAME | NONRESOURCEURL]\n```\n\n## What does it do?\n\nCheck whether an action is allowed.\n\n VERB is a logical Kubernetes API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubernetes resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL that starts with \"/\". NAME is the name of a particular Kubernetes resource. This command pairs nicely with impersonation. See --as global flag.\n\n## Examples\n\n# Check to see if I can create pods in any namespace\n\nkubectl auth can-i create pods --all-namespaces\n\n# Check to see if I can list deployments in my current namespace\n\nkubectl auth can-i list deployments.apps\n\n# Check to see if I can do everything in my current namespace (\"*\" means all)\n\nkubectl auth can-i '*' '*'\n\n# Check to see if I can get the job named \"bar\" in namespace \"foo\"\n\nkubectl auth can-i list jobs.batch/bar -n foo\n\n# Check to see if I can read pod logs\n\nkubectl auth can-i get pods --subresource=log\n\n# Check to see if I can access the URL /logs/\n\nkubectl auth can-i get /logs/\n\n# List all allowed actions in namespace \"foo\"\n\nkubectl auth can-i --list --namespace=foo\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces       If true, check the specified action in all namespaces.\n  -h, --help                 help for can-i\n      --list                 If true, prints all allowed actions.\n      --no-headers           If true, prints allowed actions without headers\n  -q, --quiet                If true, suppress output and just return the exit code.\n      --subresource string   SubResource such as pod/log or deployment/scale\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" List all allowed actions in namespace \"foo\"","Command":"kubectl auth can-i --list --namespace=foo","Content":"# kubectl auth can-i\n\nCheck whether an action is allowed\n\n```bash\nkubectl auth can-i VERB [TYPE | TYPE/NAME | NONRESOURCEURL]\n```\n\n## What does it do?\n\nCheck whether an action is allowed.\n\n VERB is a logical Kubernetes API verb like 'get', 'list', 'watch', 'delete', etc. TYPE is a Kubernetes resource. Shortcuts and groups will be resolved. NONRESOURCEURL is a partial URL that starts with \"/\". NAME is the name of a particular Kubernetes resource. This command pairs nicely with impersonation. See --as global flag.\n\n## Examples\n\n# Check to see if I can create pods in any namespace\n\nkubectl auth can-i create pods --all-namespaces\n\n# Check to see if I can list deployments in my current namespace\n\nkubectl auth can-i list deployments.apps\n\n# Check to see if I can do everything in my current namespace (\"*\" means all)\n\nkubectl auth can-i '*' '*'\n\n# Check to see if I can get the job named \"bar\" in namespace \"foo\"\n\nkubectl auth can-i list jobs.batch/bar -n foo\n\n# Check to see if I can read pod logs\n\nkubectl auth can-i get pods --subresource=log\n\n# Check to see if I can access the URL /logs/\n\nkubectl auth can-i get /logs/\n\n# List all allowed actions in namespace \"foo\"\n\nkubectl auth can-i --list --namespace=foo\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces       If true, check the specified action in all namespaces.\n  -h, --help                 help for can-i\n      --list                 If true, prints all allowed actions.\n      --no-headers           If true, prints allowed actions without headers\n  -q, --quiet                If true, suppress output and just return the exit code.\n      --subresource string   SubResource such as pod/log or deployment/scale\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" Reconcile RBAC resources from a file","Command":"kubectl auth reconcile -f my-rbac-rules.yaml","Content":"# kubectl auth reconcile\n\nReconciles rules for RBAC role, role binding, cluster role, and cluster role binding objects\n\n```bash\nkubectl auth reconcile -f FILENAME\n```\n\n## What does it do?\n\nReconciles rules for RBAC role, role binding, cluster role, and cluster role binding objects.\n\n Missing objects are created, and the containing namespace is created for namespaced objects, if required.\n\n Existing roles are updated to include the permissions in the input objects, and remove extra permissions if --remove-extra-permissions is specified.\n\n Existing bindings are updated to include the subjects in the input objects, and remove extra subjects if --remove-extra-subjects is specified.\n\n This is preferred to 'apply' for RBAC resources so that semantically-aware merging of rules and subjects is done.\n\n## Examples\n\n# Reconcile RBAC resources from a file\n\nkubectl auth reconcile -f my-rbac-rules.yaml\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to reconcile.\n  -h, --help                           help for reconcile\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --remove-extra-permissions       If true, removes extra permissions added to roles\n      --remove-extra-subjects          If true, removes extra subjects added to rolebindings\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl auth - Inspect authorization\n"},{"Description":" Auto scale a deployment \"foo\", with the number of pods between 2 and 10, no target CPU utilization specified so a default autoscaling policy will be used","Command":"kubectl autoscale deployment foo --min=2 --max=10","Content":"# kubectl autoscale\n\nAuto-scale a deployment, replica set, stateful set, or replication controller\n\n```bash\nkubectl autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [--min=MINPODS] --max=MAXPODS [--cpu-percent=CPU]\n```\n\n## What does it do?\n\nCreates an autoscaler that automatically chooses and sets the number of pods that run in a Kubernetes cluster.\n\n Looks up a deployment, replica set, stateful set, or replication controller by name and creates an autoscaler that uses the given resource as a reference. An autoscaler can automatically increase or decrease number of pods deployed within the system as needed.\n\n## Examples\n\n# Auto scale a deployment \"foo\", with the number of pods between 2 and 10, no target CPU utilization specified so a default autoscaling policy will be used\n\nkubectl autoscale deployment foo --min=2 --max=10\n\n# Auto scale a replication controller \"foo\", with the number of pods between 1 and 5, target CPU utilization at 80%\n\nkubectl autoscale rc foo --max=5 --cpu-percent=80\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cpu-percent int32              The target average CPU utilization (represented as a percent of requested CPU) over all the pods. If it's not specified or negative, a default autoscaling policy will be used. (default -1)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-autoscale\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to autoscale.\n  -h, --help                           help for autoscale\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --max int32                      The upper limit for the number of pods that can be set by the autoscaler. Required. (default -1)\n      --min int32                      The lower limit for the number of pods that can be set by the autoscaler. If it's not specified or negative, the server will apply a default value. (default -1)\n      --name string                    The name for the newly created object. If not specified, the name of the input resource will be used.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Auto scale a replication controller \"foo\", with the number of pods between 1 and 5, target CPU utilization at 80%","Command":"kubectl autoscale rc foo --max=5 --cpu-percent=80","Content":"# kubectl autoscale\n\nAuto-scale a deployment, replica set, stateful set, or replication controller\n\n```bash\nkubectl autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [--min=MINPODS] --max=MAXPODS [--cpu-percent=CPU]\n```\n\n## What does it do?\n\nCreates an autoscaler that automatically chooses and sets the number of pods that run in a Kubernetes cluster.\n\n Looks up a deployment, replica set, stateful set, or replication controller by name and creates an autoscaler that uses the given resource as a reference. An autoscaler can automatically increase or decrease number of pods deployed within the system as needed.\n\n## Examples\n\n# Auto scale a deployment \"foo\", with the number of pods between 2 and 10, no target CPU utilization specified so a default autoscaling policy will be used\n\nkubectl autoscale deployment foo --min=2 --max=10\n\n# Auto scale a replication controller \"foo\", with the number of pods between 1 and 5, target CPU utilization at 80%\n\nkubectl autoscale rc foo --max=5 --cpu-percent=80\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cpu-percent int32              The target average CPU utilization (represented as a percent of requested CPU) over all the pods. If it's not specified or negative, a default autoscaling policy will be used. (default -1)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-autoscale\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to autoscale.\n  -h, --help                           help for autoscale\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --max int32                      The upper limit for the number of pods that can be set by the autoscaler. Required. (default -1)\n      --min int32                      The lower limit for the number of pods that can be set by the autoscaler. If it's not specified or negative, the server will apply a default value. (default -1)\n      --name string                    The name for the newly created object. If not specified, the name of the input resource will be used.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Approve CSR 'csr-sqgzp'","Command":"kubectl certificate approve csr-sqgzp","Content":"# kubectl certificate approve\n\nApprove a certificate signing request\n\n```bash\nkubectl certificate approve (-f FILENAME | NAME)\n```\n\n## What does it do?\n\nApprove a certificate signing request.\n\n kubectl certificate approve allows a cluster admin to approve a certificate signing request (CSR). This action tells a certificate signing controller to issue a certificate to the requestor with the attributes requested in the CSR.\n\n SECURITY NOTICE: Depending on the requested attributes, the issued certificate can potentially grant a requester access to cluster resources or to authenticate as a requested identity. Before approving a CSR, ensure you understand what the signed certificate can do.\n\n## Examples\n\n# Approve CSR 'csr-sqgzp'\n\nkubectl certificate approve csr-sqgzp\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to update\n      --force                         Update the CSR even if it is already approved.\n  -h, --help                          help for approve\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl certificate - Modify certificate resources.\n"},{"Description":" Deny CSR 'csr-sqgzp'","Command":"kubectl certificate deny csr-sqgzp","Content":"# kubectl certificate deny\n\nDeny a certificate signing request\n\n```bash\nkubectl certificate deny (-f FILENAME | NAME)\n```\n\n## What does it do?\n\nDeny a certificate signing request.\n\n kubectl certificate deny allows a cluster admin to deny a certificate signing request (CSR). This action tells a certificate signing controller to not to issue a certificate to the requestor.\n\n## Examples\n\n# Deny CSR 'csr-sqgzp'\n\nkubectl certificate deny csr-sqgzp\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to update\n      --force                         Update the CSR even if it is already denied.\n  -h, --help                          help for deny\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl certificate - Modify certificate resources.\n"},{"Description":" Dump current cluster state to stdout","Command":"kubectl cluster-info dump","Content":"# kubectl cluster-info dump\n\nDump relevant information for debugging and diagnosis\n\n```bash\nkubectl cluster-info dump [flags]\n```\n\n## What does it do?\n\nDump cluster information out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, Kubernetes will build a set of files in that directory.  By default, only dumps things in the current namespace and 'kube-system' namespace, but you can switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.\n\n The command also dumps the logs of all of the pods in the cluster; these logs are dumped into different directories based on namespace and pod name.\n\n## Examples\n\n# Dump current cluster state to stdout\n\nkubectl cluster-info dump\n\n# Dump current cluster state to /path/to/cluster-state\n\nkubectl cluster-info dump --output-directory=/path/to/cluster-state\n\n# Dump all namespaces to stdout\n\nkubectl cluster-info dump --all-namespaces\n\n# Dump a set of namespaces to /path/to/cluster-state\n\nkubectl cluster-info dump --namespaces default,kube-system --output-directory=/path/to/cluster-state\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                 If true, dump all namespaces.  If true, --namespaces is ignored.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -h, --help                           help for dump\n      --namespaces strings             A comma separated list of namespaces to dump.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file). (default \"json\")\n      --output-directory string        Where to output the files.  If empty or '-' uses stdout, otherwise creates a directory hierarchy in that directory\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl cluster-info - Display cluster information\n"},{"Description":" Dump current cluster state to /path/to/cluster-state","Command":"kubectl cluster-info dump --output-directory=/path/to/cluster-state","Content":"# kubectl cluster-info dump\n\nDump relevant information for debugging and diagnosis\n\n```bash\nkubectl cluster-info dump [flags]\n```\n\n## What does it do?\n\nDump cluster information out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, Kubernetes will build a set of files in that directory.  By default, only dumps things in the current namespace and 'kube-system' namespace, but you can switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.\n\n The command also dumps the logs of all of the pods in the cluster; these logs are dumped into different directories based on namespace and pod name.\n\n## Examples\n\n# Dump current cluster state to stdout\n\nkubectl cluster-info dump\n\n# Dump current cluster state to /path/to/cluster-state\n\nkubectl cluster-info dump --output-directory=/path/to/cluster-state\n\n# Dump all namespaces to stdout\n\nkubectl cluster-info dump --all-namespaces\n\n# Dump a set of namespaces to /path/to/cluster-state\n\nkubectl cluster-info dump --namespaces default,kube-system --output-directory=/path/to/cluster-state\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                 If true, dump all namespaces.  If true, --namespaces is ignored.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -h, --help                           help for dump\n      --namespaces strings             A comma separated list of namespaces to dump.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file). (default \"json\")\n      --output-directory string        Where to output the files.  If empty or '-' uses stdout, otherwise creates a directory hierarchy in that directory\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl cluster-info - Display cluster information\n"},{"Description":" Dump all namespaces to stdout","Command":"kubectl cluster-info dump --all-namespaces","Content":"# kubectl cluster-info dump\n\nDump relevant information for debugging and diagnosis\n\n```bash\nkubectl cluster-info dump [flags]\n```\n\n## What does it do?\n\nDump cluster information out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, Kubernetes will build a set of files in that directory.  By default, only dumps things in the current namespace and 'kube-system' namespace, but you can switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.\n\n The command also dumps the logs of all of the pods in the cluster; these logs are dumped into different directories based on namespace and pod name.\n\n## Examples\n\n# Dump current cluster state to stdout\n\nkubectl cluster-info dump\n\n# Dump current cluster state to /path/to/cluster-state\n\nkubectl cluster-info dump --output-directory=/path/to/cluster-state\n\n# Dump all namespaces to stdout\n\nkubectl cluster-info dump --all-namespaces\n\n# Dump a set of namespaces to /path/to/cluster-state\n\nkubectl cluster-info dump --namespaces default,kube-system --output-directory=/path/to/cluster-state\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                 If true, dump all namespaces.  If true, --namespaces is ignored.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -h, --help                           help for dump\n      --namespaces strings             A comma separated list of namespaces to dump.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file). (default \"json\")\n      --output-directory string        Where to output the files.  If empty or '-' uses stdout, otherwise creates a directory hierarchy in that directory\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl cluster-info - Display cluster information\n"},{"Description":" Dump a set of namespaces to /path/to/cluster-state","Command":"kubectl cluster-info dump --namespaces default,kube-system --output-directory=/path/to/cluster-state","Content":"# kubectl cluster-info dump\n\nDump relevant information for debugging and diagnosis\n\n```bash\nkubectl cluster-info dump [flags]\n```\n\n## What does it do?\n\nDump cluster information out suitable for debugging and diagnosing cluster problems.  By default, dumps everything to stdout. You can optionally specify a directory with --output-directory.  If you specify a directory, Kubernetes will build a set of files in that directory.  By default, only dumps things in the current namespace and 'kube-system' namespace, but you can switch to a different namespace with the --namespaces flag, or specify --all-namespaces to dump all namespaces.\n\n The command also dumps the logs of all of the pods in the cluster; these logs are dumped into different directories based on namespace and pod name.\n\n## Examples\n\n# Dump current cluster state to stdout\n\nkubectl cluster-info dump\n\n# Dump current cluster state to /path/to/cluster-state\n\nkubectl cluster-info dump --output-directory=/path/to/cluster-state\n\n# Dump all namespaces to stdout\n\nkubectl cluster-info dump --all-namespaces\n\n# Dump a set of namespaces to /path/to/cluster-state\n\nkubectl cluster-info dump --namespaces default,kube-system --output-directory=/path/to/cluster-state\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                 If true, dump all namespaces.  If true, --namespaces is ignored.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -h, --help                           help for dump\n      --namespaces strings             A comma separated list of namespaces to dump.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file). (default \"json\")\n      --output-directory string        Where to output the files.  If empty or '-' uses stdout, otherwise creates a directory hierarchy in that directory\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl cluster-info - Display cluster information\n"},{"Description":" Print the address of the control plane and cluster services","Command":"kubectl cluster-info","Content":"# kubectl cluster-info\n\nDisplay cluster information\n\n```bash\nkubectl cluster-info [flags]\n```\n\n## What does it do?\n\nDisplay addresses of the control plane and services with label kubernetes.io/cluster-service=true. To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n\n## Examples\n\n# Print the address of the control plane and cluster services\n\nkubectl cluster-info\n\n## What are the flags?\n\n```bash\n  -h, --help   help for cluster-info\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl cluster-info dump](kubectl_cluster-info_dump.md) - Dump relevant information for debugging and diagnosis\n"},{"Description":" Installing bash completion on macOS using homebrew # If running Bash 3.2 included with macOS","Command":"brew install bash-completion","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" # or, if running Bash 4.1+","Command":"brew install bash-completion@2","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" # If kubectl is installed via homebrew, this should start working immediately # If you've installed via other means, you may need add the completion to your completion directory","Command":"kubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Installing bash completion on Linux # If bash-completion is not installed on Linux, install the 'bash-completion' package # via your distribution's package manager. # Load the kubectl completion code for bash into the current shell","Command":"source \u003c(kubectl completion bash)","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" # Write bash completion code to a file and source it from .bash_profile","Command":"kubectl completion bash \u003e ~/.kube/completion.bash.inc","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":"","Command":"printf \"","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Kubectl shell completion","Command":"source '$HOME/.kube/completion.bash.inc'","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":"","Command":"\" \u003e\u003e $HOME/.bash_profile","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":"","Command":"source $HOME/.bash_profile","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Load the kubectl completion code for zsh[1] into the current shell","Command":"source \u003c(kubectl completion zsh)","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Set the kubectl completion code for zsh[1] to autoload on startup","Command":"kubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Load the kubectl completion code for fish[2] into the current shell","Command":"kubectl completion fish | source","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" To load completions for each session, execute once:","Command":"kubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Load the kubectl completion code for powershell into the current shell","Command":"kubectl completion powershell | Out-String | Invoke-Expression","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Set kubectl completion code for powershell to run on startup # Save completion code to a script and execute in the profile","Command":"kubectl completion powershell \u003e $HOME\\.kube\\completion.ps1","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":"","Command":"Add-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" # Execute completion code in the profile","Command":"Add-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":"","Command":"kubectl completion powershell | Out-String | Invoke-Expression","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":"","Command":"}\"","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" # Add completion code directly to the $PROFILE script","Command":"kubectl completion powershell \u003e\u003e $PROFILE","Content":"# kubectl completion\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell)\n\n```bash\nkubectl completion SHELL\n```\n\n## What does it do?\n\nOutput shell completion code for the specified shell (bash, zsh, fish, or powershell). The shell code must be evaluated to provide interactive completion of kubectl commands.  This can be done by sourcing it from the .bash_profile.\n\n Detailed instructions on how to do this are available here:\n\n    for macOS:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion\n  \n    for linux:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion\n  \n    for windows:\n    https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/#enable-shell-autocompletion\n  \n Note for zsh users: [1] zsh completions are only supported in versions of zsh \u003e= 5.2.\n\n## Examples\n\n# Installing bash completion on macOS using homebrew\n## If running Bash 3.2 included with macOS\n\nbrew install bash-completion\n\n## or, if running Bash 4.1+\n\nbrew install bash-completion@2\n\n## If kubectl is installed via homebrew, this should start working immediately\n## If you've installed via other means, you may need add the completion to your completion directory\n\nkubectl completion bash \u003e $(brew --prefix)/etc/bash_completion.d/kubectl\n\n# Installing bash completion on Linux\n## If bash-completion is not installed on Linux, install the 'bash-completion' package\n## via your distribution's package manager.\n## Load the kubectl completion code for bash into the current shell\n\nsource \u003c(kubectl completion bash)\n\n## Write bash completion code to a file and source it from .bash_profile\n\nkubectl completion bash \u003e ~/.kube/completion.bash.inc\n\n\nprintf \"\n\n# Kubectl shell completion\n\nsource '$HOME/.kube/completion.bash.inc'\n\n\n\" \u003e\u003e $HOME/.bash_profile\n\n\nsource $HOME/.bash_profile\n\n# Load the kubectl completion code for zsh[1] into the current shell\n\nsource \u003c(kubectl completion zsh)\n\n# Set the kubectl completion code for zsh[1] to autoload on startup\n\nkubectl completion zsh \u003e \"${fpath[1]}/_kubectl\"\n\n# Load the kubectl completion code for fish[2] into the current shell\n\nkubectl completion fish | source\n\n# To load completions for each session, execute once:\n\nkubectl completion fish \u003e ~/.config/fish/completions/kubectl.fish\n\n# Load the kubectl completion code for powershell into the current shell\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# Set kubectl completion code for powershell to run on startup\n## Save completion code to a script and execute in the profile\n\nkubectl completion powershell \u003e $HOME\\.kube\\completion.ps1\n\n\nAdd-Content $PROFILE \"$HOME\\.kube\\completion.ps1\"\n\n## Execute completion code in the profile\n\nAdd-Content $PROFILE \"if (Get-Command kubectl -ErrorAction SilentlyContinue) {\n\n\nkubectl completion powershell | Out-String | Invoke-Expression\n\n\n}\"\n\n## Add completion code directly to the $PROFILE script\n\nkubectl completion powershell \u003e\u003e $PROFILE\n\n## What are the flags?\n\n```bash\n  -h, --help   help for completion\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Display the current-context","Command":"kubectl config current-context","Content":"# kubectl config current-context\n\nDisplay the current-context\n\n```bash\nkubectl config current-context [flags]\n```\n\n## What does it do?\n\nDisplay the current-context.\n\n## Examples\n\n# Display the current-context\n\nkubectl config current-context\n\n## What are the flags?\n\n```bash\n  -h, --help   help for current-context\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Delete the minikube cluster","Command":"kubectl config delete-cluster minikube","Content":"# kubectl config delete-cluster\n\nDelete the specified cluster from the kubeconfig\n\n```bash\nkubectl config delete-cluster NAME\n```\n\n## What does it do?\n\nDelete the specified cluster from the kubeconfig.\n\n## Examples\n\n# Delete the minikube cluster\n\nkubectl config delete-cluster minikube\n\n## What are the flags?\n\n```bash\n  -h, --help   help for delete-cluster\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Delete the context for the minikube cluster","Command":"kubectl config delete-context minikube","Content":"# kubectl config delete-context\n\nDelete the specified context from the kubeconfig\n\n```bash\nkubectl config delete-context NAME\n```\n\n## What does it do?\n\nDelete the specified context from the kubeconfig.\n\n## Examples\n\n# Delete the context for the minikube cluster\n\nkubectl config delete-context minikube\n\n## What are the flags?\n\n```bash\n  -h, --help   help for delete-context\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Delete the minikube user","Command":"kubectl config delete-user minikube","Content":"# kubectl config delete-user\n\nDelete the specified user from the kubeconfig\n\n```bash\nkubectl config delete-user NAME\n```\n\n## What does it do?\n\nDelete the specified user from the kubeconfig.\n\n## Examples\n\n# Delete the minikube user\n\nkubectl config delete-user minikube\n\n## What are the flags?\n\n```bash\n  -h, --help   help for delete-user\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" List the clusters that kubectl knows about","Command":"kubectl config get-clusters","Content":"# kubectl config get-clusters\n\nDisplay clusters defined in the kubeconfig\n\n```bash\nkubectl config get-clusters [flags]\n```\n\n## What does it do?\n\nDisplay clusters defined in the kubeconfig.\n\n## Examples\n\n# List the clusters that kubectl knows about\n\nkubectl config get-clusters\n\n## What are the flags?\n\n```bash\n  -h, --help   help for get-clusters\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" List all the contexts in your kubeconfig file","Command":"kubectl config get-contexts","Content":"# kubectl config get-contexts\n\nDescribe one or many contexts\n\n```bash\nkubectl config get-contexts [(-o|--output=)name)]\n```\n\n## What does it do?\n\nDisplay one or many contexts from the kubeconfig file.\n\n## Examples\n\n# List all the contexts in your kubeconfig file\n\nkubectl config get-contexts\n\n# Describe one context in your kubeconfig file\n\nkubectl config get-contexts my-context\n\n## What are the flags?\n\n```bash\n  -h, --help            help for get-contexts\n      --no-headers      When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string   Output format. One of: (name).\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Describe one context in your kubeconfig file","Command":"kubectl config get-contexts my-context","Content":"# kubectl config get-contexts\n\nDescribe one or many contexts\n\n```bash\nkubectl config get-contexts [(-o|--output=)name)]\n```\n\n## What does it do?\n\nDisplay one or many contexts from the kubeconfig file.\n\n## Examples\n\n# List all the contexts in your kubeconfig file\n\nkubectl config get-contexts\n\n# Describe one context in your kubeconfig file\n\nkubectl config get-contexts my-context\n\n## What are the flags?\n\n```bash\n  -h, --help            help for get-contexts\n      --no-headers      When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string   Output format. One of: (name).\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" List the users that kubectl knows about","Command":"kubectl config get-users","Content":"# kubectl config get-users\n\nDisplay users defined in the kubeconfig\n\n```bash\nkubectl config get-users [flags]\n```\n\n## What does it do?\n\nDisplay users defined in the kubeconfig.\n\n## Examples\n\n# List the users that kubectl knows about\n\nkubectl config get-users\n\n## What are the flags?\n\n```bash\n  -h, --help   help for get-users\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Rename the context 'old-name' to 'new-name' in your kubeconfig file","Command":"kubectl config rename-context old-name new-name","Content":"# kubectl config rename-context\n\nRename a context from the kubeconfig file\n\n```bash\nkubectl config rename-context CONTEXT_NAME NEW_NAME\n```\n\n## What does it do?\n\nRenames a context from the kubeconfig file.\n\n CONTEXT_NAME is the context name that you want to change.\n\n NEW_NAME is the new name you want to set.\n\n Note: If the context being renamed is the 'current-context', this field will also be updated.\n\n## Examples\n\n# Rename the context 'old-name' to 'new-name' in your kubeconfig file\n\nkubectl config rename-context old-name new-name\n\n## What are the flags?\n\n```bash\n  -h, --help   help for rename-context\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set the server field on the my-cluster cluster to https://1.2.3.4","Command":"kubectl config set clusters.my-cluster.server https://1.2.3.4","Content":"# kubectl config set\n\nSet an individual value in a kubeconfig file\n\n```bash\nkubectl config set PROPERTY_NAME PROPERTY_VALUE\n```\n\n## What does it do?\n\nSet an individual value in a kubeconfig file.\n\n PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.\n\n PROPERTY_VALUE is the new value you want to set. Binary fields such as 'certificate-authority-data' expect a base64 encoded string unless the --set-raw-bytes flag is used.\n\n Specifying an attribute name that already exists will merge new fields on top of existing values.\n\n## Examples\n\n# Set the server field on the my-cluster cluster to https://1.2.3.4\n\nkubectl config set clusters.my-cluster.server https://1.2.3.4\n\n# Set the certificate-authority-data field on the my-cluster cluster\n\nkubectl config set clusters.my-cluster.certificate-authority-data $(echo \"cert_data_here\" | base64 -i -)\n\n# Set the cluster field in the my-context context to my-cluster\n\nkubectl config set contexts.my-context.cluster my-cluster\n\n# Set the client-key-data field in the cluster-admin user using --set-raw-bytes option\n\nkubectl config set users.cluster-admin.client-key-data cert_data_here --set-raw-bytes=true\n\n## What are the flags?\n\n```bash\n  -h, --help                            help for set\n      --set-raw-bytes tristate[=true]   When writing a []byte PROPERTY_VALUE, write the given string directly without base64 decoding.\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set the certificate-authority-data field on the my-cluster cluster","Command":"kubectl config set clusters.my-cluster.certificate-authority-data $(echo \"cert_data_here\" | base64 -i -)","Content":"# kubectl config set\n\nSet an individual value in a kubeconfig file\n\n```bash\nkubectl config set PROPERTY_NAME PROPERTY_VALUE\n```\n\n## What does it do?\n\nSet an individual value in a kubeconfig file.\n\n PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.\n\n PROPERTY_VALUE is the new value you want to set. Binary fields such as 'certificate-authority-data' expect a base64 encoded string unless the --set-raw-bytes flag is used.\n\n Specifying an attribute name that already exists will merge new fields on top of existing values.\n\n## Examples\n\n# Set the server field on the my-cluster cluster to https://1.2.3.4\n\nkubectl config set clusters.my-cluster.server https://1.2.3.4\n\n# Set the certificate-authority-data field on the my-cluster cluster\n\nkubectl config set clusters.my-cluster.certificate-authority-data $(echo \"cert_data_here\" | base64 -i -)\n\n# Set the cluster field in the my-context context to my-cluster\n\nkubectl config set contexts.my-context.cluster my-cluster\n\n# Set the client-key-data field in the cluster-admin user using --set-raw-bytes option\n\nkubectl config set users.cluster-admin.client-key-data cert_data_here --set-raw-bytes=true\n\n## What are the flags?\n\n```bash\n  -h, --help                            help for set\n      --set-raw-bytes tristate[=true]   When writing a []byte PROPERTY_VALUE, write the given string directly without base64 decoding.\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set the cluster field in the my-context context to my-cluster","Command":"kubectl config set contexts.my-context.cluster my-cluster","Content":"# kubectl config set\n\nSet an individual value in a kubeconfig file\n\n```bash\nkubectl config set PROPERTY_NAME PROPERTY_VALUE\n```\n\n## What does it do?\n\nSet an individual value in a kubeconfig file.\n\n PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.\n\n PROPERTY_VALUE is the new value you want to set. Binary fields such as 'certificate-authority-data' expect a base64 encoded string unless the --set-raw-bytes flag is used.\n\n Specifying an attribute name that already exists will merge new fields on top of existing values.\n\n## Examples\n\n# Set the server field on the my-cluster cluster to https://1.2.3.4\n\nkubectl config set clusters.my-cluster.server https://1.2.3.4\n\n# Set the certificate-authority-data field on the my-cluster cluster\n\nkubectl config set clusters.my-cluster.certificate-authority-data $(echo \"cert_data_here\" | base64 -i -)\n\n# Set the cluster field in the my-context context to my-cluster\n\nkubectl config set contexts.my-context.cluster my-cluster\n\n# Set the client-key-data field in the cluster-admin user using --set-raw-bytes option\n\nkubectl config set users.cluster-admin.client-key-data cert_data_here --set-raw-bytes=true\n\n## What are the flags?\n\n```bash\n  -h, --help                            help for set\n      --set-raw-bytes tristate[=true]   When writing a []byte PROPERTY_VALUE, write the given string directly without base64 decoding.\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set the client-key-data field in the cluster-admin user using --set-raw-bytes option","Command":"kubectl config set users.cluster-admin.client-key-data cert_data_here --set-raw-bytes=true","Content":"# kubectl config set\n\nSet an individual value in a kubeconfig file\n\n```bash\nkubectl config set PROPERTY_NAME PROPERTY_VALUE\n```\n\n## What does it do?\n\nSet an individual value in a kubeconfig file.\n\n PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.\n\n PROPERTY_VALUE is the new value you want to set. Binary fields such as 'certificate-authority-data' expect a base64 encoded string unless the --set-raw-bytes flag is used.\n\n Specifying an attribute name that already exists will merge new fields on top of existing values.\n\n## Examples\n\n# Set the server field on the my-cluster cluster to https://1.2.3.4\n\nkubectl config set clusters.my-cluster.server https://1.2.3.4\n\n# Set the certificate-authority-data field on the my-cluster cluster\n\nkubectl config set clusters.my-cluster.certificate-authority-data $(echo \"cert_data_here\" | base64 -i -)\n\n# Set the cluster field in the my-context context to my-cluster\n\nkubectl config set contexts.my-context.cluster my-cluster\n\n# Set the client-key-data field in the cluster-admin user using --set-raw-bytes option\n\nkubectl config set users.cluster-admin.client-key-data cert_data_here --set-raw-bytes=true\n\n## What are the flags?\n\n```bash\n  -h, --help                            help for set\n      --set-raw-bytes tristate[=true]   When writing a []byte PROPERTY_VALUE, write the given string directly without base64 decoding.\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set only the server field on the e2e cluster entry without touching other values","Command":"kubectl config set-cluster e2e --server=https://1.2.3.4","Content":"# kubectl config set-cluster\n\nSet a cluster entry in kubeconfig\n\n```bash\nkubectl config set-cluster NAME [--server=server] [--certificate-authority=path/to/certificate/authority] [--insecure-skip-tls-verify=true] [--tls-server-name=example.com]\n```\n\n## What does it do?\n\nSet a cluster entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values for those fields.\n\n## Examples\n\n# Set only the server field on the e2e cluster entry without touching other values\n\nkubectl config set-cluster e2e --server=https://1.2.3.4\n\n# Embed certificate authority data for the e2e cluster entry\n\nkubectl config set-cluster e2e --embed-certs --certificate-authority=~/.kube/e2e/kubernetes.ca.crt\n\n# Disable cert checking for the e2e cluster entry\n\nkubectl config set-cluster e2e --insecure-skip-tls-verify=true\n\n# Set custom TLS server name to use for validation for the e2e cluster entry\n\nkubectl config set-cluster e2e --tls-server-name=my-cluster-name\n\n# Set proxy url for the e2e cluster entry\n\nkubectl config set-cluster e2e --proxy-url=https://1.2.3.4\n\n## What are the flags?\n\n```bash\n      --embed-certs tristate[=true]   embed-certs for the cluster entry in kubeconfig\n  -h, --help                          help for set-cluster\n      --proxy-url string              proxy-url for the cluster entry in kubeconfig\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Embed certificate authority data for the e2e cluster entry","Command":"kubectl config set-cluster e2e --embed-certs --certificate-authority=~/.kube/e2e/kubernetes.ca.crt","Content":"# kubectl config set-cluster\n\nSet a cluster entry in kubeconfig\n\n```bash\nkubectl config set-cluster NAME [--server=server] [--certificate-authority=path/to/certificate/authority] [--insecure-skip-tls-verify=true] [--tls-server-name=example.com]\n```\n\n## What does it do?\n\nSet a cluster entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values for those fields.\n\n## Examples\n\n# Set only the server field on the e2e cluster entry without touching other values\n\nkubectl config set-cluster e2e --server=https://1.2.3.4\n\n# Embed certificate authority data for the e2e cluster entry\n\nkubectl config set-cluster e2e --embed-certs --certificate-authority=~/.kube/e2e/kubernetes.ca.crt\n\n# Disable cert checking for the e2e cluster entry\n\nkubectl config set-cluster e2e --insecure-skip-tls-verify=true\n\n# Set custom TLS server name to use for validation for the e2e cluster entry\n\nkubectl config set-cluster e2e --tls-server-name=my-cluster-name\n\n# Set proxy url for the e2e cluster entry\n\nkubectl config set-cluster e2e --proxy-url=https://1.2.3.4\n\n## What are the flags?\n\n```bash\n      --embed-certs tristate[=true]   embed-certs for the cluster entry in kubeconfig\n  -h, --help                          help for set-cluster\n      --proxy-url string              proxy-url for the cluster entry in kubeconfig\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Disable cert checking for the e2e cluster entry","Command":"kubectl config set-cluster e2e --insecure-skip-tls-verify=true","Content":"# kubectl config set-cluster\n\nSet a cluster entry in kubeconfig\n\n```bash\nkubectl config set-cluster NAME [--server=server] [--certificate-authority=path/to/certificate/authority] [--insecure-skip-tls-verify=true] [--tls-server-name=example.com]\n```\n\n## What does it do?\n\nSet a cluster entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values for those fields.\n\n## Examples\n\n# Set only the server field on the e2e cluster entry without touching other values\n\nkubectl config set-cluster e2e --server=https://1.2.3.4\n\n# Embed certificate authority data for the e2e cluster entry\n\nkubectl config set-cluster e2e --embed-certs --certificate-authority=~/.kube/e2e/kubernetes.ca.crt\n\n# Disable cert checking for the e2e cluster entry\n\nkubectl config set-cluster e2e --insecure-skip-tls-verify=true\n\n# Set custom TLS server name to use for validation for the e2e cluster entry\n\nkubectl config set-cluster e2e --tls-server-name=my-cluster-name\n\n# Set proxy url for the e2e cluster entry\n\nkubectl config set-cluster e2e --proxy-url=https://1.2.3.4\n\n## What are the flags?\n\n```bash\n      --embed-certs tristate[=true]   embed-certs for the cluster entry in kubeconfig\n  -h, --help                          help for set-cluster\n      --proxy-url string              proxy-url for the cluster entry in kubeconfig\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set custom TLS server name to use for validation for the e2e cluster entry","Command":"kubectl config set-cluster e2e --tls-server-name=my-cluster-name","Content":"# kubectl config set-cluster\n\nSet a cluster entry in kubeconfig\n\n```bash\nkubectl config set-cluster NAME [--server=server] [--certificate-authority=path/to/certificate/authority] [--insecure-skip-tls-verify=true] [--tls-server-name=example.com]\n```\n\n## What does it do?\n\nSet a cluster entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values for those fields.\n\n## Examples\n\n# Set only the server field on the e2e cluster entry without touching other values\n\nkubectl config set-cluster e2e --server=https://1.2.3.4\n\n# Embed certificate authority data for the e2e cluster entry\n\nkubectl config set-cluster e2e --embed-certs --certificate-authority=~/.kube/e2e/kubernetes.ca.crt\n\n# Disable cert checking for the e2e cluster entry\n\nkubectl config set-cluster e2e --insecure-skip-tls-verify=true\n\n# Set custom TLS server name to use for validation for the e2e cluster entry\n\nkubectl config set-cluster e2e --tls-server-name=my-cluster-name\n\n# Set proxy url for the e2e cluster entry\n\nkubectl config set-cluster e2e --proxy-url=https://1.2.3.4\n\n## What are the flags?\n\n```bash\n      --embed-certs tristate[=true]   embed-certs for the cluster entry in kubeconfig\n  -h, --help                          help for set-cluster\n      --proxy-url string              proxy-url for the cluster entry in kubeconfig\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set proxy url for the e2e cluster entry","Command":"kubectl config set-cluster e2e --proxy-url=https://1.2.3.4","Content":"# kubectl config set-cluster\n\nSet a cluster entry in kubeconfig\n\n```bash\nkubectl config set-cluster NAME [--server=server] [--certificate-authority=path/to/certificate/authority] [--insecure-skip-tls-verify=true] [--tls-server-name=example.com]\n```\n\n## What does it do?\n\nSet a cluster entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values for those fields.\n\n## Examples\n\n# Set only the server field on the e2e cluster entry without touching other values\n\nkubectl config set-cluster e2e --server=https://1.2.3.4\n\n# Embed certificate authority data for the e2e cluster entry\n\nkubectl config set-cluster e2e --embed-certs --certificate-authority=~/.kube/e2e/kubernetes.ca.crt\n\n# Disable cert checking for the e2e cluster entry\n\nkubectl config set-cluster e2e --insecure-skip-tls-verify=true\n\n# Set custom TLS server name to use for validation for the e2e cluster entry\n\nkubectl config set-cluster e2e --tls-server-name=my-cluster-name\n\n# Set proxy url for the e2e cluster entry\n\nkubectl config set-cluster e2e --proxy-url=https://1.2.3.4\n\n## What are the flags?\n\n```bash\n      --embed-certs tristate[=true]   embed-certs for the cluster entry in kubeconfig\n  -h, --help                          help for set-cluster\n      --proxy-url string              proxy-url for the cluster entry in kubeconfig\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set the user field on the gce context entry without touching other values","Command":"kubectl config set-context gce --user=cluster-admin","Content":"# kubectl config set-context\n\nSet a context entry in kubeconfig\n\n```bash\nkubectl config set-context [NAME | --current] [--cluster=cluster_nickname] [--user=user_nickname] [--namespace=namespace]\n```\n\n## What does it do?\n\nSet a context entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values for those fields.\n\n## Examples\n\n# Set the user field on the gce context entry without touching other values\n\nkubectl config set-context gce --user=cluster-admin\n\n## What are the flags?\n\n```bash\n      --current   Modify the current context\n  -h, --help      help for set-context\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set only the \"client-key\" field on the \"cluster-admin\" entry, without touching other values","Command":"kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Set basic auth for the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Embed client certificate data in the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --auth-provider=gcp","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args","Command":"kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Enable new exec auth plugin for the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Define new exec auth plugin args for the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Create or update exec auth plugin environment variables for the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Remove exec auth plugin environment variables for the \"cluster-admin\" entry","Command":"kubectl config set-credentials cluster-admin --exec-env=var-to-remove-","Content":"# kubectl config set-credentials\n\nSet a user entry in kubeconfig\n\n```bash\nkubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name] [--auth-provider-arg=key=value] [--exec-command=exec_command] [--exec-api-version=exec_api_version] [--exec-arg=arg] [--exec-env=key=value]\n```\n\n## What does it do?\n\nSet a user entry in kubeconfig.\n\n Specifying a name that already exists will merge new fields on top of existing values.\n\n  Client-certificate flags:\n  --client-certificate=certfile --client-key=keyfile\n  \n  Bearer token flags:\n    --token=bearer_token\n  \n  Basic auth flags:\n    --username=basic_user --password=basic_password\n  \n Bearer token and basic auth are mutually exclusive.\n\n## Examples\n\n# Set only the \"client-key\" field on the \"cluster-admin\"\n# entry, without touching other values\n\nkubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key\n\n# Set basic auth for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif\n\n# Embed client certificate data in the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true\n\n# Enable the Google Compute Platform auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=gcp\n\n# Enable the OpenID Connect auth provider for the \"cluster-admin\" entry with additional args\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar\n\n# Remove the \"client-secret\" config value for the OpenID Connect auth provider for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-\n\n# Enable new exec auth plugin for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-command=/path/to/the/executable --exec-api-version=client.authentication.k8s.io/v1beta1\n\n# Define new exec auth plugin args for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-arg=arg1 --exec-arg=arg2\n\n# Create or update exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=key1=val1 --exec-env=key2=val2\n\n# Remove exec auth plugin environment variables for the \"cluster-admin\" entry\n\nkubectl config set-credentials cluster-admin --exec-env=var-to-remove-\n\n## What are the flags?\n\n```bash\n      --auth-provider string          Auth provider for the user entry in kubeconfig\n      --auth-provider-arg strings     'key=value' arguments for the auth provider\n      --embed-certs tristate[=true]   Embed client cert/key for the user entry in kubeconfig\n      --exec-api-version string       API version of the exec credential plugin for the user entry in kubeconfig\n      --exec-arg strings              New arguments for the exec credential plugin command for the user entry in kubeconfig\n      --exec-command string           Command for the exec credential plugin for the user entry in kubeconfig\n      --exec-env stringArray          'key=value' environment values for the exec credential plugin\n  -h, --help                          help for set-credentials\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Unset the current-context","Command":"kubectl config unset current-context","Content":"# kubectl config unset\n\nUnset an individual value in a kubeconfig file\n\n```bash\nkubectl config unset PROPERTY_NAME\n```\n\n## What does it do?\n\nUnset an individual value in a kubeconfig file.\n\n PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.\n\n## Examples\n\n# Unset the current-context\n\nkubectl config unset current-context\n\n# Unset namespace in foo context\n\nkubectl config unset contexts.foo.namespace\n\n## What are the flags?\n\n```bash\n  -h, --help   help for unset\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Unset namespace in foo context","Command":"kubectl config unset contexts.foo.namespace","Content":"# kubectl config unset\n\nUnset an individual value in a kubeconfig file\n\n```bash\nkubectl config unset PROPERTY_NAME\n```\n\n## What does it do?\n\nUnset an individual value in a kubeconfig file.\n\n PROPERTY_NAME is a dot delimited name where each token represents either an attribute name or a map key.  Map keys may not contain dots.\n\n## Examples\n\n# Unset the current-context\n\nkubectl config unset current-context\n\n# Unset namespace in foo context\n\nkubectl config unset contexts.foo.namespace\n\n## What are the flags?\n\n```bash\n  -h, --help   help for unset\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Use the context for the minikube cluster","Command":"kubectl config use-context minikube","Content":"# kubectl config use-context\n\nSet the current-context in a kubeconfig file\n\n```bash\nkubectl config use-context CONTEXT_NAME\n```\n\n## What does it do?\n\nSet the current-context in a kubeconfig file.\n\n## Examples\n\n# Use the context for the minikube cluster\n\nkubectl config use-context minikube\n\n## What are the flags?\n\n```bash\n  -h, --help   help for use-context\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Show merged kubeconfig settings","Command":"kubectl config view","Content":"# kubectl config view\n\nDisplay merged kubeconfig settings or a specified kubeconfig file\n\n```bash\nkubectl config view [flags]\n```\n\n## What does it do?\n\nDisplay merged kubeconfig settings or a specified kubeconfig file.\n\n You can use --output jsonpath={...} to extract specific values using a jsonpath expression.\n\n## Examples\n\n# Show merged kubeconfig settings\n\nkubectl config view\n\n# Show merged kubeconfig settings and raw certificate data\n\nkubectl config view --raw\n\n# Get the password for the e2e user\n\nkubectl config view -o jsonpath='{.users[?(@.name == \"e2e\")].user.password}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --flatten                       Flatten the resulting kubeconfig file into self-contained output (useful for creating portable kubeconfig files)\n  -h, --help                          help for view\n      --merge tristate[=true]         Merge the full hierarchy of kubeconfig files (default true)\n      --minify                        Remove all information not used by current-context from the output\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file). (default \"yaml\")\n      --raw                           Display raw byte data\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Show merged kubeconfig settings and raw certificate data","Command":"kubectl config view --raw","Content":"# kubectl config view\n\nDisplay merged kubeconfig settings or a specified kubeconfig file\n\n```bash\nkubectl config view [flags]\n```\n\n## What does it do?\n\nDisplay merged kubeconfig settings or a specified kubeconfig file.\n\n You can use --output jsonpath={...} to extract specific values using a jsonpath expression.\n\n## Examples\n\n# Show merged kubeconfig settings\n\nkubectl config view\n\n# Show merged kubeconfig settings and raw certificate data\n\nkubectl config view --raw\n\n# Get the password for the e2e user\n\nkubectl config view -o jsonpath='{.users[?(@.name == \"e2e\")].user.password}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --flatten                       Flatten the resulting kubeconfig file into self-contained output (useful for creating portable kubeconfig files)\n  -h, --help                          help for view\n      --merge tristate[=true]         Merge the full hierarchy of kubeconfig files (default true)\n      --minify                        Remove all information not used by current-context from the output\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file). (default \"yaml\")\n      --raw                           Display raw byte data\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Get the password for the e2e user","Command":"kubectl config view -o jsonpath='{.users[?(@.name == \"e2e\")].user.password}'","Content":"# kubectl config view\n\nDisplay merged kubeconfig settings or a specified kubeconfig file\n\n```bash\nkubectl config view [flags]\n```\n\n## What does it do?\n\nDisplay merged kubeconfig settings or a specified kubeconfig file.\n\n You can use --output jsonpath={...} to extract specific values using a jsonpath expression.\n\n## Examples\n\n# Show merged kubeconfig settings\n\nkubectl config view\n\n# Show merged kubeconfig settings and raw certificate data\n\nkubectl config view --raw\n\n# Get the password for the e2e user\n\nkubectl config view -o jsonpath='{.users[?(@.name == \"e2e\")].user.password}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --flatten                       Flatten the resulting kubeconfig file into self-contained output (useful for creating portable kubeconfig files)\n  -h, --help                          help for view\n      --merge tristate[=true]         Merge the full hierarchy of kubeconfig files (default true)\n      --minify                        Remove all information not used by current-context from the output\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file). (default \"yaml\")\n      --raw                           Display raw byte data\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl config - Modify kubeconfig files\n"},{"Description":" Mark node \"foo\" as unschedulable","Command":"kubectl cordon foo","Content":"# kubectl cordon\n\nMark node as unschedulable\n\n```bash\nkubectl cordon NODE\n```\n\n## What does it do?\n\nMark node as unschedulable.\n\n## Examples\n\n# Mark node \"foo\" as unschedulable\n\nkubectl cordon foo\n\n## What are the flags?\n\n```bash\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -h, --help                           help for cordon\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" !!!Important Note!!! Requires that the 'tar' binary is present in your container image.  If 'tar' is not present, 'kubectl cp' will fail.  For advanced use cases, such as symlinks, wildcard expansion or file mode preservation, consider using 'kubectl exec'.","Command":"","Content":"# kubectl cp\n\nCopy files and directories to and from containers\n\n```bash\nkubectl cp \u003cfile-spec-src\u003e \u003cfile-spec-dest\u003e\n```\n\n## What does it do?\n\nCopy files and directories to and from containers.\n\n## Examples\n\n# !!!Important Note!!!\n# Requires that the 'tar' binary is present in your container\n# image.  If 'tar' is not present, 'kubectl cp' will fail.\n#\n# For advanced use cases, such as symlinks, wildcard expansion or\n# file mode preservation, consider using 'kubectl exec'.\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\ntar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar\n\n# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace\n\nkubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container\n\nkubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\nkubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar\n\n## What are the flags?\n\n```bash\n  -c, --container string   Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help               help for cp\n      --no-preserve        The copied file/directory's ownership and permissions will not be preserved in the container\n      --retries int        Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e","Command":"tar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar","Content":"# kubectl cp\n\nCopy files and directories to and from containers\n\n```bash\nkubectl cp \u003cfile-spec-src\u003e \u003cfile-spec-dest\u003e\n```\n\n## What does it do?\n\nCopy files and directories to and from containers.\n\n## Examples\n\n# !!!Important Note!!!\n# Requires that the 'tar' binary is present in your container\n# image.  If 'tar' is not present, 'kubectl cp' will fail.\n#\n# For advanced use cases, such as symlinks, wildcard expansion or\n# file mode preservation, consider using 'kubectl exec'.\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\ntar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar\n\n# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace\n\nkubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container\n\nkubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\nkubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar\n\n## What are the flags?\n\n```bash\n  -c, --container string   Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help               help for cp\n      --no-preserve        The copied file/directory's ownership and permissions will not be preserved in the container\n      --retries int        Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Copy /tmp/foo from a remote pod to /tmp/bar locally","Command":"kubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar","Content":"# kubectl cp\n\nCopy files and directories to and from containers\n\n```bash\nkubectl cp \u003cfile-spec-src\u003e \u003cfile-spec-dest\u003e\n```\n\n## What does it do?\n\nCopy files and directories to and from containers.\n\n## Examples\n\n# !!!Important Note!!!\n# Requires that the 'tar' binary is present in your container\n# image.  If 'tar' is not present, 'kubectl cp' will fail.\n#\n# For advanced use cases, such as symlinks, wildcard expansion or\n# file mode preservation, consider using 'kubectl exec'.\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\ntar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar\n\n# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace\n\nkubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container\n\nkubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\nkubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar\n\n## What are the flags?\n\n```bash\n  -c, --container string   Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help               help for cp\n      --no-preserve        The copied file/directory's ownership and permissions will not be preserved in the container\n      --retries int        Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace","Command":"kubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir","Content":"# kubectl cp\n\nCopy files and directories to and from containers\n\n```bash\nkubectl cp \u003cfile-spec-src\u003e \u003cfile-spec-dest\u003e\n```\n\n## What does it do?\n\nCopy files and directories to and from containers.\n\n## Examples\n\n# !!!Important Note!!!\n# Requires that the 'tar' binary is present in your container\n# image.  If 'tar' is not present, 'kubectl cp' will fail.\n#\n# For advanced use cases, such as symlinks, wildcard expansion or\n# file mode preservation, consider using 'kubectl exec'.\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\ntar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar\n\n# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace\n\nkubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container\n\nkubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\nkubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar\n\n## What are the flags?\n\n```bash\n  -c, --container string   Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help               help for cp\n      --no-preserve        The copied file/directory's ownership and permissions will not be preserved in the container\n      --retries int        Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container","Command":"kubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e","Content":"# kubectl cp\n\nCopy files and directories to and from containers\n\n```bash\nkubectl cp \u003cfile-spec-src\u003e \u003cfile-spec-dest\u003e\n```\n\n## What does it do?\n\nCopy files and directories to and from containers.\n\n## Examples\n\n# !!!Important Note!!!\n# Requires that the 'tar' binary is present in your container\n# image.  If 'tar' is not present, 'kubectl cp' will fail.\n#\n# For advanced use cases, such as symlinks, wildcard expansion or\n# file mode preservation, consider using 'kubectl exec'.\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\ntar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar\n\n# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace\n\nkubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container\n\nkubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\nkubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar\n\n## What are the flags?\n\n```bash\n  -c, --container string   Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help               help for cp\n      --no-preserve        The copied file/directory's ownership and permissions will not be preserved in the container\n      --retries int        Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e","Command":"kubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar","Content":"# kubectl cp\n\nCopy files and directories to and from containers\n\n```bash\nkubectl cp \u003cfile-spec-src\u003e \u003cfile-spec-dest\u003e\n```\n\n## What does it do?\n\nCopy files and directories to and from containers.\n\n## Examples\n\n# !!!Important Note!!!\n# Requires that the 'tar' binary is present in your container\n# image.  If 'tar' is not present, 'kubectl cp' will fail.\n#\n# For advanced use cases, such as symlinks, wildcard expansion or\n# file mode preservation, consider using 'kubectl exec'.\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\ntar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar\n\n# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace\n\nkubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container\n\nkubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\nkubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar\n\n## What are the flags?\n\n```bash\n  -c, --container string   Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help               help for cp\n      --no-preserve        The copied file/directory's ownership and permissions will not be preserved in the container\n      --retries int        Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Copy /tmp/foo from a remote pod to /tmp/bar locally","Command":"kubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar","Content":"# kubectl cp\n\nCopy files and directories to and from containers\n\n```bash\nkubectl cp \u003cfile-spec-src\u003e \u003cfile-spec-dest\u003e\n```\n\n## What does it do?\n\nCopy files and directories to and from containers.\n\n## Examples\n\n# !!!Important Note!!!\n# Requires that the 'tar' binary is present in your container\n# image.  If 'tar' is not present, 'kubectl cp' will fail.\n#\n# For advanced use cases, such as symlinks, wildcard expansion or\n# file mode preservation, consider using 'kubectl exec'.\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\ntar cf - /tmp/foo | kubectl exec -i -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar xf - -C /tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl exec -n \u003csome-namespace\u003e \u003csome-pod\u003e -- tar cf - /tmp/foo | tar xf - -C /tmp/bar\n\n# Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace\n\nkubectl cp /tmp/foo_dir \u003csome-pod\u003e:/tmp/bar_dir\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container\n\nkubectl cp /tmp/foo \u003csome-pod\u003e:/tmp/bar -c \u003cspecific-container\u003e\n\n# Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace \u003csome-namespace\u003e\n\nkubectl cp /tmp/foo \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/bar\n\n# Copy /tmp/foo from a remote pod to /tmp/bar locally\n\nkubectl cp \u003csome-namespace\u003e/\u003csome-pod\u003e:/tmp/foo /tmp/bar\n\n## What are the flags?\n\n```bash\n  -c, --container string   Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -h, --help               help for cp\n      --no-preserve        The copied file/directory's ownership and permissions will not be preserved in the container\n      --retries int        Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a cluster role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods","Command":"kubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods","Content":"# kubectl create clusterrole\n\nCreate a cluster role\n\n```bash\nkubectl create clusterrole NAME --verb=verb --resource=resource.group [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a cluster role.\n\n## Examples\n\n# Create a cluster role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods\n\n# Create a cluster role named \"pod-reader\" with ResourceName specified\n\nkubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a cluster role named \"foo\" with API Group specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps\n\n# Create a cluster role named \"foo\" with SubResource specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status\n\n# Create a cluster role name \"foo\" with NonResourceURL specified\n\nkubectl create clusterrole \"foo\" --verb=get --non-resource-url=/logs/*\n\n# Create a cluster role name \"monitoring\" with AggregationRule specified\n\nkubectl create clusterrole monitoring --aggregation-rule=\"rbac.example.com/aggregate-to-monitoring=true\"\n\n## What are the flags?\n\n```bash\n      --aggregation-rule mapStringString   An aggregation label selector for combining ClusterRoles.\n      --allow-missing-template-keys        If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string               Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                               help for clusterrole\n      --non-resource-url strings           A partial url that user should have access to.\n  -o, --output string                      Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings                   Resource that the rule applies to\n      --resource-name stringArray          Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                        If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields                If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                    Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]         Must be one of: strict (or true), warn, ignore (or false).\n                                           \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                           \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                           \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                       Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cluster role named \"pod-reader\" with ResourceName specified","Command":"kubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod","Content":"# kubectl create clusterrole\n\nCreate a cluster role\n\n```bash\nkubectl create clusterrole NAME --verb=verb --resource=resource.group [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a cluster role.\n\n## Examples\n\n# Create a cluster role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods\n\n# Create a cluster role named \"pod-reader\" with ResourceName specified\n\nkubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a cluster role named \"foo\" with API Group specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps\n\n# Create a cluster role named \"foo\" with SubResource specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status\n\n# Create a cluster role name \"foo\" with NonResourceURL specified\n\nkubectl create clusterrole \"foo\" --verb=get --non-resource-url=/logs/*\n\n# Create a cluster role name \"monitoring\" with AggregationRule specified\n\nkubectl create clusterrole monitoring --aggregation-rule=\"rbac.example.com/aggregate-to-monitoring=true\"\n\n## What are the flags?\n\n```bash\n      --aggregation-rule mapStringString   An aggregation label selector for combining ClusterRoles.\n      --allow-missing-template-keys        If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string               Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                               help for clusterrole\n      --non-resource-url strings           A partial url that user should have access to.\n  -o, --output string                      Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings                   Resource that the rule applies to\n      --resource-name stringArray          Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                        If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields                If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                    Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]         Must be one of: strict (or true), warn, ignore (or false).\n                                           \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                           \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                           \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                       Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cluster role named \"foo\" with API Group specified","Command":"kubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps","Content":"# kubectl create clusterrole\n\nCreate a cluster role\n\n```bash\nkubectl create clusterrole NAME --verb=verb --resource=resource.group [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a cluster role.\n\n## Examples\n\n# Create a cluster role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods\n\n# Create a cluster role named \"pod-reader\" with ResourceName specified\n\nkubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a cluster role named \"foo\" with API Group specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps\n\n# Create a cluster role named \"foo\" with SubResource specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status\n\n# Create a cluster role name \"foo\" with NonResourceURL specified\n\nkubectl create clusterrole \"foo\" --verb=get --non-resource-url=/logs/*\n\n# Create a cluster role name \"monitoring\" with AggregationRule specified\n\nkubectl create clusterrole monitoring --aggregation-rule=\"rbac.example.com/aggregate-to-monitoring=true\"\n\n## What are the flags?\n\n```bash\n      --aggregation-rule mapStringString   An aggregation label selector for combining ClusterRoles.\n      --allow-missing-template-keys        If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string               Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                               help for clusterrole\n      --non-resource-url strings           A partial url that user should have access to.\n  -o, --output string                      Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings                   Resource that the rule applies to\n      --resource-name stringArray          Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                        If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields                If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                    Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]         Must be one of: strict (or true), warn, ignore (or false).\n                                           \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                           \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                           \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                       Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cluster role named \"foo\" with SubResource specified","Command":"kubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status","Content":"# kubectl create clusterrole\n\nCreate a cluster role\n\n```bash\nkubectl create clusterrole NAME --verb=verb --resource=resource.group [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a cluster role.\n\n## Examples\n\n# Create a cluster role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods\n\n# Create a cluster role named \"pod-reader\" with ResourceName specified\n\nkubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a cluster role named \"foo\" with API Group specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps\n\n# Create a cluster role named \"foo\" with SubResource specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status\n\n# Create a cluster role name \"foo\" with NonResourceURL specified\n\nkubectl create clusterrole \"foo\" --verb=get --non-resource-url=/logs/*\n\n# Create a cluster role name \"monitoring\" with AggregationRule specified\n\nkubectl create clusterrole monitoring --aggregation-rule=\"rbac.example.com/aggregate-to-monitoring=true\"\n\n## What are the flags?\n\n```bash\n      --aggregation-rule mapStringString   An aggregation label selector for combining ClusterRoles.\n      --allow-missing-template-keys        If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string               Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                               help for clusterrole\n      --non-resource-url strings           A partial url that user should have access to.\n  -o, --output string                      Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings                   Resource that the rule applies to\n      --resource-name stringArray          Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                        If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields                If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                    Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]         Must be one of: strict (or true), warn, ignore (or false).\n                                           \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                           \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                           \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                       Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cluster role name \"foo\" with NonResourceURL specified","Command":"kubectl create clusterrole \"foo\" --verb=get --non-resource-url=/logs/*","Content":"# kubectl create clusterrole\n\nCreate a cluster role\n\n```bash\nkubectl create clusterrole NAME --verb=verb --resource=resource.group [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a cluster role.\n\n## Examples\n\n# Create a cluster role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods\n\n# Create a cluster role named \"pod-reader\" with ResourceName specified\n\nkubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a cluster role named \"foo\" with API Group specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps\n\n# Create a cluster role named \"foo\" with SubResource specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status\n\n# Create a cluster role name \"foo\" with NonResourceURL specified\n\nkubectl create clusterrole \"foo\" --verb=get --non-resource-url=/logs/*\n\n# Create a cluster role name \"monitoring\" with AggregationRule specified\n\nkubectl create clusterrole monitoring --aggregation-rule=\"rbac.example.com/aggregate-to-monitoring=true\"\n\n## What are the flags?\n\n```bash\n      --aggregation-rule mapStringString   An aggregation label selector for combining ClusterRoles.\n      --allow-missing-template-keys        If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string               Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                               help for clusterrole\n      --non-resource-url strings           A partial url that user should have access to.\n  -o, --output string                      Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings                   Resource that the rule applies to\n      --resource-name stringArray          Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                        If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields                If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                    Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]         Must be one of: strict (or true), warn, ignore (or false).\n                                           \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                           \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                           \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                       Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cluster role name \"monitoring\" with AggregationRule specified","Command":"kubectl create clusterrole monitoring --aggregation-rule=\"rbac.example.com/aggregate-to-monitoring=true\"","Content":"# kubectl create clusterrole\n\nCreate a cluster role\n\n```bash\nkubectl create clusterrole NAME --verb=verb --resource=resource.group [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a cluster role.\n\n## Examples\n\n# Create a cluster role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create clusterrole pod-reader --verb=get,list,watch --resource=pods\n\n# Create a cluster role named \"pod-reader\" with ResourceName specified\n\nkubectl create clusterrole pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a cluster role named \"foo\" with API Group specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=rs.apps\n\n# Create a cluster role named \"foo\" with SubResource specified\n\nkubectl create clusterrole foo --verb=get,list,watch --resource=pods,pods/status\n\n# Create a cluster role name \"foo\" with NonResourceURL specified\n\nkubectl create clusterrole \"foo\" --verb=get --non-resource-url=/logs/*\n\n# Create a cluster role name \"monitoring\" with AggregationRule specified\n\nkubectl create clusterrole monitoring --aggregation-rule=\"rbac.example.com/aggregate-to-monitoring=true\"\n\n## What are the flags?\n\n```bash\n      --aggregation-rule mapStringString   An aggregation label selector for combining ClusterRoles.\n      --allow-missing-template-keys        If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string               Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                               help for clusterrole\n      --non-resource-url strings           A partial url that user should have access to.\n  -o, --output string                      Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings                   Resource that the rule applies to\n      --resource-name stringArray          Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                        If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields                If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                    Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]         Must be one of: strict (or true), warn, ignore (or false).\n                                           \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                           \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                           \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                       Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cluster role binding for user1, user2, and group1 using the cluster-admin cluster role","Command":"kubectl create clusterrolebinding cluster-admin --clusterrole=cluster-admin --user=user1 --user=user2 --group=group1","Content":"# kubectl create clusterrolebinding\n\nCreate a cluster role binding for a particular cluster role\n\n```bash\nkubectl create clusterrolebinding NAME --clusterrole=NAME [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a cluster role binding for a particular cluster role.\n\n## Examples\n\n# Create a cluster role binding for user1, user2, and group1 using the cluster-admin cluster role\n\nkubectl create clusterrolebinding cluster-admin --clusterrole=cluster-admin --user=user1 --user=user2 --group=group1\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --clusterrole string             ClusterRole this ClusterRoleBinding should reference\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --group stringArray              Groups to bind to the clusterrole. The flag can be repeated to add multiple groups.\n  -h, --help                           help for clusterrolebinding\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --serviceaccount stringArray     Service accounts to bind to the clusterrole, in the format \u003cnamespace\u003e:\u003cname\u003e. The flag can be repeated to add multiple service accounts.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new config map named my-config based on folder bar","Command":"kubectl create configmap my-config --from-file=path/to/bar","Content":"# kubectl create configmap\n\nCreate a config map from a local file, directory or literal value\n\n```bash\nkubectl create configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a config map based on a file, directory, or specified literal value.\n\n A single config map may package one or more key/value pairs.\n\n When creating a config map based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.\n\n When creating a config map based on a directory, each file whose basename is a valid key in the directory will be packaged into the config map.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new config map named my-config based on folder bar\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config with specified keys instead of file basenames on disk\n\nkubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt\n\n# Create a new config map named my-config with key1=config1 and key2=config2\n\nkubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2\n\n# Create a new config map named my-config from the key=value pairs in the file\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config from an env file\n\nkubectl create configmap my-config --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the configmap to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a configmap.\n      --from-file strings              Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.\n      --from-literal stringArray       Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)\n  -h, --help                           help for configmap\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new config map named my-config with specified keys instead of file basenames on disk","Command":"kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt","Content":"# kubectl create configmap\n\nCreate a config map from a local file, directory or literal value\n\n```bash\nkubectl create configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a config map based on a file, directory, or specified literal value.\n\n A single config map may package one or more key/value pairs.\n\n When creating a config map based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.\n\n When creating a config map based on a directory, each file whose basename is a valid key in the directory will be packaged into the config map.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new config map named my-config based on folder bar\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config with specified keys instead of file basenames on disk\n\nkubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt\n\n# Create a new config map named my-config with key1=config1 and key2=config2\n\nkubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2\n\n# Create a new config map named my-config from the key=value pairs in the file\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config from an env file\n\nkubectl create configmap my-config --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the configmap to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a configmap.\n      --from-file strings              Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.\n      --from-literal stringArray       Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)\n  -h, --help                           help for configmap\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new config map named my-config with key1=config1 and key2=config2","Command":"kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2","Content":"# kubectl create configmap\n\nCreate a config map from a local file, directory or literal value\n\n```bash\nkubectl create configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a config map based on a file, directory, or specified literal value.\n\n A single config map may package one or more key/value pairs.\n\n When creating a config map based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.\n\n When creating a config map based on a directory, each file whose basename is a valid key in the directory will be packaged into the config map.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new config map named my-config based on folder bar\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config with specified keys instead of file basenames on disk\n\nkubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt\n\n# Create a new config map named my-config with key1=config1 and key2=config2\n\nkubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2\n\n# Create a new config map named my-config from the key=value pairs in the file\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config from an env file\n\nkubectl create configmap my-config --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the configmap to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a configmap.\n      --from-file strings              Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.\n      --from-literal stringArray       Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)\n  -h, --help                           help for configmap\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new config map named my-config from the key=value pairs in the file","Command":"kubectl create configmap my-config --from-file=path/to/bar","Content":"# kubectl create configmap\n\nCreate a config map from a local file, directory or literal value\n\n```bash\nkubectl create configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a config map based on a file, directory, or specified literal value.\n\n A single config map may package one or more key/value pairs.\n\n When creating a config map based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.\n\n When creating a config map based on a directory, each file whose basename is a valid key in the directory will be packaged into the config map.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new config map named my-config based on folder bar\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config with specified keys instead of file basenames on disk\n\nkubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt\n\n# Create a new config map named my-config with key1=config1 and key2=config2\n\nkubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2\n\n# Create a new config map named my-config from the key=value pairs in the file\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config from an env file\n\nkubectl create configmap my-config --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the configmap to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a configmap.\n      --from-file strings              Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.\n      --from-literal stringArray       Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)\n  -h, --help                           help for configmap\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new config map named my-config from an env file","Command":"kubectl create configmap my-config --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env","Content":"# kubectl create configmap\n\nCreate a config map from a local file, directory or literal value\n\n```bash\nkubectl create configmap NAME [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a config map based on a file, directory, or specified literal value.\n\n A single config map may package one or more key/value pairs.\n\n When creating a config map based on a file, the key will default to the basename of the file, and the value will default to the file content.  If the basename is an invalid key, you may specify an alternate key.\n\n When creating a config map based on a directory, each file whose basename is a valid key in the directory will be packaged into the config map.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new config map named my-config based on folder bar\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config with specified keys instead of file basenames on disk\n\nkubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt\n\n# Create a new config map named my-config with key1=config1 and key2=config2\n\nkubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2\n\n# Create a new config map named my-config from the key=value pairs in the file\n\nkubectl create configmap my-config --from-file=path/to/bar\n\n# Create a new config map named my-config from an env file\n\nkubectl create configmap my-config --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the configmap to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a configmap.\n      --from-file strings              Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.\n      --from-literal stringArray       Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)\n  -h, --help                           help for configmap\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cron job","Command":"kubectl create cronjob my-job --image=busybox --schedule=\"*/1 * * * *\"","Content":"# kubectl create cronjob\n\nCreate a cron job with the specified name\n\n```bash\nkubectl create cronjob NAME --image=image --schedule='0/5 * * * ?' -- [COMMAND] [args...] [flags]\n```\n\n## What does it do?\n\nCreate a cron job with the specified name.\n\n## Examples\n\n# Create a cron job\n\nkubectl create cronjob my-job --image=busybox --schedule=\"*/1 * * * *\"\n\n# Create a cron job with a command\n\nkubectl create cronjob my-job --image=busybox --schedule=\"*/1 * * * *\" -- date\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for cronjob\n      --image string                   Image name to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --restart string                 job's restart policy. supported values: OnFailure, Never\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --schedule string                A schedule in the Cron format the job should be run with.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a cron job with a command","Command":"kubectl create cronjob my-job --image=busybox --schedule=\"*/1 * * * *\" -- date","Content":"# kubectl create cronjob\n\nCreate a cron job with the specified name\n\n```bash\nkubectl create cronjob NAME --image=image --schedule='0/5 * * * ?' -- [COMMAND] [args...] [flags]\n```\n\n## What does it do?\n\nCreate a cron job with the specified name.\n\n## Examples\n\n# Create a cron job\n\nkubectl create cronjob my-job --image=busybox --schedule=\"*/1 * * * *\"\n\n# Create a cron job with a command\n\nkubectl create cronjob my-job --image=busybox --schedule=\"*/1 * * * *\" -- date\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for cronjob\n      --image string                   Image name to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --restart string                 job's restart policy. supported values: OnFailure, Never\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --schedule string                A schedule in the Cron format the job should be run with.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a deployment named my-dep that runs the busybox image","Command":"kubectl create deployment my-dep --image=busybox","Content":"# kubectl create deployment\n\nCreate a deployment with the specified name\n\n```bash\nkubectl create deployment NAME --image=image -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate a deployment with the specified name.\n\n## Examples\n\n# Create a deployment named my-dep that runs the busybox image\n\nkubectl create deployment my-dep --image=busybox\n\n# Create a deployment with a command\n\nkubectl create deployment my-dep --image=busybox -- date\n\n# Create a deployment named my-dep that runs the nginx image with 3 replicas\n\nkubectl create deployment my-dep --image=nginx --replicas=3\n\n# Create a deployment named my-dep that runs the busybox image and expose port 5701\n\nkubectl create deployment my-dep --image=busybox --port=5701\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for deployment\n      --image strings                  Image names to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --port int32                     The port that this container exposes. (default -1)\n  -r, --replicas int32                 Number of replicas to create. Default is 1. (default 1)\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a deployment with a command","Command":"kubectl create deployment my-dep --image=busybox -- date","Content":"# kubectl create deployment\n\nCreate a deployment with the specified name\n\n```bash\nkubectl create deployment NAME --image=image -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate a deployment with the specified name.\n\n## Examples\n\n# Create a deployment named my-dep that runs the busybox image\n\nkubectl create deployment my-dep --image=busybox\n\n# Create a deployment with a command\n\nkubectl create deployment my-dep --image=busybox -- date\n\n# Create a deployment named my-dep that runs the nginx image with 3 replicas\n\nkubectl create deployment my-dep --image=nginx --replicas=3\n\n# Create a deployment named my-dep that runs the busybox image and expose port 5701\n\nkubectl create deployment my-dep --image=busybox --port=5701\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for deployment\n      --image strings                  Image names to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --port int32                     The port that this container exposes. (default -1)\n  -r, --replicas int32                 Number of replicas to create. Default is 1. (default 1)\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a deployment named my-dep that runs the nginx image with 3 replicas","Command":"kubectl create deployment my-dep --image=nginx --replicas=3","Content":"# kubectl create deployment\n\nCreate a deployment with the specified name\n\n```bash\nkubectl create deployment NAME --image=image -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate a deployment with the specified name.\n\n## Examples\n\n# Create a deployment named my-dep that runs the busybox image\n\nkubectl create deployment my-dep --image=busybox\n\n# Create a deployment with a command\n\nkubectl create deployment my-dep --image=busybox -- date\n\n# Create a deployment named my-dep that runs the nginx image with 3 replicas\n\nkubectl create deployment my-dep --image=nginx --replicas=3\n\n# Create a deployment named my-dep that runs the busybox image and expose port 5701\n\nkubectl create deployment my-dep --image=busybox --port=5701\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for deployment\n      --image strings                  Image names to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --port int32                     The port that this container exposes. (default -1)\n  -r, --replicas int32                 Number of replicas to create. Default is 1. (default 1)\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a deployment named my-dep that runs the busybox image and expose port 5701","Command":"kubectl create deployment my-dep --image=busybox --port=5701","Content":"# kubectl create deployment\n\nCreate a deployment with the specified name\n\n```bash\nkubectl create deployment NAME --image=image -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate a deployment with the specified name.\n\n## Examples\n\n# Create a deployment named my-dep that runs the busybox image\n\nkubectl create deployment my-dep --image=busybox\n\n# Create a deployment with a command\n\nkubectl create deployment my-dep --image=busybox -- date\n\n# Create a deployment named my-dep that runs the nginx image with 3 replicas\n\nkubectl create deployment my-dep --image=nginx --replicas=3\n\n# Create a deployment named my-dep that runs the busybox image and expose port 5701\n\nkubectl create deployment my-dep --image=busybox --port=5701\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for deployment\n      --image strings                  Image names to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --port int32                     The port that this container exposes. (default -1)\n  -r, --replicas int32                 Number of replicas to create. Default is 1. (default 1)\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a single ingress called 'simple' that directs requests to foo.com/bar to svc svc1:8080 with a tls secret \"my-cert\"","Command":"kubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"","Command":"kubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2","Command":"kubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--annotation ingress.annotation1=foo \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--annotation ingress.annotation2=bla","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create an ingress with the same host and multiple paths","Command":"kubectl create ingress multipath --class=default \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"foo.com/=svc:port\" \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"foo.com/admin/=svcadmin:portadmin\"","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create an ingress with multiple hosts and the pathType as Prefix","Command":"kubectl create ingress ingress1 --class=default \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"foo.com/path*=svc:8080\" \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"bar.com/admin*=svc2:http\"","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create an ingress with TLS enabled using the default ingress certificate and different path types","Command":"kubectl create ingress ingtls --class=default \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"foo.com/=svc:https,tls\" \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"foo.com/path/subpath*=othersvc:8080\"","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create an ingress with TLS enabled using a specific secret and pathType as Prefix","Command":"kubectl create ingress ingsecret --class=default \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"foo.com/*=svc:8080,tls=secret1\"","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create an ingress with a default backend","Command":"kubectl create ingress ingdefault --class=default \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--default-backend=defaultsvc:http \\","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":"","Command":"--rule=\"foo.com/*=svc:8080,tls=secret1\"","Content":"# kubectl create ingress\n\nCreate an ingress with the specified name\n\n```bash\nkubectl create ingress NAME --rule=host/path=service:port[,tls[=secret]] \n```\n\n## What does it do?\n\nCreate an ingress with the specified name.\n\n## Examples\n\n# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc\n# svc1:8080 with a tls secret \"my-cert\"\n\nkubectl create ingress simple --rule=\"foo.com/bar=svc1:8080,tls=my-cert\"\n\n# Create a catch all ingress of \"/path\" pointing to service svc:port and Ingress Class as \"otheringress\"\n\nkubectl create ingress catch-all --class=otheringress --rule=\"/path=svc:port\"\n\n# Create an ingress with two annotations: ingress.annotation1 and ingress.annotations2\n\nkubectl create ingress annotated --class=default --rule=\"foo.com/bar=svc:port\" \\\n\n\n--annotation ingress.annotation1=foo \\\n\n\n--annotation ingress.annotation2=bla\n\n# Create an ingress with the same host and multiple paths\n\nkubectl create ingress multipath --class=default \\\n\n\n--rule=\"foo.com/=svc:port\" \\\n\n\n--rule=\"foo.com/admin/=svcadmin:portadmin\"\n\n# Create an ingress with multiple hosts and the pathType as Prefix\n\nkubectl create ingress ingress1 --class=default \\\n\n\n--rule=\"foo.com/path*=svc:8080\" \\\n\n\n--rule=\"bar.com/admin*=svc2:http\"\n\n# Create an ingress with TLS enabled using the default ingress certificate and different path types\n\nkubectl create ingress ingtls --class=default \\\n\n\n--rule=\"foo.com/=svc:https,tls\" \\\n\n\n--rule=\"foo.com/path/subpath*=othersvc:8080\"\n\n# Create an ingress with TLS enabled using a specific secret and pathType as Prefix\n\nkubectl create ingress ingsecret --class=default \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n# Create an ingress with a default backend\n\nkubectl create ingress ingdefault --class=default \\\n\n\n--default-backend=defaultsvc:http \\\n\n\n--rule=\"foo.com/*=svc:8080,tls=secret1\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotation stringArray         Annotation to insert in the ingress object, in the format annotation=value\n      --class string                   Ingress Class to be used\n      --default-backend string         Default service for backend, in format of svcname:port\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for ingress\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --rule stringArray               Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a job","Command":"kubectl create job my-job --image=busybox","Content":"# kubectl create job\n\nCreate a job with the specified name\n\n```bash\nkubectl create job NAME --image=image [--from=cronjob/name] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate a job with the specified name.\n\n## Examples\n\n# Create a job\n\nkubectl create job my-job --image=busybox\n\n# Create a job with a command\n\nkubectl create job my-job --image=busybox -- date\n\n# Create a job from a cron job named \"a-cronjob\"\n\nkubectl create job test-job --from=cronjob/a-cronjob\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from string                    The name of the resource to create a Job from (only cronjob is supported).\n  -h, --help                           help for job\n      --image string                   Image name to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a job with a command","Command":"kubectl create job my-job --image=busybox -- date","Content":"# kubectl create job\n\nCreate a job with the specified name\n\n```bash\nkubectl create job NAME --image=image [--from=cronjob/name] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate a job with the specified name.\n\n## Examples\n\n# Create a job\n\nkubectl create job my-job --image=busybox\n\n# Create a job with a command\n\nkubectl create job my-job --image=busybox -- date\n\n# Create a job from a cron job named \"a-cronjob\"\n\nkubectl create job test-job --from=cronjob/a-cronjob\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from string                    The name of the resource to create a Job from (only cronjob is supported).\n  -h, --help                           help for job\n      --image string                   Image name to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a job from a cron job named \"a-cronjob\"","Command":"kubectl create job test-job --from=cronjob/a-cronjob","Content":"# kubectl create job\n\nCreate a job with the specified name\n\n```bash\nkubectl create job NAME --image=image [--from=cronjob/name] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate a job with the specified name.\n\n## Examples\n\n# Create a job\n\nkubectl create job my-job --image=busybox\n\n# Create a job with a command\n\nkubectl create job my-job --image=busybox -- date\n\n# Create a job from a cron job named \"a-cronjob\"\n\nkubectl create job test-job --from=cronjob/a-cronjob\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from string                    The name of the resource to create a Job from (only cronjob is supported).\n  -h, --help                           help for job\n      --image string                   Image name to run.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new namespace named my-namespace","Command":"kubectl create namespace my-namespace","Content":"# kubectl create namespace\n\nCreate a namespace with the specified name\n\n```bash\nkubectl create namespace NAME [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a namespace with the specified name.\n\n## Examples\n\n# Create a new namespace named my-namespace\n\nkubectl create namespace my-namespace\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for namespace\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a pod disruption budget named my-pdb that will select all pods with the app=rails label and require at least one of them being available at any point in time","Command":"kubectl create poddisruptionbudget my-pdb --selector=app=rails --min-available=1","Content":"# kubectl create poddisruptionbudget\n\nCreate a pod disruption budget with the specified name\n\n```bash\nkubectl create poddisruptionbudget NAME --selector=SELECTOR --min-available=N [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a pod disruption budget with the specified name, selector, and desired minimum available pods.\n\n## Examples\n\n# Create a pod disruption budget named my-pdb that will select all pods with the app=rails label\n# and require at least one of them being available at any point in time\n\nkubectl create poddisruptionbudget my-pdb --selector=app=rails --min-available=1\n\n# Create a pod disruption budget named my-pdb that will select all pods with the app=nginx label\n# and require at least half of the pods selected to be available at any point in time\n\nkubectl create pdb my-pdb --selector=app=nginx --min-available=50%\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for poddisruptionbudget\n      --max-unavailable string         The maximum number or percentage of unavailable pods this budget requires.\n      --min-available string           The minimum number or percentage of available pods this budget requires.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this budget. Only equality-based selector requirements are supported.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a pod disruption budget named my-pdb that will select all pods with the app=nginx label and require at least half of the pods selected to be available at any point in time","Command":"kubectl create pdb my-pdb --selector=app=nginx --min-available=50%","Content":"# kubectl create poddisruptionbudget\n\nCreate a pod disruption budget with the specified name\n\n```bash\nkubectl create poddisruptionbudget NAME --selector=SELECTOR --min-available=N [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a pod disruption budget with the specified name, selector, and desired minimum available pods.\n\n## Examples\n\n# Create a pod disruption budget named my-pdb that will select all pods with the app=rails label\n# and require at least one of them being available at any point in time\n\nkubectl create poddisruptionbudget my-pdb --selector=app=rails --min-available=1\n\n# Create a pod disruption budget named my-pdb that will select all pods with the app=nginx label\n# and require at least half of the pods selected to be available at any point in time\n\nkubectl create pdb my-pdb --selector=app=nginx --min-available=50%\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for poddisruptionbudget\n      --max-unavailable string         The maximum number or percentage of unavailable pods this budget requires.\n      --min-available string           The minimum number or percentage of available pods this budget requires.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this budget. Only equality-based selector requirements are supported.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a priority class named high-priority","Command":"kubectl create priorityclass high-priority --value=1000 --description=\"high priority\"","Content":"# kubectl create priorityclass\n\nCreate a priority class with the specified name\n\n```bash\nkubectl create priorityclass NAME --value=VALUE --global-default=BOOL [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a priority class with the specified name, value, globalDefault and description.\n\n## Examples\n\n# Create a priority class named high-priority\n\nkubectl create priorityclass high-priority --value=1000 --description=\"high priority\"\n\n# Create a priority class named default-priority that is considered as the global default priority\n\nkubectl create priorityclass default-priority --value=1000 --global-default=true --description=\"default priority\"\n\n# Create a priority class named high-priority that cannot preempt pods with lower priority\n\nkubectl create priorityclass high-priority --value=1000 --description=\"high priority\" --preemption-policy=\"Never\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --description string             description is an arbitrary string that usually provides guidelines on when this priority class should be used.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --global-default                 global-default specifies whether this PriorityClass should be considered as the default priority.\n  -h, --help                           help for priorityclass\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --preemption-policy string       preemption-policy is the policy for preempting pods with lower priority. (default \"PreemptLowerPriority\")\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --value int32                    the value of this priority class.\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a priority class named default-priority that is considered as the global default priority","Command":"kubectl create priorityclass default-priority --value=1000 --global-default=true --description=\"default priority\"","Content":"# kubectl create priorityclass\n\nCreate a priority class with the specified name\n\n```bash\nkubectl create priorityclass NAME --value=VALUE --global-default=BOOL [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a priority class with the specified name, value, globalDefault and description.\n\n## Examples\n\n# Create a priority class named high-priority\n\nkubectl create priorityclass high-priority --value=1000 --description=\"high priority\"\n\n# Create a priority class named default-priority that is considered as the global default priority\n\nkubectl create priorityclass default-priority --value=1000 --global-default=true --description=\"default priority\"\n\n# Create a priority class named high-priority that cannot preempt pods with lower priority\n\nkubectl create priorityclass high-priority --value=1000 --description=\"high priority\" --preemption-policy=\"Never\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --description string             description is an arbitrary string that usually provides guidelines on when this priority class should be used.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --global-default                 global-default specifies whether this PriorityClass should be considered as the default priority.\n  -h, --help                           help for priorityclass\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --preemption-policy string       preemption-policy is the policy for preempting pods with lower priority. (default \"PreemptLowerPriority\")\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --value int32                    the value of this priority class.\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a priority class named high-priority that cannot preempt pods with lower priority","Command":"kubectl create priorityclass high-priority --value=1000 --description=\"high priority\" --preemption-policy=\"Never\"","Content":"# kubectl create priorityclass\n\nCreate a priority class with the specified name\n\n```bash\nkubectl create priorityclass NAME --value=VALUE --global-default=BOOL [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a priority class with the specified name, value, globalDefault and description.\n\n## Examples\n\n# Create a priority class named high-priority\n\nkubectl create priorityclass high-priority --value=1000 --description=\"high priority\"\n\n# Create a priority class named default-priority that is considered as the global default priority\n\nkubectl create priorityclass default-priority --value=1000 --global-default=true --description=\"default priority\"\n\n# Create a priority class named high-priority that cannot preempt pods with lower priority\n\nkubectl create priorityclass high-priority --value=1000 --description=\"high priority\" --preemption-policy=\"Never\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --description string             description is an arbitrary string that usually provides guidelines on when this priority class should be used.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --global-default                 global-default specifies whether this PriorityClass should be considered as the default priority.\n  -h, --help                           help for priorityclass\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --preemption-policy string       preemption-policy is the policy for preempting pods with lower priority. (default \"PreemptLowerPriority\")\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --value int32                    the value of this priority class.\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new resource quota named my-quota","Command":"kubectl create quota my-quota --hard=cpu=1,memory=1G,pods=2,services=3,replicationcontrollers=2,resourcequotas=1,secrets=5,persistentvolumeclaims=10","Content":"# kubectl create quota\n\nCreate a quota with the specified name\n\n```bash\nkubectl create quota NAME [--hard=key1=value1,key2=value2] [--scopes=Scope1,Scope2] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a resource quota with the specified name, hard limits, and optional scopes.\n\n## Examples\n\n# Create a new resource quota named my-quota\n\nkubectl create quota my-quota --hard=cpu=1,memory=1G,pods=2,services=3,replicationcontrollers=2,resourcequotas=1,secrets=5,persistentvolumeclaims=10\n\n# Create a new resource quota named best-effort\n\nkubectl create quota best-effort --hard=pods=100 --scopes=BestEffort\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --hard string                    A comma-delimited set of resource=quantity pairs that define a hard limit.\n  -h, --help                           help for quota\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --scopes string                  A comma-delimited set of quota scopes that must all match each object tracked by the quota.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a new resource quota named best-effort","Command":"kubectl create quota best-effort --hard=pods=100 --scopes=BestEffort","Content":"# kubectl create quota\n\nCreate a quota with the specified name\n\n```bash\nkubectl create quota NAME [--hard=key1=value1,key2=value2] [--scopes=Scope1,Scope2] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a resource quota with the specified name, hard limits, and optional scopes.\n\n## Examples\n\n# Create a new resource quota named my-quota\n\nkubectl create quota my-quota --hard=cpu=1,memory=1G,pods=2,services=3,replicationcontrollers=2,resourcequotas=1,secrets=5,persistentvolumeclaims=10\n\n# Create a new resource quota named best-effort\n\nkubectl create quota best-effort --hard=pods=100 --scopes=BestEffort\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --hard string                    A comma-delimited set of resource=quantity pairs that define a hard limit.\n  -h, --help                           help for quota\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --scopes string                  A comma-delimited set of quota scopes that must all match each object tracked by the quota.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods","Command":"kubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods","Content":"# kubectl create role\n\nCreate a role with single rule\n\n```bash\nkubectl create role NAME --verb=verb --resource=resource.group/subresource [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a role with single rule.\n\n## Examples\n\n# Create a role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods\n\n# Create a role named \"pod-reader\" with ResourceName specified\n\nkubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a role named \"foo\" with API Group specified\n\nkubectl create role foo --verb=get,list,watch --resource=rs.apps\n\n# Create a role named \"foo\" with SubResource specified\n\nkubectl create role foo --verb=get,list,watch --resource=pods,pods/status\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for role\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings               Resource that the rule applies to\n      --resource-name stringArray      Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                   Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a role named \"pod-reader\" with ResourceName specified","Command":"kubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod","Content":"# kubectl create role\n\nCreate a role with single rule\n\n```bash\nkubectl create role NAME --verb=verb --resource=resource.group/subresource [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a role with single rule.\n\n## Examples\n\n# Create a role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods\n\n# Create a role named \"pod-reader\" with ResourceName specified\n\nkubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a role named \"foo\" with API Group specified\n\nkubectl create role foo --verb=get,list,watch --resource=rs.apps\n\n# Create a role named \"foo\" with SubResource specified\n\nkubectl create role foo --verb=get,list,watch --resource=pods,pods/status\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for role\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings               Resource that the rule applies to\n      --resource-name stringArray      Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                   Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a role named \"foo\" with API Group specified","Command":"kubectl create role foo --verb=get,list,watch --resource=rs.apps","Content":"# kubectl create role\n\nCreate a role with single rule\n\n```bash\nkubectl create role NAME --verb=verb --resource=resource.group/subresource [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a role with single rule.\n\n## Examples\n\n# Create a role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods\n\n# Create a role named \"pod-reader\" with ResourceName specified\n\nkubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a role named \"foo\" with API Group specified\n\nkubectl create role foo --verb=get,list,watch --resource=rs.apps\n\n# Create a role named \"foo\" with SubResource specified\n\nkubectl create role foo --verb=get,list,watch --resource=pods,pods/status\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for role\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings               Resource that the rule applies to\n      --resource-name stringArray      Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                   Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a role named \"foo\" with SubResource specified","Command":"kubectl create role foo --verb=get,list,watch --resource=pods,pods/status","Content":"# kubectl create role\n\nCreate a role with single rule\n\n```bash\nkubectl create role NAME --verb=verb --resource=resource.group/subresource [--resource-name=resourcename] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a role with single rule.\n\n## Examples\n\n# Create a role named \"pod-reader\" that allows user to perform \"get\", \"watch\" and \"list\" on pods\n\nkubectl create role pod-reader --verb=get --verb=list --verb=watch --resource=pods\n\n# Create a role named \"pod-reader\" with ResourceName specified\n\nkubectl create role pod-reader --verb=get --resource=pods --resource-name=readablepod --resource-name=anotherpod\n\n# Create a role named \"foo\" with API Group specified\n\nkubectl create role foo --verb=get,list,watch --resource=rs.apps\n\n# Create a role named \"foo\" with SubResource specified\n\nkubectl create role foo --verb=get,list,watch --resource=pods,pods/status\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for role\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --resource strings               Resource that the rule applies to\n      --resource-name stringArray      Resource in the white list that the rule applies to, repeat this flag for multiple items\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --verb strings                   Verb that applies to the resources contained in the rule\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a role binding for user1, user2, and group1 using the admin cluster role","Command":"kubectl create rolebinding admin --clusterrole=admin --user=user1 --user=user2 --group=group1","Content":"# kubectl create rolebinding\n\nCreate a role binding for a particular role or cluster role\n\n```bash\nkubectl create rolebinding NAME --clusterrole=NAME|--role=NAME [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a role binding for a particular role or cluster role.\n\n## Examples\n\n# Create a role binding for user1, user2, and group1 using the admin cluster role\n\nkubectl create rolebinding admin --clusterrole=admin --user=user1 --user=user2 --group=group1\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --clusterrole string             ClusterRole this RoleBinding should reference\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --group stringArray              Groups to bind to the role. The flag can be repeated to add multiple groups.\n  -h, --help                           help for rolebinding\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --role string                    Role this RoleBinding should reference\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --serviceaccount stringArray     Service accounts to bind to the role, in the format \u003cnamespace\u003e:\u003cname\u003e. The flag can be repeated to add multiple service accounts.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" If you don't already have a .dockercfg file, you can create a dockercfg secret directly by using:","Command":"kubectl create secret docker-registry my-secret --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL","Content":"# kubectl create secret docker-registry\n\nCreate a secret for use with a Docker registry\n\n```bash\nkubectl create secret docker-registry NAME --docker-username=user --docker-password=password --docker-email=email [--docker-server=string] [--from-file=[key=]source] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a new secret for use with Docker registries.\n  \n  Dockercfg secrets are used to authenticate against Docker registries.\n  \n  When using the Docker command line to push images, you can authenticate to a given registry by running:\n      '$ docker login DOCKER_REGISTRY_SERVER --username=DOCKER_USER --password=DOCKER_PASSWORD --email=DOCKER_EMAIL'.\n  \n That produces a ~/.dockercfg file that is used by subsequent 'docker push' and 'docker pull' commands to authenticate to the registry. The email address is optional.\n\n  When creating applications, you may have a Docker registry that requires authentication.  In order for the\n  nodes to pull images on your behalf, they must have the credentials.  You can provide this information\n  by creating a dockercfg secret and attaching it to your service account.\n\n## Examples\n\n# If you don't already have a .dockercfg file, you can create a dockercfg secret directly by using:\n\nkubectl create secret docker-registry my-secret --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL\n\n# Create a new secret named my-secret from ~/.docker/config.json\n\nkubectl create secret docker-registry my-secret --from-file=.dockerconfigjson=path/to/.docker/config.json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --docker-email string            Email for Docker registry\n      --docker-password string         Password for Docker registry authentication\n      --docker-server string           Server location for Docker registry (default \"https://index.docker.io/v1/\")\n      --docker-username string         Username for Docker registry authentication\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-file strings              Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.\n  -h, --help                           help for docker-registry\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new secret named my-secret from ~/.docker/config.json","Command":"kubectl create secret docker-registry my-secret --from-file=.dockerconfigjson=path/to/.docker/config.json","Content":"# kubectl create secret docker-registry\n\nCreate a secret for use with a Docker registry\n\n```bash\nkubectl create secret docker-registry NAME --docker-username=user --docker-password=password --docker-email=email [--docker-server=string] [--from-file=[key=]source] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a new secret for use with Docker registries.\n  \n  Dockercfg secrets are used to authenticate against Docker registries.\n  \n  When using the Docker command line to push images, you can authenticate to a given registry by running:\n      '$ docker login DOCKER_REGISTRY_SERVER --username=DOCKER_USER --password=DOCKER_PASSWORD --email=DOCKER_EMAIL'.\n  \n That produces a ~/.dockercfg file that is used by subsequent 'docker push' and 'docker pull' commands to authenticate to the registry. The email address is optional.\n\n  When creating applications, you may have a Docker registry that requires authentication.  In order for the\n  nodes to pull images on your behalf, they must have the credentials.  You can provide this information\n  by creating a dockercfg secret and attaching it to your service account.\n\n## Examples\n\n# If you don't already have a .dockercfg file, you can create a dockercfg secret directly by using:\n\nkubectl create secret docker-registry my-secret --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL\n\n# Create a new secret named my-secret from ~/.docker/config.json\n\nkubectl create secret docker-registry my-secret --from-file=.dockerconfigjson=path/to/.docker/config.json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --docker-email string            Email for Docker registry\n      --docker-password string         Password for Docker registry authentication\n      --docker-server string           Server location for Docker registry (default \"https://index.docker.io/v1/\")\n      --docker-username string         Username for Docker registry authentication\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-file strings              Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.\n  -h, --help                           help for docker-registry\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new secret named my-secret with keys for each file in folder bar","Command":"kubectl create secret generic my-secret --from-file=path/to/bar","Content":"# kubectl create secret generic\n\nCreate a secret from a local file, directory, or literal value\n\n```bash\nkubectl create secret generic NAME [--type=string] [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a secret based on a file, directory, or specified literal value.\n\n A single secret may package one or more key/value pairs.\n\n When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.\n\n When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new secret named my-secret with keys for each file in folder bar\n\nkubectl create secret generic my-secret --from-file=path/to/bar\n\n# Create a new secret named my-secret with specified keys instead of names on disk\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-file=ssh-publickey=path/to/id_rsa.pub\n\n# Create a new secret named my-secret with key1=supersecret and key2=topsecret\n\nkubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret\n\n# Create a new secret named my-secret using a combination of a file and a literal\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-literal=passphrase=topsecret\n\n# Create a new secret named my-secret from env files\n\nkubectl create secret generic my-secret --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a secret.\n      --from-file strings              Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.\n      --from-literal stringArray       Specify a key and literal value to insert in secret (i.e. mykey=somevalue)\n  -h, --help                           help for generic\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of secret to create\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new secret named my-secret with specified keys instead of names on disk","Command":"kubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-file=ssh-publickey=path/to/id_rsa.pub","Content":"# kubectl create secret generic\n\nCreate a secret from a local file, directory, or literal value\n\n```bash\nkubectl create secret generic NAME [--type=string] [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a secret based on a file, directory, or specified literal value.\n\n A single secret may package one or more key/value pairs.\n\n When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.\n\n When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new secret named my-secret with keys for each file in folder bar\n\nkubectl create secret generic my-secret --from-file=path/to/bar\n\n# Create a new secret named my-secret with specified keys instead of names on disk\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-file=ssh-publickey=path/to/id_rsa.pub\n\n# Create a new secret named my-secret with key1=supersecret and key2=topsecret\n\nkubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret\n\n# Create a new secret named my-secret using a combination of a file and a literal\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-literal=passphrase=topsecret\n\n# Create a new secret named my-secret from env files\n\nkubectl create secret generic my-secret --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a secret.\n      --from-file strings              Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.\n      --from-literal stringArray       Specify a key and literal value to insert in secret (i.e. mykey=somevalue)\n  -h, --help                           help for generic\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of secret to create\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new secret named my-secret with key1=supersecret and key2=topsecret","Command":"kubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret","Content":"# kubectl create secret generic\n\nCreate a secret from a local file, directory, or literal value\n\n```bash\nkubectl create secret generic NAME [--type=string] [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a secret based on a file, directory, or specified literal value.\n\n A single secret may package one or more key/value pairs.\n\n When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.\n\n When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new secret named my-secret with keys for each file in folder bar\n\nkubectl create secret generic my-secret --from-file=path/to/bar\n\n# Create a new secret named my-secret with specified keys instead of names on disk\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-file=ssh-publickey=path/to/id_rsa.pub\n\n# Create a new secret named my-secret with key1=supersecret and key2=topsecret\n\nkubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret\n\n# Create a new secret named my-secret using a combination of a file and a literal\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-literal=passphrase=topsecret\n\n# Create a new secret named my-secret from env files\n\nkubectl create secret generic my-secret --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a secret.\n      --from-file strings              Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.\n      --from-literal stringArray       Specify a key and literal value to insert in secret (i.e. mykey=somevalue)\n  -h, --help                           help for generic\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of secret to create\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new secret named my-secret using a combination of a file and a literal","Command":"kubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-literal=passphrase=topsecret","Content":"# kubectl create secret generic\n\nCreate a secret from a local file, directory, or literal value\n\n```bash\nkubectl create secret generic NAME [--type=string] [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a secret based on a file, directory, or specified literal value.\n\n A single secret may package one or more key/value pairs.\n\n When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.\n\n When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new secret named my-secret with keys for each file in folder bar\n\nkubectl create secret generic my-secret --from-file=path/to/bar\n\n# Create a new secret named my-secret with specified keys instead of names on disk\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-file=ssh-publickey=path/to/id_rsa.pub\n\n# Create a new secret named my-secret with key1=supersecret and key2=topsecret\n\nkubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret\n\n# Create a new secret named my-secret using a combination of a file and a literal\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-literal=passphrase=topsecret\n\n# Create a new secret named my-secret from env files\n\nkubectl create secret generic my-secret --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a secret.\n      --from-file strings              Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.\n      --from-literal stringArray       Specify a key and literal value to insert in secret (i.e. mykey=somevalue)\n  -h, --help                           help for generic\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of secret to create\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new secret named my-secret from env files","Command":"kubectl create secret generic my-secret --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env","Content":"# kubectl create secret generic\n\nCreate a secret from a local file, directory, or literal value\n\n```bash\nkubectl create secret generic NAME [--type=string] [--from-file=[key=]source] [--from-literal=key1=value1] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a secret based on a file, directory, or specified literal value.\n\n A single secret may package one or more key/value pairs.\n\n When creating a secret based on a file, the key will default to the basename of the file, and the value will default to the file content. If the basename is an invalid key or you wish to chose your own, you may specify an alternate key.\n\n When creating a secret based on a directory, each file whose basename is a valid key in the directory will be packaged into the secret. Any directory entries except regular files are ignored (e.g. subdirectories, symlinks, devices, pipes, etc).\n\n## Examples\n\n# Create a new secret named my-secret with keys for each file in folder bar\n\nkubectl create secret generic my-secret --from-file=path/to/bar\n\n# Create a new secret named my-secret with specified keys instead of names on disk\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-file=ssh-publickey=path/to/id_rsa.pub\n\n# Create a new secret named my-secret with key1=supersecret and key2=topsecret\n\nkubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret\n\n# Create a new secret named my-secret using a combination of a file and a literal\n\nkubectl create secret generic my-secret --from-file=ssh-privatekey=path/to/id_rsa --from-literal=passphrase=topsecret\n\n# Create a new secret named my-secret from env files\n\nkubectl create secret generic my-secret --from-env-file=path/to/foo.env --from-env-file=path/to/bar.env\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n      --from-env-file strings          Specify the path to a file to read lines of key=val pairs to create a secret.\n      --from-file strings              Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.\n      --from-literal stringArray       Specify a key and literal value to insert in secret (i.e. mykey=somevalue)\n  -h, --help                           help for generic\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of secret to create\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new TLS secret named tls-secret with the given key pair","Command":"kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key","Content":"# kubectl create secret tls\n\nCreate a TLS secret\n\n```bash\nkubectl create secret tls NAME --cert=path/to/cert/file --key=path/to/key/file [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a TLS secret from the given public/private key pair.\n\n The public/private key pair must exist beforehand. The public key certificate must be .PEM encoded and match the given private key.\n\n## Examples\n\n# Create a new TLS secret named tls-secret with the given key pair\n\nkubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --append-hash                    Append a hash of the secret to its name.\n      --cert string                    Path to PEM encoded public key certificate.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for tls\n      --key string                     Path to private key associated with given certificate.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create secret - Create a secret using specified subcommand\n"},{"Description":" Create a new ClusterIP service named my-cs","Command":"kubectl create service clusterip my-cs --tcp=5678:8080","Content":"# kubectl create service clusterip\n\nCreate a ClusterIP service\n\n```bash\nkubectl create service clusterip NAME [--tcp=\u003cport\u003e:\u003ctargetPort\u003e] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a ClusterIP service with the specified name.\n\n## Examples\n\n# Create a new ClusterIP service named my-cs\n\nkubectl create service clusterip my-cs --tcp=5678:8080\n\n# Create a new ClusterIP service named my-cs (in headless mode)\n\nkubectl create service clusterip my-cs --clusterip=\"None\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --clusterip string               Assign your own ClusterIP or set to 'None' for a 'headless' service (no loadbalancing).\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for clusterip\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --tcp strings                    Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create service - Create a service using a specified subcommand\n"},{"Description":" Create a new ClusterIP service named my-cs (in headless mode)","Command":"kubectl create service clusterip my-cs --clusterip=\"None\"","Content":"# kubectl create service clusterip\n\nCreate a ClusterIP service\n\n```bash\nkubectl create service clusterip NAME [--tcp=\u003cport\u003e:\u003ctargetPort\u003e] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a ClusterIP service with the specified name.\n\n## Examples\n\n# Create a new ClusterIP service named my-cs\n\nkubectl create service clusterip my-cs --tcp=5678:8080\n\n# Create a new ClusterIP service named my-cs (in headless mode)\n\nkubectl create service clusterip my-cs --clusterip=\"None\"\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --clusterip string               Assign your own ClusterIP or set to 'None' for a 'headless' service (no loadbalancing).\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for clusterip\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --tcp strings                    Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create service - Create a service using a specified subcommand\n"},{"Description":" Create a new ExternalName service named my-ns","Command":"kubectl create service externalname my-ns --external-name bar.com","Content":"# kubectl create service externalname\n\nCreate an ExternalName service\n\n```bash\nkubectl create service externalname NAME --external-name external.name [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate an ExternalName service with the specified name.\n\n ExternalName service references to an external DNS address instead of only pods, which will allow application authors to reference services that exist off platform, on other clusters, or locally.\n\n## Examples\n\n# Create a new ExternalName service named my-ns\n\nkubectl create service externalname my-ns --external-name bar.com\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-name string           External name of service\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for externalname\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --tcp strings                    Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create service - Create a service using a specified subcommand\n"},{"Description":" Create a new LoadBalancer service named my-lbs","Command":"kubectl create service loadbalancer my-lbs --tcp=5678:8080","Content":"# kubectl create service loadbalancer\n\nCreate a LoadBalancer service\n\n```bash\nkubectl create service loadbalancer NAME [--tcp=port:targetPort] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a LoadBalancer service with the specified name.\n\n## Examples\n\n# Create a new LoadBalancer service named my-lbs\n\nkubectl create service loadbalancer my-lbs --tcp=5678:8080\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for loadbalancer\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --tcp strings                    Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create service - Create a service using a specified subcommand\n"},{"Description":" Create a new NodePort service named my-ns","Command":"kubectl create service nodeport my-ns --tcp=5678:8080","Content":"# kubectl create service nodeport\n\nCreate a NodePort service\n\n```bash\nkubectl create service nodeport NAME [--tcp=port:targetPort] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a NodePort service with the specified name.\n\n## Examples\n\n# Create a new NodePort service named my-ns\n\nkubectl create service nodeport my-ns --tcp=5678:8080\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for nodeport\n      --node-port int                  Port used to expose the service on each node in a cluster.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --tcp strings                    Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create service - Create a service using a specified subcommand\n"},{"Description":" Create a new service account named my-service-account","Command":"kubectl create serviceaccount my-service-account","Content":"# kubectl create serviceaccount\n\nCreate a service account with the specified name\n\n```bash\nkubectl create serviceaccount NAME [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nCreate a service account with the specified name.\n\n## Examples\n\n# Create a new service account named my-service-account\n\nkubectl create serviceaccount my-service-account\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -h, --help                           help for serviceaccount\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Request a token to authenticate to the kube-apiserver as the service account \"myapp\" in the current namespace","Command":"kubectl create token myapp","Content":"# kubectl create token\n\nRequest a service account token\n\n```bash\nkubectl create token SERVICE_ACCOUNT_NAME\n```\n\n## What does it do?\n\nRequest a service account token.\n\n## Examples\n\n# Request a token to authenticate to the kube-apiserver as the service account \"myapp\" in the current namespace\n\nkubectl create token myapp\n\n# Request a token for a service account in a custom namespace\n\nkubectl create token myapp --namespace myns\n\n# Request a token with a custom expiration\n\nkubectl create token myapp --duration 10m\n\n# Request a token with a custom audience\n\nkubectl create token myapp --audience https://example.com\n\n# Request a token bound to an instance of a Secret object\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret\n\n# Request a token bound to an instance of a Secret object with a specific uid\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret --bound-object-uid 0d4691ed-659b-4935-a832-355f77ee47cc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --audience stringArray          Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.\n      --bound-object-kind string      Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.\n      --bound-object-name string      Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.\n      --bound-object-uid string       UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.\n      --duration duration             Requested lifetime of the issued token. The server may return a token with a longer or shorter lifetime.\n  -h, --help                          help for token\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Request a token for a service account in a custom namespace","Command":"kubectl create token myapp --namespace myns","Content":"# kubectl create token\n\nRequest a service account token\n\n```bash\nkubectl create token SERVICE_ACCOUNT_NAME\n```\n\n## What does it do?\n\nRequest a service account token.\n\n## Examples\n\n# Request a token to authenticate to the kube-apiserver as the service account \"myapp\" in the current namespace\n\nkubectl create token myapp\n\n# Request a token for a service account in a custom namespace\n\nkubectl create token myapp --namespace myns\n\n# Request a token with a custom expiration\n\nkubectl create token myapp --duration 10m\n\n# Request a token with a custom audience\n\nkubectl create token myapp --audience https://example.com\n\n# Request a token bound to an instance of a Secret object\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret\n\n# Request a token bound to an instance of a Secret object with a specific uid\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret --bound-object-uid 0d4691ed-659b-4935-a832-355f77ee47cc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --audience stringArray          Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.\n      --bound-object-kind string      Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.\n      --bound-object-name string      Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.\n      --bound-object-uid string       UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.\n      --duration duration             Requested lifetime of the issued token. The server may return a token with a longer or shorter lifetime.\n  -h, --help                          help for token\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Request a token with a custom expiration","Command":"kubectl create token myapp --duration 10m","Content":"# kubectl create token\n\nRequest a service account token\n\n```bash\nkubectl create token SERVICE_ACCOUNT_NAME\n```\n\n## What does it do?\n\nRequest a service account token.\n\n## Examples\n\n# Request a token to authenticate to the kube-apiserver as the service account \"myapp\" in the current namespace\n\nkubectl create token myapp\n\n# Request a token for a service account in a custom namespace\n\nkubectl create token myapp --namespace myns\n\n# Request a token with a custom expiration\n\nkubectl create token myapp --duration 10m\n\n# Request a token with a custom audience\n\nkubectl create token myapp --audience https://example.com\n\n# Request a token bound to an instance of a Secret object\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret\n\n# Request a token bound to an instance of a Secret object with a specific uid\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret --bound-object-uid 0d4691ed-659b-4935-a832-355f77ee47cc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --audience stringArray          Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.\n      --bound-object-kind string      Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.\n      --bound-object-name string      Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.\n      --bound-object-uid string       UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.\n      --duration duration             Requested lifetime of the issued token. The server may return a token with a longer or shorter lifetime.\n  -h, --help                          help for token\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Request a token with a custom audience","Command":"kubectl create token myapp --audience https://example.com","Content":"# kubectl create token\n\nRequest a service account token\n\n```bash\nkubectl create token SERVICE_ACCOUNT_NAME\n```\n\n## What does it do?\n\nRequest a service account token.\n\n## Examples\n\n# Request a token to authenticate to the kube-apiserver as the service account \"myapp\" in the current namespace\n\nkubectl create token myapp\n\n# Request a token for a service account in a custom namespace\n\nkubectl create token myapp --namespace myns\n\n# Request a token with a custom expiration\n\nkubectl create token myapp --duration 10m\n\n# Request a token with a custom audience\n\nkubectl create token myapp --audience https://example.com\n\n# Request a token bound to an instance of a Secret object\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret\n\n# Request a token bound to an instance of a Secret object with a specific uid\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret --bound-object-uid 0d4691ed-659b-4935-a832-355f77ee47cc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --audience stringArray          Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.\n      --bound-object-kind string      Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.\n      --bound-object-name string      Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.\n      --bound-object-uid string       UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.\n      --duration duration             Requested lifetime of the issued token. The server may return a token with a longer or shorter lifetime.\n  -h, --help                          help for token\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Request a token bound to an instance of a Secret object","Command":"kubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret","Content":"# kubectl create token\n\nRequest a service account token\n\n```bash\nkubectl create token SERVICE_ACCOUNT_NAME\n```\n\n## What does it do?\n\nRequest a service account token.\n\n## Examples\n\n# Request a token to authenticate to the kube-apiserver as the service account \"myapp\" in the current namespace\n\nkubectl create token myapp\n\n# Request a token for a service account in a custom namespace\n\nkubectl create token myapp --namespace myns\n\n# Request a token with a custom expiration\n\nkubectl create token myapp --duration 10m\n\n# Request a token with a custom audience\n\nkubectl create token myapp --audience https://example.com\n\n# Request a token bound to an instance of a Secret object\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret\n\n# Request a token bound to an instance of a Secret object with a specific uid\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret --bound-object-uid 0d4691ed-659b-4935-a832-355f77ee47cc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --audience stringArray          Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.\n      --bound-object-kind string      Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.\n      --bound-object-name string      Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.\n      --bound-object-uid string       UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.\n      --duration duration             Requested lifetime of the issued token. The server may return a token with a longer or shorter lifetime.\n  -h, --help                          help for token\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Request a token bound to an instance of a Secret object with a specific uid","Command":"kubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret --bound-object-uid 0d4691ed-659b-4935-a832-355f77ee47cc","Content":"# kubectl create token\n\nRequest a service account token\n\n```bash\nkubectl create token SERVICE_ACCOUNT_NAME\n```\n\n## What does it do?\n\nRequest a service account token.\n\n## Examples\n\n# Request a token to authenticate to the kube-apiserver as the service account \"myapp\" in the current namespace\n\nkubectl create token myapp\n\n# Request a token for a service account in a custom namespace\n\nkubectl create token myapp --namespace myns\n\n# Request a token with a custom expiration\n\nkubectl create token myapp --duration 10m\n\n# Request a token with a custom audience\n\nkubectl create token myapp --audience https://example.com\n\n# Request a token bound to an instance of a Secret object\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret\n\n# Request a token bound to an instance of a Secret object with a specific uid\n\nkubectl create token myapp --bound-object-kind Secret --bound-object-name mysecret --bound-object-uid 0d4691ed-659b-4935-a832-355f77ee47cc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --audience stringArray          Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.\n      --bound-object-kind string      Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.\n      --bound-object-name string      Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.\n      --bound-object-uid string       UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.\n      --duration duration             Requested lifetime of the issued token. The server may return a token with a longer or shorter lifetime.\n  -h, --help                          help for token\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl create - Create a resource from a file or from stdin\n"},{"Description":" Create a pod using the data in pod.json","Command":"kubectl create -f ./pod.json","Content":"# kubectl create\n\nCreate a resource from a file or from stdin\n\n```bash\nkubectl create -f FILENAME\n```\n\n## What does it do?\n\nCreate a resource from a file or from stdin.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Create a pod using the data in pod.json\n\nkubectl create -f ./pod.json\n\n# Create a pod based on the JSON passed into stdin\n\ncat pod.json | kubectl create -f -\n\n# Edit the data in registry.yaml in JSON then create the resource using the edited data\n\nkubectl create -f registry.yaml --edit -o json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --edit                           Edit the API resource before creating\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -f, --filename strings               Filename, directory, or URL to files to use to create the resource\n  -h, --help                           help for create\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --raw string                     Raw URI to POST to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings           Only relevant if --edit=true. Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl create clusterrole](kubectl_create_clusterrole.md) - Create a cluster role\n* [kubectl create clusterrolebinding](kubectl_create_clusterrolebinding.md) - Create a cluster role binding for a particular cluster role\n* [kubectl create configmap](kubectl_create_configmap.md) - Create a config map from a local file, directory or literal value\n* [kubectl create cronjob](kubectl_create_cronjob.md) - Create a cron job with the specified name\n* [kubectl create deployment](kubectl_create_deployment.md) - Create a deployment with the specified name\n* [kubectl create ingress](kubectl_create_ingress.md) - Create an ingress with the specified name\n* [kubectl create job](kubectl_create_job.md) - Create a job with the specified name\n* [kubectl create namespace](kubectl_create_namespace.md) - Create a namespace with the specified name\n* [kubectl create poddisruptionbudget](kubectl_create_poddisruptionbudget.md) - Create a pod disruption budget with the specified name\n* [kubectl create priorityclass](kubectl_create_priorityclass.md) - Create a priority class with the specified name\n* [kubectl create quota](kubectl_create_quota.md) - Create a quota with the specified name\n* [kubectl create role](kubectl_create_role.md) - Create a role with single rule\n* [kubectl create rolebinding](kubectl_create_rolebinding.md) - Create a role binding for a particular role or cluster role\n* [kubectl create secret](kubectl_create_secret.md) - Create a secret using specified subcommand\n* [kubectl create service](kubectl_create_service.md) - Create a service using a specified subcommand\n* [kubectl create serviceaccount](kubectl_create_serviceaccount.md) - Create a service account with the specified name\n* [kubectl create token](kubectl_create_token.md) - Request a service account token\n"},{"Description":" Create a pod based on the JSON passed into stdin","Command":"cat pod.json | kubectl create -f -","Content":"# kubectl create\n\nCreate a resource from a file or from stdin\n\n```bash\nkubectl create -f FILENAME\n```\n\n## What does it do?\n\nCreate a resource from a file or from stdin.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Create a pod using the data in pod.json\n\nkubectl create -f ./pod.json\n\n# Create a pod based on the JSON passed into stdin\n\ncat pod.json | kubectl create -f -\n\n# Edit the data in registry.yaml in JSON then create the resource using the edited data\n\nkubectl create -f registry.yaml --edit -o json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --edit                           Edit the API resource before creating\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -f, --filename strings               Filename, directory, or URL to files to use to create the resource\n  -h, --help                           help for create\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --raw string                     Raw URI to POST to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings           Only relevant if --edit=true. Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl create clusterrole](kubectl_create_clusterrole.md) - Create a cluster role\n* [kubectl create clusterrolebinding](kubectl_create_clusterrolebinding.md) - Create a cluster role binding for a particular cluster role\n* [kubectl create configmap](kubectl_create_configmap.md) - Create a config map from a local file, directory or literal value\n* [kubectl create cronjob](kubectl_create_cronjob.md) - Create a cron job with the specified name\n* [kubectl create deployment](kubectl_create_deployment.md) - Create a deployment with the specified name\n* [kubectl create ingress](kubectl_create_ingress.md) - Create an ingress with the specified name\n* [kubectl create job](kubectl_create_job.md) - Create a job with the specified name\n* [kubectl create namespace](kubectl_create_namespace.md) - Create a namespace with the specified name\n* [kubectl create poddisruptionbudget](kubectl_create_poddisruptionbudget.md) - Create a pod disruption budget with the specified name\n* [kubectl create priorityclass](kubectl_create_priorityclass.md) - Create a priority class with the specified name\n* [kubectl create quota](kubectl_create_quota.md) - Create a quota with the specified name\n* [kubectl create role](kubectl_create_role.md) - Create a role with single rule\n* [kubectl create rolebinding](kubectl_create_rolebinding.md) - Create a role binding for a particular role or cluster role\n* [kubectl create secret](kubectl_create_secret.md) - Create a secret using specified subcommand\n* [kubectl create service](kubectl_create_service.md) - Create a service using a specified subcommand\n* [kubectl create serviceaccount](kubectl_create_serviceaccount.md) - Create a service account with the specified name\n* [kubectl create token](kubectl_create_token.md) - Request a service account token\n"},{"Description":" Edit the data in registry.yaml in JSON then create the resource using the edited data","Command":"kubectl create -f registry.yaml --edit -o json","Content":"# kubectl create\n\nCreate a resource from a file or from stdin\n\n```bash\nkubectl create -f FILENAME\n```\n\n## What does it do?\n\nCreate a resource from a file or from stdin.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Create a pod using the data in pod.json\n\nkubectl create -f ./pod.json\n\n# Create a pod based on the JSON passed into stdin\n\ncat pod.json | kubectl create -f -\n\n# Edit the data in registry.yaml in JSON then create the resource using the edited data\n\nkubectl create -f registry.yaml --edit -o json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --edit                           Edit the API resource before creating\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-create\")\n  -f, --filename strings               Filename, directory, or URL to files to use to create the resource\n  -h, --help                           help for create\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --raw string                     Raw URI to POST to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings           Only relevant if --edit=true. Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl create clusterrole](kubectl_create_clusterrole.md) - Create a cluster role\n* [kubectl create clusterrolebinding](kubectl_create_clusterrolebinding.md) - Create a cluster role binding for a particular cluster role\n* [kubectl create configmap](kubectl_create_configmap.md) - Create a config map from a local file, directory or literal value\n* [kubectl create cronjob](kubectl_create_cronjob.md) - Create a cron job with the specified name\n* [kubectl create deployment](kubectl_create_deployment.md) - Create a deployment with the specified name\n* [kubectl create ingress](kubectl_create_ingress.md) - Create an ingress with the specified name\n* [kubectl create job](kubectl_create_job.md) - Create a job with the specified name\n* [kubectl create namespace](kubectl_create_namespace.md) - Create a namespace with the specified name\n* [kubectl create poddisruptionbudget](kubectl_create_poddisruptionbudget.md) - Create a pod disruption budget with the specified name\n* [kubectl create priorityclass](kubectl_create_priorityclass.md) - Create a priority class with the specified name\n* [kubectl create quota](kubectl_create_quota.md) - Create a quota with the specified name\n* [kubectl create role](kubectl_create_role.md) - Create a role with single rule\n* [kubectl create rolebinding](kubectl_create_rolebinding.md) - Create a role binding for a particular role or cluster role\n* [kubectl create secret](kubectl_create_secret.md) - Create a secret using specified subcommand\n* [kubectl create service](kubectl_create_service.md) - Create a service using a specified subcommand\n* [kubectl create serviceaccount](kubectl_create_serviceaccount.md) - Create a service account with the specified name\n* [kubectl create token](kubectl_create_token.md) - Request a service account token\n"},{"Description":" Create an interactive debugging session in pod mypod and immediately attach to it. (requires the EphemeralContainers feature to be enabled in the cluster)","Command":"kubectl debug mypod -it --image=busybox","Content":"# kubectl debug\n\nCreate debugging sessions for troubleshooting workloads and nodes\n\n```bash\nkubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]\n```\n\n## What does it do?\n\nDebug cluster resources using interactive debugging containers.\n\n 'debug' provides automation for common debugging tasks for cluster objects identified by resource and name. Pods will be used by default if no resource is specified.\n\n The action taken by 'debug' varies depending on what resource is specified. Supported actions include:\n\n  *  Workload: Create a copy of an existing pod with certain attributes changed, for example changing the image tag to a new version.\n  *  Workload: Add an ephemeral container to an already running pod, for example to add debugging utilities without restarting the pod.\n  *  Node: Create a new pod that runs in the node's host namespaces and can access the node's filesystem.\n\n## Examples\n\n# Create an interactive debugging session in pod mypod and immediately attach to it.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug mypod -it --image=busybox\n\n# Create a debug container named debugger using a custom automated debugging image.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug --image=myproj/debug-tools -c debugger mypod\n\n# Create a copy of mypod adding a debug container and attach to it\n\nkubectl debug mypod -it --image=busybox --copy-to=my-debugger\n\n# Create a copy of mypod changing the command of mycontainer\n\nkubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh\n\n# Create a copy of mypod changing all container images to busybox\n\nkubectl debug mypod --copy-to=my-debugger --set-image=*=busybox\n\n# Create a copy of mypod adding a debug container and changing container images\n\nkubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug\n\n# Create an interactive debugging session on a node and immediately attach to it.\n# The container will run in the host namespaces and the host's filesystem will be mounted at /host\n\nkubectl debug node/mynode -it --image=busybox\n\n## What are the flags?\n\n```bash\n      --arguments-only             If specified, everything after -- will be passed to the new container as Args instead of Command.\n      --attach                     If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.\n  -c, --container string           Container name to use for debug container.\n      --copy-to string             Create a copy of the target Pod with this name.\n      --env stringToString         Environment variables to set in the container. (default [])\n  -h, --help                       help for debug\n      --image string               Container image to use for debug container.\n      --image-pull-policy string   The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.\n  -q, --quiet                      If true, suppress informational messages.\n      --replace                    When used with '--copy-to', delete the original Pod.\n      --same-node                  When used with '--copy-to', schedule the copy of target Pod on the same node.\n      --set-image stringToString   When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works. (default [])\n      --share-processes            When used with '--copy-to', enable process namespace sharing in the copy. (default true)\n  -i, --stdin                      Keep stdin open on the container(s) in the pod, even if nothing is attached.\n      --target string              When using an ephemeral container, target processes in this container name.\n  -t, --tty                        Allocate a TTY for the debugging container.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a debug container named debugger using a custom automated debugging image. (requires the EphemeralContainers feature to be enabled in the cluster)","Command":"kubectl debug --image=myproj/debug-tools -c debugger mypod","Content":"# kubectl debug\n\nCreate debugging sessions for troubleshooting workloads and nodes\n\n```bash\nkubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]\n```\n\n## What does it do?\n\nDebug cluster resources using interactive debugging containers.\n\n 'debug' provides automation for common debugging tasks for cluster objects identified by resource and name. Pods will be used by default if no resource is specified.\n\n The action taken by 'debug' varies depending on what resource is specified. Supported actions include:\n\n  *  Workload: Create a copy of an existing pod with certain attributes changed, for example changing the image tag to a new version.\n  *  Workload: Add an ephemeral container to an already running pod, for example to add debugging utilities without restarting the pod.\n  *  Node: Create a new pod that runs in the node's host namespaces and can access the node's filesystem.\n\n## Examples\n\n# Create an interactive debugging session in pod mypod and immediately attach to it.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug mypod -it --image=busybox\n\n# Create a debug container named debugger using a custom automated debugging image.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug --image=myproj/debug-tools -c debugger mypod\n\n# Create a copy of mypod adding a debug container and attach to it\n\nkubectl debug mypod -it --image=busybox --copy-to=my-debugger\n\n# Create a copy of mypod changing the command of mycontainer\n\nkubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh\n\n# Create a copy of mypod changing all container images to busybox\n\nkubectl debug mypod --copy-to=my-debugger --set-image=*=busybox\n\n# Create a copy of mypod adding a debug container and changing container images\n\nkubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug\n\n# Create an interactive debugging session on a node and immediately attach to it.\n# The container will run in the host namespaces and the host's filesystem will be mounted at /host\n\nkubectl debug node/mynode -it --image=busybox\n\n## What are the flags?\n\n```bash\n      --arguments-only             If specified, everything after -- will be passed to the new container as Args instead of Command.\n      --attach                     If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.\n  -c, --container string           Container name to use for debug container.\n      --copy-to string             Create a copy of the target Pod with this name.\n      --env stringToString         Environment variables to set in the container. (default [])\n  -h, --help                       help for debug\n      --image string               Container image to use for debug container.\n      --image-pull-policy string   The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.\n  -q, --quiet                      If true, suppress informational messages.\n      --replace                    When used with '--copy-to', delete the original Pod.\n      --same-node                  When used with '--copy-to', schedule the copy of target Pod on the same node.\n      --set-image stringToString   When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works. (default [])\n      --share-processes            When used with '--copy-to', enable process namespace sharing in the copy. (default true)\n  -i, --stdin                      Keep stdin open on the container(s) in the pod, even if nothing is attached.\n      --target string              When using an ephemeral container, target processes in this container name.\n  -t, --tty                        Allocate a TTY for the debugging container.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a copy of mypod adding a debug container and attach to it","Command":"kubectl debug mypod -it --image=busybox --copy-to=my-debugger","Content":"# kubectl debug\n\nCreate debugging sessions for troubleshooting workloads and nodes\n\n```bash\nkubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]\n```\n\n## What does it do?\n\nDebug cluster resources using interactive debugging containers.\n\n 'debug' provides automation for common debugging tasks for cluster objects identified by resource and name. Pods will be used by default if no resource is specified.\n\n The action taken by 'debug' varies depending on what resource is specified. Supported actions include:\n\n  *  Workload: Create a copy of an existing pod with certain attributes changed, for example changing the image tag to a new version.\n  *  Workload: Add an ephemeral container to an already running pod, for example to add debugging utilities without restarting the pod.\n  *  Node: Create a new pod that runs in the node's host namespaces and can access the node's filesystem.\n\n## Examples\n\n# Create an interactive debugging session in pod mypod and immediately attach to it.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug mypod -it --image=busybox\n\n# Create a debug container named debugger using a custom automated debugging image.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug --image=myproj/debug-tools -c debugger mypod\n\n# Create a copy of mypod adding a debug container and attach to it\n\nkubectl debug mypod -it --image=busybox --copy-to=my-debugger\n\n# Create a copy of mypod changing the command of mycontainer\n\nkubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh\n\n# Create a copy of mypod changing all container images to busybox\n\nkubectl debug mypod --copy-to=my-debugger --set-image=*=busybox\n\n# Create a copy of mypod adding a debug container and changing container images\n\nkubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug\n\n# Create an interactive debugging session on a node and immediately attach to it.\n# The container will run in the host namespaces and the host's filesystem will be mounted at /host\n\nkubectl debug node/mynode -it --image=busybox\n\n## What are the flags?\n\n```bash\n      --arguments-only             If specified, everything after -- will be passed to the new container as Args instead of Command.\n      --attach                     If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.\n  -c, --container string           Container name to use for debug container.\n      --copy-to string             Create a copy of the target Pod with this name.\n      --env stringToString         Environment variables to set in the container. (default [])\n  -h, --help                       help for debug\n      --image string               Container image to use for debug container.\n      --image-pull-policy string   The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.\n  -q, --quiet                      If true, suppress informational messages.\n      --replace                    When used with '--copy-to', delete the original Pod.\n      --same-node                  When used with '--copy-to', schedule the copy of target Pod on the same node.\n      --set-image stringToString   When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works. (default [])\n      --share-processes            When used with '--copy-to', enable process namespace sharing in the copy. (default true)\n  -i, --stdin                      Keep stdin open on the container(s) in the pod, even if nothing is attached.\n      --target string              When using an ephemeral container, target processes in this container name.\n  -t, --tty                        Allocate a TTY for the debugging container.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a copy of mypod changing the command of mycontainer","Command":"kubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh","Content":"# kubectl debug\n\nCreate debugging sessions for troubleshooting workloads and nodes\n\n```bash\nkubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]\n```\n\n## What does it do?\n\nDebug cluster resources using interactive debugging containers.\n\n 'debug' provides automation for common debugging tasks for cluster objects identified by resource and name. Pods will be used by default if no resource is specified.\n\n The action taken by 'debug' varies depending on what resource is specified. Supported actions include:\n\n  *  Workload: Create a copy of an existing pod with certain attributes changed, for example changing the image tag to a new version.\n  *  Workload: Add an ephemeral container to an already running pod, for example to add debugging utilities without restarting the pod.\n  *  Node: Create a new pod that runs in the node's host namespaces and can access the node's filesystem.\n\n## Examples\n\n# Create an interactive debugging session in pod mypod and immediately attach to it.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug mypod -it --image=busybox\n\n# Create a debug container named debugger using a custom automated debugging image.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug --image=myproj/debug-tools -c debugger mypod\n\n# Create a copy of mypod adding a debug container and attach to it\n\nkubectl debug mypod -it --image=busybox --copy-to=my-debugger\n\n# Create a copy of mypod changing the command of mycontainer\n\nkubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh\n\n# Create a copy of mypod changing all container images to busybox\n\nkubectl debug mypod --copy-to=my-debugger --set-image=*=busybox\n\n# Create a copy of mypod adding a debug container and changing container images\n\nkubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug\n\n# Create an interactive debugging session on a node and immediately attach to it.\n# The container will run in the host namespaces and the host's filesystem will be mounted at /host\n\nkubectl debug node/mynode -it --image=busybox\n\n## What are the flags?\n\n```bash\n      --arguments-only             If specified, everything after -- will be passed to the new container as Args instead of Command.\n      --attach                     If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.\n  -c, --container string           Container name to use for debug container.\n      --copy-to string             Create a copy of the target Pod with this name.\n      --env stringToString         Environment variables to set in the container. (default [])\n  -h, --help                       help for debug\n      --image string               Container image to use for debug container.\n      --image-pull-policy string   The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.\n  -q, --quiet                      If true, suppress informational messages.\n      --replace                    When used with '--copy-to', delete the original Pod.\n      --same-node                  When used with '--copy-to', schedule the copy of target Pod on the same node.\n      --set-image stringToString   When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works. (default [])\n      --share-processes            When used with '--copy-to', enable process namespace sharing in the copy. (default true)\n  -i, --stdin                      Keep stdin open on the container(s) in the pod, even if nothing is attached.\n      --target string              When using an ephemeral container, target processes in this container name.\n  -t, --tty                        Allocate a TTY for the debugging container.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a copy of mypod changing all container images to busybox","Command":"kubectl debug mypod --copy-to=my-debugger --set-image=*=busybox","Content":"# kubectl debug\n\nCreate debugging sessions for troubleshooting workloads and nodes\n\n```bash\nkubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]\n```\n\n## What does it do?\n\nDebug cluster resources using interactive debugging containers.\n\n 'debug' provides automation for common debugging tasks for cluster objects identified by resource and name. Pods will be used by default if no resource is specified.\n\n The action taken by 'debug' varies depending on what resource is specified. Supported actions include:\n\n  *  Workload: Create a copy of an existing pod with certain attributes changed, for example changing the image tag to a new version.\n  *  Workload: Add an ephemeral container to an already running pod, for example to add debugging utilities without restarting the pod.\n  *  Node: Create a new pod that runs in the node's host namespaces and can access the node's filesystem.\n\n## Examples\n\n# Create an interactive debugging session in pod mypod and immediately attach to it.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug mypod -it --image=busybox\n\n# Create a debug container named debugger using a custom automated debugging image.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug --image=myproj/debug-tools -c debugger mypod\n\n# Create a copy of mypod adding a debug container and attach to it\n\nkubectl debug mypod -it --image=busybox --copy-to=my-debugger\n\n# Create a copy of mypod changing the command of mycontainer\n\nkubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh\n\n# Create a copy of mypod changing all container images to busybox\n\nkubectl debug mypod --copy-to=my-debugger --set-image=*=busybox\n\n# Create a copy of mypod adding a debug container and changing container images\n\nkubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug\n\n# Create an interactive debugging session on a node and immediately attach to it.\n# The container will run in the host namespaces and the host's filesystem will be mounted at /host\n\nkubectl debug node/mynode -it --image=busybox\n\n## What are the flags?\n\n```bash\n      --arguments-only             If specified, everything after -- will be passed to the new container as Args instead of Command.\n      --attach                     If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.\n  -c, --container string           Container name to use for debug container.\n      --copy-to string             Create a copy of the target Pod with this name.\n      --env stringToString         Environment variables to set in the container. (default [])\n  -h, --help                       help for debug\n      --image string               Container image to use for debug container.\n      --image-pull-policy string   The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.\n  -q, --quiet                      If true, suppress informational messages.\n      --replace                    When used with '--copy-to', delete the original Pod.\n      --same-node                  When used with '--copy-to', schedule the copy of target Pod on the same node.\n      --set-image stringToString   When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works. (default [])\n      --share-processes            When used with '--copy-to', enable process namespace sharing in the copy. (default true)\n  -i, --stdin                      Keep stdin open on the container(s) in the pod, even if nothing is attached.\n      --target string              When using an ephemeral container, target processes in this container name.\n  -t, --tty                        Allocate a TTY for the debugging container.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a copy of mypod adding a debug container and changing container images","Command":"kubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug","Content":"# kubectl debug\n\nCreate debugging sessions for troubleshooting workloads and nodes\n\n```bash\nkubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]\n```\n\n## What does it do?\n\nDebug cluster resources using interactive debugging containers.\n\n 'debug' provides automation for common debugging tasks for cluster objects identified by resource and name. Pods will be used by default if no resource is specified.\n\n The action taken by 'debug' varies depending on what resource is specified. Supported actions include:\n\n  *  Workload: Create a copy of an existing pod with certain attributes changed, for example changing the image tag to a new version.\n  *  Workload: Add an ephemeral container to an already running pod, for example to add debugging utilities without restarting the pod.\n  *  Node: Create a new pod that runs in the node's host namespaces and can access the node's filesystem.\n\n## Examples\n\n# Create an interactive debugging session in pod mypod and immediately attach to it.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug mypod -it --image=busybox\n\n# Create a debug container named debugger using a custom automated debugging image.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug --image=myproj/debug-tools -c debugger mypod\n\n# Create a copy of mypod adding a debug container and attach to it\n\nkubectl debug mypod -it --image=busybox --copy-to=my-debugger\n\n# Create a copy of mypod changing the command of mycontainer\n\nkubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh\n\n# Create a copy of mypod changing all container images to busybox\n\nkubectl debug mypod --copy-to=my-debugger --set-image=*=busybox\n\n# Create a copy of mypod adding a debug container and changing container images\n\nkubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug\n\n# Create an interactive debugging session on a node and immediately attach to it.\n# The container will run in the host namespaces and the host's filesystem will be mounted at /host\n\nkubectl debug node/mynode -it --image=busybox\n\n## What are the flags?\n\n```bash\n      --arguments-only             If specified, everything after -- will be passed to the new container as Args instead of Command.\n      --attach                     If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.\n  -c, --container string           Container name to use for debug container.\n      --copy-to string             Create a copy of the target Pod with this name.\n      --env stringToString         Environment variables to set in the container. (default [])\n  -h, --help                       help for debug\n      --image string               Container image to use for debug container.\n      --image-pull-policy string   The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.\n  -q, --quiet                      If true, suppress informational messages.\n      --replace                    When used with '--copy-to', delete the original Pod.\n      --same-node                  When used with '--copy-to', schedule the copy of target Pod on the same node.\n      --set-image stringToString   When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works. (default [])\n      --share-processes            When used with '--copy-to', enable process namespace sharing in the copy. (default true)\n  -i, --stdin                      Keep stdin open on the container(s) in the pod, even if nothing is attached.\n      --target string              When using an ephemeral container, target processes in this container name.\n  -t, --tty                        Allocate a TTY for the debugging container.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create an interactive debugging session on a node and immediately attach to it. The container will run in the host namespaces and the host's filesystem will be mounted at /host","Command":"kubectl debug node/mynode -it --image=busybox","Content":"# kubectl debug\n\nCreate debugging sessions for troubleshooting workloads and nodes\n\n```bash\nkubectl debug (POD | TYPE[[.VERSION].GROUP]/NAME) [ -- COMMAND [args...] ]\n```\n\n## What does it do?\n\nDebug cluster resources using interactive debugging containers.\n\n 'debug' provides automation for common debugging tasks for cluster objects identified by resource and name. Pods will be used by default if no resource is specified.\n\n The action taken by 'debug' varies depending on what resource is specified. Supported actions include:\n\n  *  Workload: Create a copy of an existing pod with certain attributes changed, for example changing the image tag to a new version.\n  *  Workload: Add an ephemeral container to an already running pod, for example to add debugging utilities without restarting the pod.\n  *  Node: Create a new pod that runs in the node's host namespaces and can access the node's filesystem.\n\n## Examples\n\n# Create an interactive debugging session in pod mypod and immediately attach to it.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug mypod -it --image=busybox\n\n# Create a debug container named debugger using a custom automated debugging image.\n# (requires the EphemeralContainers feature to be enabled in the cluster)\n\nkubectl debug --image=myproj/debug-tools -c debugger mypod\n\n# Create a copy of mypod adding a debug container and attach to it\n\nkubectl debug mypod -it --image=busybox --copy-to=my-debugger\n\n# Create a copy of mypod changing the command of mycontainer\n\nkubectl debug mypod -it --copy-to=my-debugger --container=mycontainer -- sh\n\n# Create a copy of mypod changing all container images to busybox\n\nkubectl debug mypod --copy-to=my-debugger --set-image=*=busybox\n\n# Create a copy of mypod adding a debug container and changing container images\n\nkubectl debug mypod -it --copy-to=my-debugger --image=debian --set-image=app=app:debug,sidecar=sidecar:debug\n\n# Create an interactive debugging session on a node and immediately attach to it.\n# The container will run in the host namespaces and the host's filesystem will be mounted at /host\n\nkubectl debug node/mynode -it --image=busybox\n\n## What are the flags?\n\n```bash\n      --arguments-only             If specified, everything after -- will be passed to the new container as Args instead of Command.\n      --attach                     If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.\n  -c, --container string           Container name to use for debug container.\n      --copy-to string             Create a copy of the target Pod with this name.\n      --env stringToString         Environment variables to set in the container. (default [])\n  -h, --help                       help for debug\n      --image string               Container image to use for debug container.\n      --image-pull-policy string   The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.\n  -q, --quiet                      If true, suppress informational messages.\n      --replace                    When used with '--copy-to', delete the original Pod.\n      --same-node                  When used with '--copy-to', schedule the copy of target Pod on the same node.\n      --set-image stringToString   When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works. (default [])\n      --share-processes            When used with '--copy-to', enable process namespace sharing in the copy. (default true)\n  -i, --stdin                      Keep stdin open on the container(s) in the pod, even if nothing is attached.\n      --target string              When using an ephemeral container, target processes in this container name.\n  -t, --tty                        Allocate a TTY for the debugging container.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete a pod using the type and name specified in pod.json","Command":"kubectl delete -f ./pod.json","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml","Command":"kubectl delete -k dir","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names","Command":"kubectl delete -f '*.json'","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete a pod based on the type and name in the JSON passed into stdin","Command":"cat pod.json | kubectl delete -f -","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete pods and services with same names \"baz\" and \"foo\"","Command":"kubectl delete pod,service baz foo","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete pods and services with label name=myLabel","Command":"kubectl delete pods,services -l name=myLabel","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete a pod with minimal delay","Command":"kubectl delete pod foo --now","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Force delete a pod on a dead node","Command":"kubectl delete pod foo --force","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Delete all pods","Command":"kubectl delete pods --all","Content":"# kubectl delete\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector\n\n```bash\nkubectl delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)])\n```\n\n## What does it do?\n\nDelete resources by file names, stdin, resources and names, or by resources and label selector.\n\n JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or resources and label selector.\n\n Some resources, such as pods, support graceful deletion. These resources define a default period before they are forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.\n\n IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those pods may result in multiple processes running on different machines using the same identification which may lead to data corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.\n\n Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right when you submit a delete, their update will be lost along with the rest of the resource.\n\n After a CustomResourceDefinition is deleted, invalidation of discovery cache may take up to 6 hours. If you don't want to wait, you might want to run \"kubectl api-resources\" to refresh the discovery cache.\n\n## Examples\n\n# Delete a pod using the type and name specified in pod.json\n\nkubectl delete -f ./pod.json\n\n# Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl delete -k dir\n\n# Delete resources from all files that end with '.json' - i.e. expand wildcard characters in file names\n\nkubectl delete -f '*.json'\n\n# Delete a pod based on the type and name in the JSON passed into stdin\n\ncat pod.json | kubectl delete -f -\n\n# Delete pods and services with same names \"baz\" and \"foo\"\n\nkubectl delete pod,service baz foo\n\n# Delete pods and services with label name=myLabel\n\nkubectl delete pods,services -l name=myLabel\n\n# Delete a pod with minimal delay\n\nkubectl delete pod foo --now\n\n# Force delete a pod on a dead node\n\nkubectl delete pod foo --force\n\n# Delete all pods\n\nkubectl delete pods --all\n\n## What are the flags?\n\n```bash\n      --all                             Delete all resources, in the namespace of the specified resource types.\n  -A, --all-namespaces                  If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-selector string           Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings                containing the resource to delete.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for delete\n      --ignore-not-found                Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n      --now                             If true, resources are signaled for immediate shutdown (same as --grace-period=1).\n  -o, --output string                   Output mode. Use \"-o name\" for shorter output (resource/name).\n      --raw string                      Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                 Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Describe a node","Command":"kubectl describe nodes kubernetes-node-emt8.c.myproject.internal","Content":"# kubectl describe\n\nShow details of a specific resource or group of resources\n\n```bash\nkubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)\n```\n\n## What does it do?\n\nShow details of a specific resource or group of resources.\n\n Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:\n\n  $ kubectl describe TYPE NAME_PREFIX\n  \n will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Describe a node\n\nkubectl describe nodes kubernetes-node-emt8.c.myproject.internal\n\n# Describe a pod\n\nkubectl describe pods/nginx\n\n# Describe a pod identified by type and name in \"pod.json\"\n\nkubectl describe -f pod.json\n\n# Describe all pods\n\nkubectl describe pods\n\n# Describe pods by label name=myLabel\n\nkubectl describe po -l name=myLabel\n\n# Describe all pods managed by the 'frontend' replication controller\n# (rc-created pods get the name of the rc as a prefix in the pod name)\n\nkubectl describe pods frontend\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces     If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --chunk-size int     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n  -f, --filename strings   Filename, directory, or URL to files containing the resource to describe\n  -h, --help               help for describe\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-events        If true, display events related to the described object. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Describe a pod","Command":"kubectl describe pods/nginx","Content":"# kubectl describe\n\nShow details of a specific resource or group of resources\n\n```bash\nkubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)\n```\n\n## What does it do?\n\nShow details of a specific resource or group of resources.\n\n Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:\n\n  $ kubectl describe TYPE NAME_PREFIX\n  \n will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Describe a node\n\nkubectl describe nodes kubernetes-node-emt8.c.myproject.internal\n\n# Describe a pod\n\nkubectl describe pods/nginx\n\n# Describe a pod identified by type and name in \"pod.json\"\n\nkubectl describe -f pod.json\n\n# Describe all pods\n\nkubectl describe pods\n\n# Describe pods by label name=myLabel\n\nkubectl describe po -l name=myLabel\n\n# Describe all pods managed by the 'frontend' replication controller\n# (rc-created pods get the name of the rc as a prefix in the pod name)\n\nkubectl describe pods frontend\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces     If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --chunk-size int     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n  -f, --filename strings   Filename, directory, or URL to files containing the resource to describe\n  -h, --help               help for describe\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-events        If true, display events related to the described object. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Describe a pod identified by type and name in \"pod.json\"","Command":"kubectl describe -f pod.json","Content":"# kubectl describe\n\nShow details of a specific resource or group of resources\n\n```bash\nkubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)\n```\n\n## What does it do?\n\nShow details of a specific resource or group of resources.\n\n Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:\n\n  $ kubectl describe TYPE NAME_PREFIX\n  \n will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Describe a node\n\nkubectl describe nodes kubernetes-node-emt8.c.myproject.internal\n\n# Describe a pod\n\nkubectl describe pods/nginx\n\n# Describe a pod identified by type and name in \"pod.json\"\n\nkubectl describe -f pod.json\n\n# Describe all pods\n\nkubectl describe pods\n\n# Describe pods by label name=myLabel\n\nkubectl describe po -l name=myLabel\n\n# Describe all pods managed by the 'frontend' replication controller\n# (rc-created pods get the name of the rc as a prefix in the pod name)\n\nkubectl describe pods frontend\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces     If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --chunk-size int     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n  -f, --filename strings   Filename, directory, or URL to files containing the resource to describe\n  -h, --help               help for describe\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-events        If true, display events related to the described object. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Describe all pods","Command":"kubectl describe pods","Content":"# kubectl describe\n\nShow details of a specific resource or group of resources\n\n```bash\nkubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)\n```\n\n## What does it do?\n\nShow details of a specific resource or group of resources.\n\n Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:\n\n  $ kubectl describe TYPE NAME_PREFIX\n  \n will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Describe a node\n\nkubectl describe nodes kubernetes-node-emt8.c.myproject.internal\n\n# Describe a pod\n\nkubectl describe pods/nginx\n\n# Describe a pod identified by type and name in \"pod.json\"\n\nkubectl describe -f pod.json\n\n# Describe all pods\n\nkubectl describe pods\n\n# Describe pods by label name=myLabel\n\nkubectl describe po -l name=myLabel\n\n# Describe all pods managed by the 'frontend' replication controller\n# (rc-created pods get the name of the rc as a prefix in the pod name)\n\nkubectl describe pods frontend\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces     If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --chunk-size int     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n  -f, --filename strings   Filename, directory, or URL to files containing the resource to describe\n  -h, --help               help for describe\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-events        If true, display events related to the described object. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Describe pods by label name=myLabel","Command":"kubectl describe po -l name=myLabel","Content":"# kubectl describe\n\nShow details of a specific resource or group of resources\n\n```bash\nkubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)\n```\n\n## What does it do?\n\nShow details of a specific resource or group of resources.\n\n Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:\n\n  $ kubectl describe TYPE NAME_PREFIX\n  \n will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Describe a node\n\nkubectl describe nodes kubernetes-node-emt8.c.myproject.internal\n\n# Describe a pod\n\nkubectl describe pods/nginx\n\n# Describe a pod identified by type and name in \"pod.json\"\n\nkubectl describe -f pod.json\n\n# Describe all pods\n\nkubectl describe pods\n\n# Describe pods by label name=myLabel\n\nkubectl describe po -l name=myLabel\n\n# Describe all pods managed by the 'frontend' replication controller\n# (rc-created pods get the name of the rc as a prefix in the pod name)\n\nkubectl describe pods frontend\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces     If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --chunk-size int     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n  -f, --filename strings   Filename, directory, or URL to files containing the resource to describe\n  -h, --help               help for describe\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-events        If true, display events related to the described object. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Describe all pods managed by the 'frontend' replication controller (rc-created pods get the name of the rc as a prefix in the pod name)","Command":"kubectl describe pods frontend","Content":"# kubectl describe\n\nShow details of a specific resource or group of resources\n\n```bash\nkubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)\n```\n\n## What does it do?\n\nShow details of a specific resource or group of resources.\n\n Print a detailed description of the selected resources, including related resources such as events or controllers. You may select a single object by name, all objects of that type, provide a name prefix, or label selector. For example:\n\n  $ kubectl describe TYPE NAME_PREFIX\n  \n will first check for an exact match on TYPE and NAME_PREFIX. If no such resource exists, it will output details for every resource that has a name prefixed with NAME_PREFIX.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Describe a node\n\nkubectl describe nodes kubernetes-node-emt8.c.myproject.internal\n\n# Describe a pod\n\nkubectl describe pods/nginx\n\n# Describe a pod identified by type and name in \"pod.json\"\n\nkubectl describe -f pod.json\n\n# Describe all pods\n\nkubectl describe pods\n\n# Describe pods by label name=myLabel\n\nkubectl describe po -l name=myLabel\n\n# Describe all pods managed by the 'frontend' replication controller\n# (rc-created pods get the name of the rc as a prefix in the pod name)\n\nkubectl describe pods frontend\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces     If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --chunk-size int     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n  -f, --filename strings   Filename, directory, or URL to files containing the resource to describe\n  -h, --help               help for describe\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-events        If true, display events related to the described object. (default true)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Diff resources included in pod.json","Command":"kubectl diff -f pod.json","Content":"# kubectl diff\n\nDiff the live version against a would-be applied version\n\n```bash\nkubectl diff -f FILENAME\n```\n\n## What does it do?\n\nDiff configurations specified by file name or stdin between the current online configuration, and the configuration as it would be if applied.\n\n The output is always YAML.\n\n KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff command. Users can use external commands with params too, example: KUBECTL_EXTERNAL_DIFF=\"colordiff -N -u\"\n\n By default, the \"diff\" command available in your path will be run with the \"-u\" (unified diff) and \"-N\" (treat absent files as empty) options.\n\n Exit status: 0 No differences were found. 1 Differences were found. \u003e1 Kubectl or diff failed with an error.\n\n Note: KUBECTL_EXTERNAL_DIFF, if used, is expected to follow that convention.\n\n## Examples\n\n# Diff resources included in pod.json\n\nkubectl diff -f pod.json\n\n# Diff file read from stdin\n\ncat service.yaml | kubectl diff -f -\n\n## What are the flags?\n\n```bash\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings              Filename, directory, or URL to files contains the configuration to diff\n      --force-conflicts               If true, server-side apply will force the changes against conflicts.\n  -h, --help                          help for diff\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n      --prune                         Include resources that would be deleted by pruning. Can be used with -l and default shows all resources would be pruned\n      --prune-allowlist stringArray   Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                   If true, apply runs in the server instead of the client.\n      --show-managed-fields           If true, include managed fields in the diff.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Diff file read from stdin","Command":"cat service.yaml | kubectl diff -f -","Content":"# kubectl diff\n\nDiff the live version against a would-be applied version\n\n```bash\nkubectl diff -f FILENAME\n```\n\n## What does it do?\n\nDiff configurations specified by file name or stdin between the current online configuration, and the configuration as it would be if applied.\n\n The output is always YAML.\n\n KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff command. Users can use external commands with params too, example: KUBECTL_EXTERNAL_DIFF=\"colordiff -N -u\"\n\n By default, the \"diff\" command available in your path will be run with the \"-u\" (unified diff) and \"-N\" (treat absent files as empty) options.\n\n Exit status: 0 No differences were found. 1 Differences were found. \u003e1 Kubectl or diff failed with an error.\n\n Note: KUBECTL_EXTERNAL_DIFF, if used, is expected to follow that convention.\n\n## Examples\n\n# Diff resources included in pod.json\n\nkubectl diff -f pod.json\n\n# Diff file read from stdin\n\ncat service.yaml | kubectl diff -f -\n\n## What are the flags?\n\n```bash\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-client-side-apply\")\n  -f, --filename strings              Filename, directory, or URL to files contains the configuration to diff\n      --force-conflicts               If true, server-side apply will force the changes against conflicts.\n  -h, --help                          help for diff\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n      --prune                         Include resources that would be deleted by pruning. Can be used with -l and default shows all resources would be pruned\n      --prune-allowlist stringArray   Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-side                   If true, apply runs in the server instead of the client.\n      --show-managed-fields           If true, include managed fields in the diff.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Drain node \"foo\", even if there are pods not managed by a replication controller, replica set, job, daemon set or stateful set on it","Command":"kubectl drain foo --force","Content":"# kubectl drain\n\nDrain node in preparation for maintenance\n\n```bash\nkubectl drain NODE\n```\n\n## What does it do?\n\nDrain node in preparation for maintenance.\n\n The given node will be marked unschedulable to prevent new pods from arriving. 'drain' evicts the pods if the API server supports https://kubernetes.io/docs/concepts/workloads/pods/disruptions/ . Otherwise, it will use normal DELETE to delete the pods. The 'drain' evicts or deletes all pods except mirror pods (which cannot be deleted through the API server).  If there are daemon set-managed pods, drain will not proceed without --ignore-daemonsets, and regardless it will not delete any daemon set-managed pods, because those pods would be immediately replaced by the daemon set controller, which ignores unschedulable markings.  If there are any pods that are neither mirror pods nor managed by a replication controller, replica set, daemon set, stateful set, or job, then drain will not delete any pods unless you use --force.  --force will also allow deletion to proceed if the managing resource of one or more pods is missing.\n\n 'drain' waits for graceful termination. You should not operate on the machine until the command completes.\n\n When you are ready to put the node back into service, use kubectl uncordon, which will make the node schedulable again.\n\n https://kubernetes.io/images/docs/kubectl_drain.svg\n\n## Examples\n\n# Drain node \"foo\", even if there are pods not managed by a replication controller, replica set, job, daemon set or stateful set on it\n\nkubectl drain foo --force\n\n# As above, but abort if there are pods not managed by a replication controller, replica set, job, daemon set or stateful set, and use a grace period of 15 minutes\n\nkubectl drain foo --grace-period=900\n\n## What are the flags?\n\n```bash\n      --chunk-size int                     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --delete-emptydir-data               Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).\n      --disable-eviction                   Force drain to use delete, even if eviction is supported. This will bypass checking PodDisruptionBudgets, use with caution.\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --force                              Continue even if there are pods that do not declare a controller.\n      --grace-period int                   Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used. (default -1)\n  -h, --help                               help for drain\n      --ignore-daemonsets                  Ignore DaemonSet-managed pods.\n      --pod-selector string                Label selector to filter pods on the node\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --skip-wait-for-delete-timeout int   If pod DeletionTimestamp older than N seconds, skip waiting for the pod.  Seconds must be greater than 0 to skip.\n      --timeout duration                   The length of time to wait before giving up, zero means infinite\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" As above, but abort if there are pods not managed by a replication controller, replica set, job, daemon set or stateful set, and use a grace period of 15 minutes","Command":"kubectl drain foo --grace-period=900","Content":"# kubectl drain\n\nDrain node in preparation for maintenance\n\n```bash\nkubectl drain NODE\n```\n\n## What does it do?\n\nDrain node in preparation for maintenance.\n\n The given node will be marked unschedulable to prevent new pods from arriving. 'drain' evicts the pods if the API server supports https://kubernetes.io/docs/concepts/workloads/pods/disruptions/ . Otherwise, it will use normal DELETE to delete the pods. The 'drain' evicts or deletes all pods except mirror pods (which cannot be deleted through the API server).  If there are daemon set-managed pods, drain will not proceed without --ignore-daemonsets, and regardless it will not delete any daemon set-managed pods, because those pods would be immediately replaced by the daemon set controller, which ignores unschedulable markings.  If there are any pods that are neither mirror pods nor managed by a replication controller, replica set, daemon set, stateful set, or job, then drain will not delete any pods unless you use --force.  --force will also allow deletion to proceed if the managing resource of one or more pods is missing.\n\n 'drain' waits for graceful termination. You should not operate on the machine until the command completes.\n\n When you are ready to put the node back into service, use kubectl uncordon, which will make the node schedulable again.\n\n https://kubernetes.io/images/docs/kubectl_drain.svg\n\n## Examples\n\n# Drain node \"foo\", even if there are pods not managed by a replication controller, replica set, job, daemon set or stateful set on it\n\nkubectl drain foo --force\n\n# As above, but abort if there are pods not managed by a replication controller, replica set, job, daemon set or stateful set, and use a grace period of 15 minutes\n\nkubectl drain foo --grace-period=900\n\n## What are the flags?\n\n```bash\n      --chunk-size int                     Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --delete-emptydir-data               Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).\n      --disable-eviction                   Force drain to use delete, even if eviction is supported. This will bypass checking PodDisruptionBudgets, use with caution.\n      --dry-run string[=\"unchanged\"]       Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --force                              Continue even if there are pods that do not declare a controller.\n      --grace-period int                   Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used. (default -1)\n  -h, --help                               help for drain\n      --ignore-daemonsets                  Ignore DaemonSet-managed pods.\n      --pod-selector string                Label selector to filter pods on the node\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --skip-wait-for-delete-timeout int   If pod DeletionTimestamp older than N seconds, skip waiting for the pod.  Seconds must be greater than 0 to skip.\n      --timeout duration                   The length of time to wait before giving up, zero means infinite\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Edit the service named 'registry'","Command":"kubectl edit svc/registry","Content":"# kubectl edit\n\nEdit a resource on the server\n\n```bash\nkubectl edit (RESOURCE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nEdit a resource from the default editor.\n\n The edit command allows you to directly edit any API resource you can retrieve via the command-line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts file names as well as command-line arguments, although the files you point to must be previously saved versions of resources.\n\n Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.\n\n The default format is YAML. To edit in JSON, specify \"-o json\".\n\n The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.\n\n In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.\n\n## Examples\n\n# Edit the service named 'registry'\n\nkubectl edit svc/registry\n\n# Use an alternative editor\n\nKUBE_EDITOR=\"nano\" kubectl edit svc/registry\n\n# Edit the job 'myjob' in JSON using the v1 API format\n\nkubectl edit job.v1.batch/myjob -o json\n\n# Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation\n\nkubectl edit deployment/mydeployment -o yaml --save-config\n\n# Edit the deployment/mydeployment's status subresource\n\nkubectl edit deployment mydeployment --subresource='status'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-edit\")\n  -f, --filename strings              Filename, directory, or URL to files to use to edit the resource\n  -h, --help                          help for edit\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --output-patch                  Output the patch if the resource is edited.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                   If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string            If specified, edit will operate on the subresource of the requested object. Must be one of [status]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]    Must be one of: strict (or true), warn, ignore (or false).\n                                      \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                      \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                      \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings          Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Use an alternative editor","Command":"KUBE_EDITOR=\"nano\" kubectl edit svc/registry","Content":"# kubectl edit\n\nEdit a resource on the server\n\n```bash\nkubectl edit (RESOURCE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nEdit a resource from the default editor.\n\n The edit command allows you to directly edit any API resource you can retrieve via the command-line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts file names as well as command-line arguments, although the files you point to must be previously saved versions of resources.\n\n Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.\n\n The default format is YAML. To edit in JSON, specify \"-o json\".\n\n The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.\n\n In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.\n\n## Examples\n\n# Edit the service named 'registry'\n\nkubectl edit svc/registry\n\n# Use an alternative editor\n\nKUBE_EDITOR=\"nano\" kubectl edit svc/registry\n\n# Edit the job 'myjob' in JSON using the v1 API format\n\nkubectl edit job.v1.batch/myjob -o json\n\n# Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation\n\nkubectl edit deployment/mydeployment -o yaml --save-config\n\n# Edit the deployment/mydeployment's status subresource\n\nkubectl edit deployment mydeployment --subresource='status'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-edit\")\n  -f, --filename strings              Filename, directory, or URL to files to use to edit the resource\n  -h, --help                          help for edit\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --output-patch                  Output the patch if the resource is edited.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                   If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string            If specified, edit will operate on the subresource of the requested object. Must be one of [status]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]    Must be one of: strict (or true), warn, ignore (or false).\n                                      \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                      \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                      \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings          Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Edit the job 'myjob' in JSON using the v1 API format","Command":"kubectl edit job.v1.batch/myjob -o json","Content":"# kubectl edit\n\nEdit a resource on the server\n\n```bash\nkubectl edit (RESOURCE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nEdit a resource from the default editor.\n\n The edit command allows you to directly edit any API resource you can retrieve via the command-line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts file names as well as command-line arguments, although the files you point to must be previously saved versions of resources.\n\n Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.\n\n The default format is YAML. To edit in JSON, specify \"-o json\".\n\n The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.\n\n In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.\n\n## Examples\n\n# Edit the service named 'registry'\n\nkubectl edit svc/registry\n\n# Use an alternative editor\n\nKUBE_EDITOR=\"nano\" kubectl edit svc/registry\n\n# Edit the job 'myjob' in JSON using the v1 API format\n\nkubectl edit job.v1.batch/myjob -o json\n\n# Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation\n\nkubectl edit deployment/mydeployment -o yaml --save-config\n\n# Edit the deployment/mydeployment's status subresource\n\nkubectl edit deployment mydeployment --subresource='status'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-edit\")\n  -f, --filename strings              Filename, directory, or URL to files to use to edit the resource\n  -h, --help                          help for edit\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --output-patch                  Output the patch if the resource is edited.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                   If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string            If specified, edit will operate on the subresource of the requested object. Must be one of [status]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]    Must be one of: strict (or true), warn, ignore (or false).\n                                      \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                      \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                      \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings          Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation","Command":"kubectl edit deployment/mydeployment -o yaml --save-config","Content":"# kubectl edit\n\nEdit a resource on the server\n\n```bash\nkubectl edit (RESOURCE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nEdit a resource from the default editor.\n\n The edit command allows you to directly edit any API resource you can retrieve via the command-line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts file names as well as command-line arguments, although the files you point to must be previously saved versions of resources.\n\n Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.\n\n The default format is YAML. To edit in JSON, specify \"-o json\".\n\n The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.\n\n In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.\n\n## Examples\n\n# Edit the service named 'registry'\n\nkubectl edit svc/registry\n\n# Use an alternative editor\n\nKUBE_EDITOR=\"nano\" kubectl edit svc/registry\n\n# Edit the job 'myjob' in JSON using the v1 API format\n\nkubectl edit job.v1.batch/myjob -o json\n\n# Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation\n\nkubectl edit deployment/mydeployment -o yaml --save-config\n\n# Edit the deployment/mydeployment's status subresource\n\nkubectl edit deployment mydeployment --subresource='status'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-edit\")\n  -f, --filename strings              Filename, directory, or URL to files to use to edit the resource\n  -h, --help                          help for edit\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --output-patch                  Output the patch if the resource is edited.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                   If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string            If specified, edit will operate on the subresource of the requested object. Must be one of [status]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]    Must be one of: strict (or true), warn, ignore (or false).\n                                      \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                      \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                      \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings          Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Edit the deployment/mydeployment's status subresource","Command":"kubectl edit deployment mydeployment --subresource='status'","Content":"# kubectl edit\n\nEdit a resource on the server\n\n```bash\nkubectl edit (RESOURCE/NAME | -f FILENAME)\n```\n\n## What does it do?\n\nEdit a resource from the default editor.\n\n The edit command allows you to directly edit any API resource you can retrieve via the command-line tools. It will open the editor defined by your KUBE_EDITOR, or EDITOR environment variables, or fall back to 'vi' for Linux or 'notepad' for Windows. You can edit multiple objects, although changes are applied one at a time. The command accepts file names as well as command-line arguments, although the files you point to must be previously saved versions of resources.\n\n Editing is done with the API version used to fetch the resource. To edit using a specific API version, fully-qualify the resource, version, and group.\n\n The default format is YAML. To edit in JSON, specify \"-o json\".\n\n The flag --windows-line-endings can be used to force Windows line endings, otherwise the default for your operating system will be used.\n\n In the event an error occurs while updating, a temporary file will be created on disk that contains your unapplied changes. The most common error when updating a resource is another editor changing the resource on the server. When this occurs, you will have to apply your changes to the newer version of the resource, or update your temporary saved copy to include the latest resource version.\n\n## Examples\n\n# Edit the service named 'registry'\n\nkubectl edit svc/registry\n\n# Use an alternative editor\n\nKUBE_EDITOR=\"nano\" kubectl edit svc/registry\n\n# Edit the job 'myjob' in JSON using the v1 API format\n\nkubectl edit job.v1.batch/myjob -o json\n\n# Edit the deployment 'mydeployment' in YAML and save the modified config in its annotation\n\nkubectl edit deployment/mydeployment -o yaml --save-config\n\n# Edit the deployment/mydeployment's status subresource\n\nkubectl edit deployment mydeployment --subresource='status'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-edit\")\n  -f, --filename strings              Filename, directory, or URL to files to use to edit the resource\n  -h, --help                          help for edit\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --output-patch                  Output the patch if the resource is edited.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                   If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string            If specified, edit will operate on the subresource of the requested object. Must be one of [status]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]    Must be one of: strict (or true), warn, ignore (or false).\n                                      \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                      \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                      \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --windows-line-endings          Defaults to the line ending native to your platform.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get output from running the 'date' command from pod mypod, using the first container by default","Command":"kubectl exec mypod -- date","Content":"# kubectl exec\n\nExecute a command in a container\n\n```bash\nkubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]\n```\n\n## What does it do?\n\nExecute a command in a container.\n\n## Examples\n\n# Get output from running the 'date' command from pod mypod, using the first container by default\n\nkubectl exec mypod -- date\n\n# Get output from running the 'date' command in ruby-container from pod mypod\n\nkubectl exec mypod -c ruby-container -- date\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl exec mypod -c ruby-container -i -t -- bash -il\n\n# List contents of /usr from the first container of pod mypod and sort by modification time\n# If the command you want to execute in the pod has any flags in common (e.g. -i),\n# you must use two dashes (--) to separate your command's flags/arguments\n# Also note, do not surround your command and its flags/arguments with quotes\n# unless that is how you would execute it normally (i.e., do ls -t /usr, not \"ls -t /usr\")\n\nkubectl exec mypod -i -t -- ls -t /usr\n\n# Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default\n\nkubectl exec deploy/mydeployment -- date\n\n# Get output from running 'date' command from the first pod of the service myservice, using the first container by default\n\nkubectl exec svc/myservice -- date\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -f, --filename strings               to use to exec into the resource\n  -h, --help                           help for exec\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get output from running the 'date' command in ruby-container from pod mypod","Command":"kubectl exec mypod -c ruby-container -- date","Content":"# kubectl exec\n\nExecute a command in a container\n\n```bash\nkubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]\n```\n\n## What does it do?\n\nExecute a command in a container.\n\n## Examples\n\n# Get output from running the 'date' command from pod mypod, using the first container by default\n\nkubectl exec mypod -- date\n\n# Get output from running the 'date' command in ruby-container from pod mypod\n\nkubectl exec mypod -c ruby-container -- date\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl exec mypod -c ruby-container -i -t -- bash -il\n\n# List contents of /usr from the first container of pod mypod and sort by modification time\n# If the command you want to execute in the pod has any flags in common (e.g. -i),\n# you must use two dashes (--) to separate your command's flags/arguments\n# Also note, do not surround your command and its flags/arguments with quotes\n# unless that is how you would execute it normally (i.e., do ls -t /usr, not \"ls -t /usr\")\n\nkubectl exec mypod -i -t -- ls -t /usr\n\n# Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default\n\nkubectl exec deploy/mydeployment -- date\n\n# Get output from running 'date' command from the first pod of the service myservice, using the first container by default\n\nkubectl exec svc/myservice -- date\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -f, --filename strings               to use to exec into the resource\n  -h, --help                           help for exec\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod and sends stdout/stderr from 'bash' back to the client","Command":"kubectl exec mypod -c ruby-container -i -t -- bash -il","Content":"# kubectl exec\n\nExecute a command in a container\n\n```bash\nkubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]\n```\n\n## What does it do?\n\nExecute a command in a container.\n\n## Examples\n\n# Get output from running the 'date' command from pod mypod, using the first container by default\n\nkubectl exec mypod -- date\n\n# Get output from running the 'date' command in ruby-container from pod mypod\n\nkubectl exec mypod -c ruby-container -- date\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl exec mypod -c ruby-container -i -t -- bash -il\n\n# List contents of /usr from the first container of pod mypod and sort by modification time\n# If the command you want to execute in the pod has any flags in common (e.g. -i),\n# you must use two dashes (--) to separate your command's flags/arguments\n# Also note, do not surround your command and its flags/arguments with quotes\n# unless that is how you would execute it normally (i.e., do ls -t /usr, not \"ls -t /usr\")\n\nkubectl exec mypod -i -t -- ls -t /usr\n\n# Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default\n\nkubectl exec deploy/mydeployment -- date\n\n# Get output from running 'date' command from the first pod of the service myservice, using the first container by default\n\nkubectl exec svc/myservice -- date\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -f, --filename strings               to use to exec into the resource\n  -h, --help                           help for exec\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List contents of /usr from the first container of pod mypod and sort by modification time If the command you want to execute in the pod has any flags in common (e.g. -i), you must use two dashes (--) to separate your command's flags/arguments Also note, do not surround your command and its flags/arguments with quotes unless that is how you would execute it normally (i.e., do ls -t /usr, not \"ls -t /usr\")","Command":"kubectl exec mypod -i -t -- ls -t /usr","Content":"# kubectl exec\n\nExecute a command in a container\n\n```bash\nkubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]\n```\n\n## What does it do?\n\nExecute a command in a container.\n\n## Examples\n\n# Get output from running the 'date' command from pod mypod, using the first container by default\n\nkubectl exec mypod -- date\n\n# Get output from running the 'date' command in ruby-container from pod mypod\n\nkubectl exec mypod -c ruby-container -- date\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl exec mypod -c ruby-container -i -t -- bash -il\n\n# List contents of /usr from the first container of pod mypod and sort by modification time\n# If the command you want to execute in the pod has any flags in common (e.g. -i),\n# you must use two dashes (--) to separate your command's flags/arguments\n# Also note, do not surround your command and its flags/arguments with quotes\n# unless that is how you would execute it normally (i.e., do ls -t /usr, not \"ls -t /usr\")\n\nkubectl exec mypod -i -t -- ls -t /usr\n\n# Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default\n\nkubectl exec deploy/mydeployment -- date\n\n# Get output from running 'date' command from the first pod of the service myservice, using the first container by default\n\nkubectl exec svc/myservice -- date\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -f, --filename strings               to use to exec into the resource\n  -h, --help                           help for exec\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default","Command":"kubectl exec deploy/mydeployment -- date","Content":"# kubectl exec\n\nExecute a command in a container\n\n```bash\nkubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]\n```\n\n## What does it do?\n\nExecute a command in a container.\n\n## Examples\n\n# Get output from running the 'date' command from pod mypod, using the first container by default\n\nkubectl exec mypod -- date\n\n# Get output from running the 'date' command in ruby-container from pod mypod\n\nkubectl exec mypod -c ruby-container -- date\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl exec mypod -c ruby-container -i -t -- bash -il\n\n# List contents of /usr from the first container of pod mypod and sort by modification time\n# If the command you want to execute in the pod has any flags in common (e.g. -i),\n# you must use two dashes (--) to separate your command's flags/arguments\n# Also note, do not surround your command and its flags/arguments with quotes\n# unless that is how you would execute it normally (i.e., do ls -t /usr, not \"ls -t /usr\")\n\nkubectl exec mypod -i -t -- ls -t /usr\n\n# Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default\n\nkubectl exec deploy/mydeployment -- date\n\n# Get output from running 'date' command from the first pod of the service myservice, using the first container by default\n\nkubectl exec svc/myservice -- date\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -f, --filename strings               to use to exec into the resource\n  -h, --help                           help for exec\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get output from running 'date' command from the first pod of the service myservice, using the first container by default","Command":"kubectl exec svc/myservice -- date","Content":"# kubectl exec\n\nExecute a command in a container\n\n```bash\nkubectl exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]\n```\n\n## What does it do?\n\nExecute a command in a container.\n\n## Examples\n\n# Get output from running the 'date' command from pod mypod, using the first container by default\n\nkubectl exec mypod -- date\n\n# Get output from running the 'date' command in ruby-container from pod mypod\n\nkubectl exec mypod -c ruby-container -- date\n\n# Switch to raw terminal mode; sends stdin to 'bash' in ruby-container from pod mypod\n# and sends stdout/stderr from 'bash' back to the client\n\nkubectl exec mypod -c ruby-container -i -t -- bash -il\n\n# List contents of /usr from the first container of pod mypod and sort by modification time\n# If the command you want to execute in the pod has any flags in common (e.g. -i),\n# you must use two dashes (--) to separate your command's flags/arguments\n# Also note, do not surround your command and its flags/arguments with quotes\n# unless that is how you would execute it normally (i.e., do ls -t /usr, not \"ls -t /usr\")\n\nkubectl exec mypod -i -t -- ls -t /usr\n\n# Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default\n\nkubectl exec deploy/mydeployment -- date\n\n# Get output from running 'date' command from the first pod of the service myservice, using the first container by default\n\nkubectl exec svc/myservice -- date\n\n## What are the flags?\n\n```bash\n  -c, --container string               Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen\n  -f, --filename strings               to use to exec into the resource\n  -h, --help                           help for exec\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n  -q, --quiet                          Only print output from the remote session\n  -i, --stdin                          Pass stdin to the container\n  -t, --tty                            Stdin is a TTY\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get the documentation of the resource and its fields","Command":"kubectl explain pods","Content":"# kubectl explain\n\nGet documentation for a resource\n\n```bash\nkubectl explain RESOURCE\n```\n\n## What does it do?\n\nList the fields for supported resources.\n\n This command describes the fields associated with each supported API resource. Fields are identified via a simple JSONPath identifier:\n\n  \u003ctype\u003e.\u003cfieldName\u003e[.\u003cfieldName\u003e]\n  \n Add the --recursive flag to display all of the fields at once without descriptions. Information about each field is retrieved from the server in OpenAPI format.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Get the documentation of the resource and its fields\n\nkubectl explain pods\n\n# Get the documentation of a specific field of a resource\n\nkubectl explain pods.spec.containers\n\n## What are the flags?\n\n```bash\n      --api-version string   Get different explanations for particular API version (API group/version)\n  -h, --help                 help for explain\n      --recursive            Print the fields of fields (Currently only 1 level deep)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Get the documentation of a specific field of a resource","Command":"kubectl explain pods.spec.containers","Content":"# kubectl explain\n\nGet documentation for a resource\n\n```bash\nkubectl explain RESOURCE\n```\n\n## What does it do?\n\nList the fields for supported resources.\n\n This command describes the fields associated with each supported API resource. Fields are identified via a simple JSONPath identifier:\n\n  \u003ctype\u003e.\u003cfieldName\u003e[.\u003cfieldName\u003e]\n  \n Add the --recursive flag to display all of the fields at once without descriptions. Information about each field is retrieved from the server in OpenAPI format.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# Get the documentation of the resource and its fields\n\nkubectl explain pods\n\n# Get the documentation of a specific field of a resource\n\nkubectl explain pods.spec.containers\n\n## What are the flags?\n\n```bash\n      --api-version string   Get different explanations for particular API version (API group/version)\n  -h, --help                 help for explain\n      --recursive            Print the fields of fields (Currently only 1 level deep)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000","Command":"kubectl expose rc nginx --port=80 --target-port=8000","Content":"# kubectl expose\n\nTake a replication controller, service, deployment or pod and expose it as a new Kubernetes service\n\n```bash\nkubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]\n```\n\n## What does it do?\n\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\n## Examples\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rc nginx --port=80 --target-port=8000\n\n# Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n\n# Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n\nkubectl expose pod valid-pod --port=444 --name=frontend\n\n# Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"\n\nkubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n\n# Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n\nkubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n\n# Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rs nginx --port=80 --target-port=8000\n\n# Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose deployment nginx --port=80 --target-port=8000\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cluster-ip string              ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-ip string             Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-expose\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to expose a service\n  -h, --help                           help for expose\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                  Labels to apply to the service created by this call.\n      --load-balancer-ip string        IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).\n      --name string                    The name for the newly created object.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string           The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string               An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --port string                    The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol string                The network protocol for the service to be created. Default is 'TCP'.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity string        If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --target-port string             Name or number for the port on the container that the service should direct traffic to. Optional.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000","Command":"kubectl expose -f nginx-controller.yaml --port=80 --target-port=8000","Content":"# kubectl expose\n\nTake a replication controller, service, deployment or pod and expose it as a new Kubernetes service\n\n```bash\nkubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]\n```\n\n## What does it do?\n\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\n## Examples\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rc nginx --port=80 --target-port=8000\n\n# Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n\n# Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n\nkubectl expose pod valid-pod --port=444 --name=frontend\n\n# Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"\n\nkubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n\n# Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n\nkubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n\n# Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rs nginx --port=80 --target-port=8000\n\n# Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose deployment nginx --port=80 --target-port=8000\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cluster-ip string              ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-ip string             Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-expose\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to expose a service\n  -h, --help                           help for expose\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                  Labels to apply to the service created by this call.\n      --load-balancer-ip string        IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).\n      --name string                    The name for the newly created object.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string           The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string               An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --port string                    The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol string                The network protocol for the service to be created. Default is 'TCP'.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity string        If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --target-port string             Name or number for the port on the container that the service should direct traffic to. Optional.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"","Command":"kubectl expose pod valid-pod --port=444 --name=frontend","Content":"# kubectl expose\n\nTake a replication controller, service, deployment or pod and expose it as a new Kubernetes service\n\n```bash\nkubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]\n```\n\n## What does it do?\n\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\n## Examples\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rc nginx --port=80 --target-port=8000\n\n# Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n\n# Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n\nkubectl expose pod valid-pod --port=444 --name=frontend\n\n# Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"\n\nkubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n\n# Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n\nkubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n\n# Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rs nginx --port=80 --target-port=8000\n\n# Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose deployment nginx --port=80 --target-port=8000\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cluster-ip string              ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-ip string             Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-expose\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to expose a service\n  -h, --help                           help for expose\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                  Labels to apply to the service created by this call.\n      --load-balancer-ip string        IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).\n      --name string                    The name for the newly created object.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string           The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string               An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --port string                    The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol string                The network protocol for the service to be created. Default is 'TCP'.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity string        If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --target-port string             Name or number for the port on the container that the service should direct traffic to. Optional.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"","Command":"kubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https","Content":"# kubectl expose\n\nTake a replication controller, service, deployment or pod and expose it as a new Kubernetes service\n\n```bash\nkubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]\n```\n\n## What does it do?\n\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\n## Examples\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rc nginx --port=80 --target-port=8000\n\n# Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n\n# Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n\nkubectl expose pod valid-pod --port=444 --name=frontend\n\n# Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"\n\nkubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n\n# Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n\nkubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n\n# Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rs nginx --port=80 --target-port=8000\n\n# Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose deployment nginx --port=80 --target-port=8000\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cluster-ip string              ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-ip string             Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-expose\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to expose a service\n  -h, --help                           help for expose\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                  Labels to apply to the service created by this call.\n      --load-balancer-ip string        IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).\n      --name string                    The name for the newly created object.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string           The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string               An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --port string                    The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol string                The network protocol for the service to be created. Default is 'TCP'.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity string        If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --target-port string             Name or number for the port on the container that the service should direct traffic to. Optional.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.","Command":"kubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream","Content":"# kubectl expose\n\nTake a replication controller, service, deployment or pod and expose it as a new Kubernetes service\n\n```bash\nkubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]\n```\n\n## What does it do?\n\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\n## Examples\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rc nginx --port=80 --target-port=8000\n\n# Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n\n# Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n\nkubectl expose pod valid-pod --port=444 --name=frontend\n\n# Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"\n\nkubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n\n# Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n\nkubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n\n# Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rs nginx --port=80 --target-port=8000\n\n# Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose deployment nginx --port=80 --target-port=8000\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cluster-ip string              ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-ip string             Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-expose\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to expose a service\n  -h, --help                           help for expose\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                  Labels to apply to the service created by this call.\n      --load-balancer-ip string        IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).\n      --name string                    The name for the newly created object.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string           The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string               An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --port string                    The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol string                The network protocol for the service to be created. Default is 'TCP'.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity string        If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --target-port string             Name or number for the port on the container that the service should direct traffic to. Optional.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000","Command":"kubectl expose rs nginx --port=80 --target-port=8000","Content":"# kubectl expose\n\nTake a replication controller, service, deployment or pod and expose it as a new Kubernetes service\n\n```bash\nkubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]\n```\n\n## What does it do?\n\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\n## Examples\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rc nginx --port=80 --target-port=8000\n\n# Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n\n# Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n\nkubectl expose pod valid-pod --port=444 --name=frontend\n\n# Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"\n\nkubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n\n# Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n\nkubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n\n# Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rs nginx --port=80 --target-port=8000\n\n# Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose deployment nginx --port=80 --target-port=8000\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cluster-ip string              ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-ip string             Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-expose\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to expose a service\n  -h, --help                           help for expose\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                  Labels to apply to the service created by this call.\n      --load-balancer-ip string        IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).\n      --name string                    The name for the newly created object.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string           The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string               An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --port string                    The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol string                The network protocol for the service to be created. Default is 'TCP'.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity string        If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --target-port string             Name or number for the port on the container that the service should direct traffic to. Optional.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000","Command":"kubectl expose deployment nginx --port=80 --target-port=8000","Content":"# kubectl expose\n\nTake a replication controller, service, deployment or pod and expose it as a new Kubernetes service\n\n```bash\nkubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP|SCTP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]\n```\n\n## What does it do?\n\nExpose a resource as a new Kubernetes service.\n\n Looks up a deployment, service, replica set, replication controller or pod by name and uses the selector for that resource as the selector for a new service on the specified port. A deployment or replica set will be exposed as a service only if its selector is convertible to a selector that service supports, i.e. when the selector contains only the matchLabels component. Note that if no port is specified via --port and the exposed resource has multiple ports, all will be re-used by the new service. Also if no labels are specified, the new service will re-use the labels from the resource it exposes.\n\n Possible resources include (case insensitive):\n\n pod (po), service (svc), replicationcontroller (rc), deployment (deploy), replicaset (rs)\n\n## Examples\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rc nginx --port=80 --target-port=8000\n\n# Create a service for a replication controller identified by type and name specified in \"nginx-controller.yaml\", which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose -f nginx-controller.yaml --port=80 --target-port=8000\n\n# Create a service for a pod valid-pod, which serves on port 444 with the name \"frontend\"\n\nkubectl expose pod valid-pod --port=444 --name=frontend\n\n# Create a second service based on the above service, exposing the container port 8443 as port 443 with the name \"nginx-https\"\n\nkubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https\n\n# Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.\n\nkubectl expose rc streamer --port=4100 --protocol=UDP --name=video-stream\n\n# Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose rs nginx --port=80 --target-port=8000\n\n# Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000\n\nkubectl expose deployment nginx --port=80 --target-port=8000\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cluster-ip string              ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --external-ip string             Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-expose\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to expose a service\n  -h, --help                           help for expose\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                  Labels to apply to the service created by this call.\n      --load-balancer-ip string        IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).\n      --name string                    The name for the newly created object.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string           The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string               An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --port string                    The port that the service should serve on. Copied from the resource being exposed, if unspecified\n      --protocol string                The network protocol for the service to be created. Default is 'TCP'.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                    If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --selector string                A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)\n      --session-affinity string        If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --target-port string             Name or number for the port on the container that the service should direct traffic to. Optional.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List all pods in ps output format","Command":"kubectl get pods","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List all pods in ps output format with more information (such as node name)","Command":"kubectl get pods -o wide","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List a single replication controller with specified NAME in ps output format","Command":"kubectl get replicationcontroller web","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group","Command":"kubectl get deployments.v1.apps -o json","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List a single pod in JSON output format","Command":"kubectl get -o json pod web-pod-13je7","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List a pod identified by type and name specified in \"pod.yaml\" in JSON output format","Command":"kubectl get -f pod.yaml -o json","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml","Command":"kubectl get -k dir/","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Return only the phase value of the specified pod","Command":"kubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List resource information in custom columns","Command":"kubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List all replication controllers and services together in ps output format","Command":"kubectl get rc,services","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List one or more resources by their type and names","Command":"kubectl get rc/web service/frontend pods/web-pod-13je7","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List status subresource for a single pod.","Command":"kubectl get pod web-pod-13je7 --subresource status","Content":"# kubectl get\n\nDisplay one or many resources\n\n```bash\nkubectl get [(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]\n```\n\n## What does it do?\n\nDisplay one or many resources.\n\n Prints a table of the most important information about the specified resources. You can filter the list using a label selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current namespace unless you pass --all-namespaces.\n\n By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter the attributes of the fetched resources.\n\nUse \"kubectl api-resources\" for a complete list of supported resources.\n\n## Examples\n\n# List all pods in ps output format\n\nkubectl get pods\n\n# List all pods in ps output format with more information (such as node name)\n\nkubectl get pods -o wide\n\n# List a single replication controller with specified NAME in ps output format\n\nkubectl get replicationcontroller web\n\n# List deployments in JSON output format, in the \"v1\" version of the \"apps\" API group\n\nkubectl get deployments.v1.apps -o json\n\n# List a single pod in JSON output format\n\nkubectl get -o json pod web-pod-13je7\n\n# List a pod identified by type and name specified in \"pod.yaml\" in JSON output format\n\nkubectl get -f pod.yaml -o json\n\n# List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml\n\nkubectl get -k dir/\n\n# Return only the phase value of the specified pod\n\nkubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}\n\n# List resource information in custom columns\n\nkubectl get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image\n\n# List all replication controllers and services together in ps output format\n\nkubectl get rc,services\n\n# List one or more resources by their type and names\n\nkubectl get rc/web service/frontend pods/web-pod-13je7\n\n# List status subresource for a single pod.\n\nkubectl get pod web-pod-13je7 --subresource status\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --chunk-size int                Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future. (default 500)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for get\n      --ignore-not-found              If the requested object does not exist the command will return exit code 0.\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -L, --label-columns strings         Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...\n      --no-headers                    When using the default or custom-column output format, don't print headers (default print headers).\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].\n      --output-watch-events           Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.\n      --raw string                    Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --server-print                  If true, have the server return the appropriate table output. Supports extension APIs and CRDs. (default true)\n      --show-kind                     If present, list the resource type for the requested object(s).\n      --show-labels                   When printing, show all labels as the last column (default hide labels column)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --sort-by string                If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.\n      --subresource string            If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n  -w, --watch                         After listing/getting the requested object, watch for changes.\n      --watch-only                    Watch for changes to the requested object(s), without listing/getting first.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Build the current working directory","Command":"kubectl kustomize","Content":"# kubectl kustomize\n\nBuild a kustomization target from a directory or URL.\n\n```bash\nkubectl kustomize DIR [flags]\n```\n\n## What does it do?\n\nBuild a set of KRM resources using a 'kustomization.yaml' file. The DIR argument must be a path to a directory containing 'kustomization.yaml', or a git repository URL with a path suffix specifying same with respect to the repository root. If DIR is omitted, '.' is assumed.\n\n## Examples\n\n# Build the current working directory\n\nkubectl kustomize\n\n# Build some shared configuration directory\n\nkubectl kustomize /home/config/production\n\n# Build from github\n\nkubectl kustomize https://github.com/kubernetes-sigs/kustomize.git/examples/helloWorld?ref=v1.0.6\n\n## What are the flags?\n\n```bash\n      --as-current-user          use the uid and gid of the command executor to run the function in the container\n      --enable-alpha-plugins     enable kustomize plugins\n      --enable-helm              Enable use of the Helm chart inflator generator.\n  -e, --env stringArray          a list of environment variables to be used by functions\n      --helm-command string      helm command (path to executable) (default \"helm\")\n  -h, --help                     help for kustomize\n      --load-restrictor string   if set to 'LoadRestrictionsNone', local kustomizations may load files from outside their root. This does, however, break the relocatability of the kustomization. (default \"LoadRestrictionsRootOnly\")\n      --mount stringArray        a list of storage options read from the filesystem\n      --network                  enable network access for functions that declare it\n      --network-name string      the docker network to run the container in (default \"bridge\")\n  -o, --output string            If specified, write output to this path.\n      --reorder string           Reorder the resources just before output. Use 'legacy' to apply a legacy reordering (Namespaces first, Webhooks last, etc). Use 'none' to suppress a final reordering. (default \"legacy\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Build some shared configuration directory","Command":"kubectl kustomize /home/config/production","Content":"# kubectl kustomize\n\nBuild a kustomization target from a directory or URL.\n\n```bash\nkubectl kustomize DIR [flags]\n```\n\n## What does it do?\n\nBuild a set of KRM resources using a 'kustomization.yaml' file. The DIR argument must be a path to a directory containing 'kustomization.yaml', or a git repository URL with a path suffix specifying same with respect to the repository root. If DIR is omitted, '.' is assumed.\n\n## Examples\n\n# Build the current working directory\n\nkubectl kustomize\n\n# Build some shared configuration directory\n\nkubectl kustomize /home/config/production\n\n# Build from github\n\nkubectl kustomize https://github.com/kubernetes-sigs/kustomize.git/examples/helloWorld?ref=v1.0.6\n\n## What are the flags?\n\n```bash\n      --as-current-user          use the uid and gid of the command executor to run the function in the container\n      --enable-alpha-plugins     enable kustomize plugins\n      --enable-helm              Enable use of the Helm chart inflator generator.\n  -e, --env stringArray          a list of environment variables to be used by functions\n      --helm-command string      helm command (path to executable) (default \"helm\")\n  -h, --help                     help for kustomize\n      --load-restrictor string   if set to 'LoadRestrictionsNone', local kustomizations may load files from outside their root. This does, however, break the relocatability of the kustomization. (default \"LoadRestrictionsRootOnly\")\n      --mount stringArray        a list of storage options read from the filesystem\n      --network                  enable network access for functions that declare it\n      --network-name string      the docker network to run the container in (default \"bridge\")\n  -o, --output string            If specified, write output to this path.\n      --reorder string           Reorder the resources just before output. Use 'legacy' to apply a legacy reordering (Namespaces first, Webhooks last, etc). Use 'none' to suppress a final reordering. (default \"legacy\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Build from github","Command":"kubectl kustomize https://github.com/kubernetes-sigs/kustomize.git/examples/helloWorld?ref=v1.0.6","Content":"# kubectl kustomize\n\nBuild a kustomization target from a directory or URL.\n\n```bash\nkubectl kustomize DIR [flags]\n```\n\n## What does it do?\n\nBuild a set of KRM resources using a 'kustomization.yaml' file. The DIR argument must be a path to a directory containing 'kustomization.yaml', or a git repository URL with a path suffix specifying same with respect to the repository root. If DIR is omitted, '.' is assumed.\n\n## Examples\n\n# Build the current working directory\n\nkubectl kustomize\n\n# Build some shared configuration directory\n\nkubectl kustomize /home/config/production\n\n# Build from github\n\nkubectl kustomize https://github.com/kubernetes-sigs/kustomize.git/examples/helloWorld?ref=v1.0.6\n\n## What are the flags?\n\n```bash\n      --as-current-user          use the uid and gid of the command executor to run the function in the container\n      --enable-alpha-plugins     enable kustomize plugins\n      --enable-helm              Enable use of the Helm chart inflator generator.\n  -e, --env stringArray          a list of environment variables to be used by functions\n      --helm-command string      helm command (path to executable) (default \"helm\")\n  -h, --help                     help for kustomize\n      --load-restrictor string   if set to 'LoadRestrictionsNone', local kustomizations may load files from outside their root. This does, however, break the relocatability of the kustomization. (default \"LoadRestrictionsRootOnly\")\n      --mount stringArray        a list of storage options read from the filesystem\n      --network                  enable network access for functions that declare it\n      --network-name string      the docker network to run the container in (default \"bridge\")\n  -o, --output string            If specified, write output to this path.\n      --reorder string           Reorder the resources just before output. Use 'legacy' to apply a legacy reordering (Namespaces first, Webhooks last, etc). Use 'none' to suppress a final reordering. (default \"legacy\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update pod 'foo' with the label 'unhealthy' and the value 'true'","Command":"kubectl label pods foo unhealthy=true","Content":"# kubectl label\n\nUpdate the labels on a resource\n\n```bash\nkubectl label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the labels on a resource.\n\n  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.\n  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.\n\n## Examples\n\n# Update pod 'foo' with the label 'unhealthy' and the value 'true'\n\nkubectl label pods foo unhealthy=true\n\n# Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value\n\nkubectl label --overwrite pods foo status=unhealthy\n\n# Update all pods in the namespace\n\nkubectl label pods --all status=unhealthy\n\n# Update a pod identified by the type and name in \"pod.json\"\n\nkubectl label -f pod.json status=unhealthy\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl label pods foo status=unhealthy --resource-version=1\n\n# Update pod 'foo' by removing a label named 'bar' if it exists\n# Does not require the --overwrite flag\n\nkubectl label pods foo bar-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-label\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the labels\n  -h, --help                           help for label\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the labels for a given resource.\n      --local                          If true, label will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value","Command":"kubectl label --overwrite pods foo status=unhealthy","Content":"# kubectl label\n\nUpdate the labels on a resource\n\n```bash\nkubectl label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the labels on a resource.\n\n  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.\n  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.\n\n## Examples\n\n# Update pod 'foo' with the label 'unhealthy' and the value 'true'\n\nkubectl label pods foo unhealthy=true\n\n# Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value\n\nkubectl label --overwrite pods foo status=unhealthy\n\n# Update all pods in the namespace\n\nkubectl label pods --all status=unhealthy\n\n# Update a pod identified by the type and name in \"pod.json\"\n\nkubectl label -f pod.json status=unhealthy\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl label pods foo status=unhealthy --resource-version=1\n\n# Update pod 'foo' by removing a label named 'bar' if it exists\n# Does not require the --overwrite flag\n\nkubectl label pods foo bar-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-label\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the labels\n  -h, --help                           help for label\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the labels for a given resource.\n      --local                          If true, label will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update all pods in the namespace","Command":"kubectl label pods --all status=unhealthy","Content":"# kubectl label\n\nUpdate the labels on a resource\n\n```bash\nkubectl label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the labels on a resource.\n\n  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.\n  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.\n\n## Examples\n\n# Update pod 'foo' with the label 'unhealthy' and the value 'true'\n\nkubectl label pods foo unhealthy=true\n\n# Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value\n\nkubectl label --overwrite pods foo status=unhealthy\n\n# Update all pods in the namespace\n\nkubectl label pods --all status=unhealthy\n\n# Update a pod identified by the type and name in \"pod.json\"\n\nkubectl label -f pod.json status=unhealthy\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl label pods foo status=unhealthy --resource-version=1\n\n# Update pod 'foo' by removing a label named 'bar' if it exists\n# Does not require the --overwrite flag\n\nkubectl label pods foo bar-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-label\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the labels\n  -h, --help                           help for label\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the labels for a given resource.\n      --local                          If true, label will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update a pod identified by the type and name in \"pod.json\"","Command":"kubectl label -f pod.json status=unhealthy","Content":"# kubectl label\n\nUpdate the labels on a resource\n\n```bash\nkubectl label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the labels on a resource.\n\n  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.\n  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.\n\n## Examples\n\n# Update pod 'foo' with the label 'unhealthy' and the value 'true'\n\nkubectl label pods foo unhealthy=true\n\n# Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value\n\nkubectl label --overwrite pods foo status=unhealthy\n\n# Update all pods in the namespace\n\nkubectl label pods --all status=unhealthy\n\n# Update a pod identified by the type and name in \"pod.json\"\n\nkubectl label -f pod.json status=unhealthy\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl label pods foo status=unhealthy --resource-version=1\n\n# Update pod 'foo' by removing a label named 'bar' if it exists\n# Does not require the --overwrite flag\n\nkubectl label pods foo bar-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-label\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the labels\n  -h, --help                           help for label\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the labels for a given resource.\n      --local                          If true, label will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update pod 'foo' only if the resource is unchanged from version 1","Command":"kubectl label pods foo status=unhealthy --resource-version=1","Content":"# kubectl label\n\nUpdate the labels on a resource\n\n```bash\nkubectl label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the labels on a resource.\n\n  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.\n  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.\n\n## Examples\n\n# Update pod 'foo' with the label 'unhealthy' and the value 'true'\n\nkubectl label pods foo unhealthy=true\n\n# Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value\n\nkubectl label --overwrite pods foo status=unhealthy\n\n# Update all pods in the namespace\n\nkubectl label pods --all status=unhealthy\n\n# Update a pod identified by the type and name in \"pod.json\"\n\nkubectl label -f pod.json status=unhealthy\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl label pods foo status=unhealthy --resource-version=1\n\n# Update pod 'foo' by removing a label named 'bar' if it exists\n# Does not require the --overwrite flag\n\nkubectl label pods foo bar-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-label\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the labels\n  -h, --help                           help for label\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the labels for a given resource.\n      --local                          If true, label will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update pod 'foo' by removing a label named 'bar' if it exists Does not require the --overwrite flag","Command":"kubectl label pods foo bar-","Content":"# kubectl label\n\nUpdate the labels on a resource\n\n```bash\nkubectl label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]\n```\n\n## What does it do?\n\nUpdate the labels on a resource.\n\n  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.\n  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.\n\n## Examples\n\n# Update pod 'foo' with the label 'unhealthy' and the value 'true'\n\nkubectl label pods foo unhealthy=true\n\n# Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value\n\nkubectl label --overwrite pods foo status=unhealthy\n\n# Update all pods in the namespace\n\nkubectl label pods --all status=unhealthy\n\n# Update a pod identified by the type and name in \"pod.json\"\n\nkubectl label -f pod.json status=unhealthy\n\n# Update pod 'foo' only if the resource is unchanged from version 1\n\nkubectl label pods foo status=unhealthy --resource-version=1\n\n# Update pod 'foo' by removing a label named 'bar' if it exists\n# Does not require the --overwrite flag\n\nkubectl label pods foo bar-\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n  -A, --all-namespaces                 If true, check the specified action in all namespaces.\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-label\")\n      --field-selector string          Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update the labels\n  -h, --help                           help for label\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the labels for a given resource.\n      --local                          If true, label will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resource-version string        If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Return snapshot logs from pod nginx with only one container","Command":"kubectl logs nginx","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Return snapshot logs from pod nginx with multi containers","Command":"kubectl logs nginx --all-containers=true","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Return snapshot logs from all containers in pods defined by label app=nginx","Command":"kubectl logs -l app=nginx --all-containers=true","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Return snapshot of previous terminated ruby container logs from pod web-1","Command":"kubectl logs -p -c ruby web-1","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Begin streaming the logs of the ruby container in pod web-1","Command":"kubectl logs -f -c ruby web-1","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Begin streaming the logs from all containers in pods defined by label app=nginx","Command":"kubectl logs -f -l app=nginx --all-containers=true","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Display only the most recent 20 lines of output in pod nginx","Command":"kubectl logs --tail=20 nginx","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Show all logs from pod nginx written in the last hour","Command":"kubectl logs --since=1h nginx","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Show logs from a kubelet with an expired serving certificate","Command":"kubectl logs --insecure-skip-tls-verify-backend nginx","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Return snapshot logs from first container of a job named hello","Command":"kubectl logs job/hello","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Return snapshot logs from container nginx-1 of a deployment named nginx","Command":"kubectl logs deployment/nginx -c nginx-1","Content":"# kubectl logs\n\nPrint the logs for a container in a pod\n\n```bash\nkubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]\n```\n\n## What does it do?\n\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\n## Examples\n\n# Return snapshot logs from pod nginx with only one container\n\nkubectl logs nginx\n\n# Return snapshot logs from pod nginx with multi containers\n\nkubectl logs nginx --all-containers=true\n\n# Return snapshot logs from all containers in pods defined by label app=nginx\n\nkubectl logs -l app=nginx --all-containers=true\n\n# Return snapshot of previous terminated ruby container logs from pod web-1\n\nkubectl logs -p -c ruby web-1\n\n# Begin streaming the logs of the ruby container in pod web-1\n\nkubectl logs -f -c ruby web-1\n\n# Begin streaming the logs from all containers in pods defined by label app=nginx\n\nkubectl logs -f -l app=nginx --all-containers=true\n\n# Display only the most recent 20 lines of output in pod nginx\n\nkubectl logs --tail=20 nginx\n\n# Show all logs from pod nginx written in the last hour\n\nkubectl logs --since=1h nginx\n\n# Show logs from a kubelet with an expired serving certificate\n\nkubectl logs --insecure-skip-tls-verify-backend nginx\n\n# Return snapshot logs from first container of a job named hello\n\nkubectl logs job/hello\n\n# Return snapshot logs from container nginx-1 of a deployment named nginx\n\nkubectl logs deployment/nginx -c nginx-1\n\n## What are the flags?\n\n```bash\n      --all-containers                     Get all containers' logs in the pod(s).\n  -c, --container string                   Print the logs of this container\n  -f, --follow                             Specify if the logs should be streamed.\n  -h, --help                               help for logs\n      --ignore-errors                      If watching / following pod logs, allow for any errors that occur to be non-fatal\n      --insecure-skip-tls-verify-backend   Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.\n      --limit-bytes int                    Maximum bytes of logs to return. Defaults to no limit.\n      --max-log-requests int               Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5)\n      --pod-running-timeout duration       The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s)\n      --prefix                             Prefix each log line with the log source (pod name and container name)\n  -p, --previous                           If true, print the logs for the previous instance of the container in a pod if it exists.\n  -l, --selector string                    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --since duration                     Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.\n      --since-time string                  Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.\n      --tail int                           Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1)\n      --timestamps                         Include timestamps on each line in the log output\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print flags inherited by all commands","Command":"kubectl options","Content":"# kubectl options\n\nPrint the list of flags inherited by all commands\n\n```bash\nkubectl options [flags]\n```\n\n## What does it do?\n\nPrint the list of flags inherited by all commands\n\n## Examples\n\n# Print flags inherited by all commands\n\nkubectl options\n\n## What are the flags?\n\n```bash\n  -h, --help   help for options\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Partially update a node using a strategic merge patch, specifying the patch as JSON","Command":"kubectl patch node k8s-node-1 -p '{\"spec\":{\"unschedulable\":true}}'","Content":"# kubectl patch\n\nUpdate fields of a resource\n\n```bash\nkubectl patch (-f FILENAME | TYPE NAME) [-p PATCH|--patch-file FILE]\n```\n\n## What does it do?\n\nUpdate fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Partially update a node using a strategic merge patch, specifying the patch as JSON\n\nkubectl patch node k8s-node-1 -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Partially update a node using a strategic merge patch, specifying the patch as YAML\n\nkubectl patch node k8s-node-1 -p $'spec:\\n unschedulable: true'\n\n# Partially update a node identified by the type and name specified in \"node.json\" using strategic merge patch\n\nkubectl patch -f node.json -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Update a container's image; spec.containers[*].name is required because it's a merge key\n\nkubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\",\"image\":\"new image\"}]}}'\n\n# Update a container's image using a JSON patch with positional arrays\n\nkubectl patch pod valid-pod --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \"value\":\"new image\"}]'\n\n# Update a deployment's replicas through the scale subresource using a merge patch.\n\nkubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{\"spec\":{\"replicas\":2}}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-patch\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update\n  -h, --help                           help for patch\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, patch will operate on the content of the file, not the server-side resource.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -p, --patch string                   The patch to be applied to the resource JSON file.\n      --patch-file string              A file containing a patch to be applied to the resource.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string             If specified, patch will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of patch being provided; one of [json merge strategic] (default \"strategic\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Partially update a node using a strategic merge patch, specifying the patch as YAML","Command":"kubectl patch node k8s-node-1 -p $'spec:\\n unschedulable: true'","Content":"# kubectl patch\n\nUpdate fields of a resource\n\n```bash\nkubectl patch (-f FILENAME | TYPE NAME) [-p PATCH|--patch-file FILE]\n```\n\n## What does it do?\n\nUpdate fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Partially update a node using a strategic merge patch, specifying the patch as JSON\n\nkubectl patch node k8s-node-1 -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Partially update a node using a strategic merge patch, specifying the patch as YAML\n\nkubectl patch node k8s-node-1 -p $'spec:\\n unschedulable: true'\n\n# Partially update a node identified by the type and name specified in \"node.json\" using strategic merge patch\n\nkubectl patch -f node.json -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Update a container's image; spec.containers[*].name is required because it's a merge key\n\nkubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\",\"image\":\"new image\"}]}}'\n\n# Update a container's image using a JSON patch with positional arrays\n\nkubectl patch pod valid-pod --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \"value\":\"new image\"}]'\n\n# Update a deployment's replicas through the scale subresource using a merge patch.\n\nkubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{\"spec\":{\"replicas\":2}}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-patch\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update\n  -h, --help                           help for patch\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, patch will operate on the content of the file, not the server-side resource.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -p, --patch string                   The patch to be applied to the resource JSON file.\n      --patch-file string              A file containing a patch to be applied to the resource.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string             If specified, patch will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of patch being provided; one of [json merge strategic] (default \"strategic\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Partially update a node identified by the type and name specified in \"node.json\" using strategic merge patch","Command":"kubectl patch -f node.json -p '{\"spec\":{\"unschedulable\":true}}'","Content":"# kubectl patch\n\nUpdate fields of a resource\n\n```bash\nkubectl patch (-f FILENAME | TYPE NAME) [-p PATCH|--patch-file FILE]\n```\n\n## What does it do?\n\nUpdate fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Partially update a node using a strategic merge patch, specifying the patch as JSON\n\nkubectl patch node k8s-node-1 -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Partially update a node using a strategic merge patch, specifying the patch as YAML\n\nkubectl patch node k8s-node-1 -p $'spec:\\n unschedulable: true'\n\n# Partially update a node identified by the type and name specified in \"node.json\" using strategic merge patch\n\nkubectl patch -f node.json -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Update a container's image; spec.containers[*].name is required because it's a merge key\n\nkubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\",\"image\":\"new image\"}]}}'\n\n# Update a container's image using a JSON patch with positional arrays\n\nkubectl patch pod valid-pod --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \"value\":\"new image\"}]'\n\n# Update a deployment's replicas through the scale subresource using a merge patch.\n\nkubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{\"spec\":{\"replicas\":2}}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-patch\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update\n  -h, --help                           help for patch\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, patch will operate on the content of the file, not the server-side resource.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -p, --patch string                   The patch to be applied to the resource JSON file.\n      --patch-file string              A file containing a patch to be applied to the resource.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string             If specified, patch will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of patch being provided; one of [json merge strategic] (default \"strategic\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update a container's image; spec.containers[*].name is required because it's a merge key","Command":"kubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\",\"image\":\"new image\"}]}}'","Content":"# kubectl patch\n\nUpdate fields of a resource\n\n```bash\nkubectl patch (-f FILENAME | TYPE NAME) [-p PATCH|--patch-file FILE]\n```\n\n## What does it do?\n\nUpdate fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Partially update a node using a strategic merge patch, specifying the patch as JSON\n\nkubectl patch node k8s-node-1 -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Partially update a node using a strategic merge patch, specifying the patch as YAML\n\nkubectl patch node k8s-node-1 -p $'spec:\\n unschedulable: true'\n\n# Partially update a node identified by the type and name specified in \"node.json\" using strategic merge patch\n\nkubectl patch -f node.json -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Update a container's image; spec.containers[*].name is required because it's a merge key\n\nkubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\",\"image\":\"new image\"}]}}'\n\n# Update a container's image using a JSON patch with positional arrays\n\nkubectl patch pod valid-pod --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \"value\":\"new image\"}]'\n\n# Update a deployment's replicas through the scale subresource using a merge patch.\n\nkubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{\"spec\":{\"replicas\":2}}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-patch\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update\n  -h, --help                           help for patch\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, patch will operate on the content of the file, not the server-side resource.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -p, --patch string                   The patch to be applied to the resource JSON file.\n      --patch-file string              A file containing a patch to be applied to the resource.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string             If specified, patch will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of patch being provided; one of [json merge strategic] (default \"strategic\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update a container's image using a JSON patch with positional arrays","Command":"kubectl patch pod valid-pod --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \"value\":\"new image\"}]'","Content":"# kubectl patch\n\nUpdate fields of a resource\n\n```bash\nkubectl patch (-f FILENAME | TYPE NAME) [-p PATCH|--patch-file FILE]\n```\n\n## What does it do?\n\nUpdate fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Partially update a node using a strategic merge patch, specifying the patch as JSON\n\nkubectl patch node k8s-node-1 -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Partially update a node using a strategic merge patch, specifying the patch as YAML\n\nkubectl patch node k8s-node-1 -p $'spec:\\n unschedulable: true'\n\n# Partially update a node identified by the type and name specified in \"node.json\" using strategic merge patch\n\nkubectl patch -f node.json -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Update a container's image; spec.containers[*].name is required because it's a merge key\n\nkubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\",\"image\":\"new image\"}]}}'\n\n# Update a container's image using a JSON patch with positional arrays\n\nkubectl patch pod valid-pod --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \"value\":\"new image\"}]'\n\n# Update a deployment's replicas through the scale subresource using a merge patch.\n\nkubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{\"spec\":{\"replicas\":2}}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-patch\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update\n  -h, --help                           help for patch\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, patch will operate on the content of the file, not the server-side resource.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -p, --patch string                   The patch to be applied to the resource JSON file.\n      --patch-file string              A file containing a patch to be applied to the resource.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string             If specified, patch will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of patch being provided; one of [json merge strategic] (default \"strategic\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update a deployment's replicas through the scale subresource using a merge patch.","Command":"kubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{\"spec\":{\"replicas\":2}}'","Content":"# kubectl patch\n\nUpdate fields of a resource\n\n```bash\nkubectl patch (-f FILENAME | TYPE NAME) [-p PATCH|--patch-file FILE]\n```\n\n## What does it do?\n\nUpdate fields of a resource using strategic merge patch, a JSON merge patch, or a JSON patch.\n\n JSON and YAML formats are accepted.\n\n## Examples\n\n# Partially update a node using a strategic merge patch, specifying the patch as JSON\n\nkubectl patch node k8s-node-1 -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Partially update a node using a strategic merge patch, specifying the patch as YAML\n\nkubectl patch node k8s-node-1 -p $'spec:\\n unschedulable: true'\n\n# Partially update a node identified by the type and name specified in \"node.json\" using strategic merge patch\n\nkubectl patch -f node.json -p '{\"spec\":{\"unschedulable\":true}}'\n\n# Update a container's image; spec.containers[*].name is required because it's a merge key\n\nkubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\",\"image\":\"new image\"}]}}'\n\n# Update a container's image using a JSON patch with positional arrays\n\nkubectl patch pod valid-pod --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/containers/0/image\", \"value\":\"new image\"}]'\n\n# Update a deployment's replicas through the scale subresource using a merge patch.\n\nkubectl patch deployment nginx-deployment --subresource='scale' --type='merge' -p '{\"spec\":{\"replicas\":2}}'\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-patch\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to update\n  -h, --help                           help for patch\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, patch will operate on the content of the file, not the server-side resource.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -p, --patch string                   The patch to be applied to the resource JSON file.\n      --patch-file string              A file containing a patch to be applied to the resource.\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string             If specified, patch will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --type string                    The type of patch being provided; one of [json merge strategic] (default \"strategic\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" List all available plugins","Command":"kubectl plugin list","Content":"# kubectl plugin list\n\nList all visible plugin executables on a user's PATH\n\n```bash\nkubectl plugin list [flags]\n```\n\n## What does it do?\n\nList all available plugin files on a user's PATH.\n\n Available plugin files are those that are: - executable - anywhere on the user's PATH - begin with \"kubectl-\"\n\n## Examples\n\n# List all available plugins\n\nkubectl plugin list\n\n## What are the flags?\n\n```bash\n  -h, --help        help for list\n      --name-only   If true, display only the binary name of each plugin, rather than its full path\n```\n\n## SEE ALSO\n\n* kubectl plugin - Provides utilities for interacting with plugins\n"},{"Description":" Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod","Command":"kubectl port-forward pod/mypod 5000 6000","Content":"# kubectl port-forward\n\nForward one or more local ports to a pod\n\n```bash\nkubectl port-forward TYPE/NAME [options] [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]\n```\n\n## What does it do?\n\nForward one or more local ports to a pod.\n\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n\n If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and a rerun of the command is needed to resume forwarding.\n\n## Examples\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod\n\nkubectl port-forward pod/mypod 5000 6000\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n\nkubectl port-forward deployment/mydeployment 5000 6000\n\n# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod 8888:5000\n\n# Listen on port 8888 on all addresses, forwarding to 5000 in the pod\n\nkubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000\n\n# Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod\n\nkubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000\n\n# Listen on a random port locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod :5000\n\n## What are the flags?\n\n```bash\n      --address strings                Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind. (default [localhost])\n  -h, --help                           help for port-forward\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment","Command":"kubectl port-forward deployment/mydeployment 5000 6000","Content":"# kubectl port-forward\n\nForward one or more local ports to a pod\n\n```bash\nkubectl port-forward TYPE/NAME [options] [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]\n```\n\n## What does it do?\n\nForward one or more local ports to a pod.\n\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n\n If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and a rerun of the command is needed to resume forwarding.\n\n## Examples\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod\n\nkubectl port-forward pod/mypod 5000 6000\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n\nkubectl port-forward deployment/mydeployment 5000 6000\n\n# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod 8888:5000\n\n# Listen on port 8888 on all addresses, forwarding to 5000 in the pod\n\nkubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000\n\n# Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod\n\nkubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000\n\n# Listen on a random port locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod :5000\n\n## What are the flags?\n\n```bash\n      --address strings                Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind. (default [localhost])\n  -h, --help                           help for port-forward\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service","Command":"kubectl port-forward service/myservice 8443:https","Content":"# kubectl port-forward\n\nForward one or more local ports to a pod\n\n```bash\nkubectl port-forward TYPE/NAME [options] [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]\n```\n\n## What does it do?\n\nForward one or more local ports to a pod.\n\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n\n If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and a rerun of the command is needed to resume forwarding.\n\n## Examples\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod\n\nkubectl port-forward pod/mypod 5000 6000\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n\nkubectl port-forward deployment/mydeployment 5000 6000\n\n# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod 8888:5000\n\n# Listen on port 8888 on all addresses, forwarding to 5000 in the pod\n\nkubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000\n\n# Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod\n\nkubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000\n\n# Listen on a random port locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod :5000\n\n## What are the flags?\n\n```bash\n      --address strings                Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind. (default [localhost])\n  -h, --help                           help for port-forward\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Listen on port 8888 locally, forwarding to 5000 in the pod","Command":"kubectl port-forward pod/mypod 8888:5000","Content":"# kubectl port-forward\n\nForward one or more local ports to a pod\n\n```bash\nkubectl port-forward TYPE/NAME [options] [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]\n```\n\n## What does it do?\n\nForward one or more local ports to a pod.\n\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n\n If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and a rerun of the command is needed to resume forwarding.\n\n## Examples\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod\n\nkubectl port-forward pod/mypod 5000 6000\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n\nkubectl port-forward deployment/mydeployment 5000 6000\n\n# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod 8888:5000\n\n# Listen on port 8888 on all addresses, forwarding to 5000 in the pod\n\nkubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000\n\n# Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod\n\nkubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000\n\n# Listen on a random port locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod :5000\n\n## What are the flags?\n\n```bash\n      --address strings                Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind. (default [localhost])\n  -h, --help                           help for port-forward\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Listen on port 8888 on all addresses, forwarding to 5000 in the pod","Command":"kubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000","Content":"# kubectl port-forward\n\nForward one or more local ports to a pod\n\n```bash\nkubectl port-forward TYPE/NAME [options] [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]\n```\n\n## What does it do?\n\nForward one or more local ports to a pod.\n\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n\n If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and a rerun of the command is needed to resume forwarding.\n\n## Examples\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod\n\nkubectl port-forward pod/mypod 5000 6000\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n\nkubectl port-forward deployment/mydeployment 5000 6000\n\n# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod 8888:5000\n\n# Listen on port 8888 on all addresses, forwarding to 5000 in the pod\n\nkubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000\n\n# Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod\n\nkubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000\n\n# Listen on a random port locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod :5000\n\n## What are the flags?\n\n```bash\n      --address strings                Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind. (default [localhost])\n  -h, --help                           help for port-forward\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod","Command":"kubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000","Content":"# kubectl port-forward\n\nForward one or more local ports to a pod\n\n```bash\nkubectl port-forward TYPE/NAME [options] [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]\n```\n\n## What does it do?\n\nForward one or more local ports to a pod.\n\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n\n If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and a rerun of the command is needed to resume forwarding.\n\n## Examples\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod\n\nkubectl port-forward pod/mypod 5000 6000\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n\nkubectl port-forward deployment/mydeployment 5000 6000\n\n# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod 8888:5000\n\n# Listen on port 8888 on all addresses, forwarding to 5000 in the pod\n\nkubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000\n\n# Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod\n\nkubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000\n\n# Listen on a random port locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod :5000\n\n## What are the flags?\n\n```bash\n      --address strings                Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind. (default [localhost])\n  -h, --help                           help for port-forward\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Listen on a random port locally, forwarding to 5000 in the pod","Command":"kubectl port-forward pod/mypod :5000","Content":"# kubectl port-forward\n\nForward one or more local ports to a pod\n\n```bash\nkubectl port-forward TYPE/NAME [options] [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N]\n```\n\n## What does it do?\n\nForward one or more local ports to a pod.\n\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n\n If there are multiple pods matching the criteria, a pod will be selected automatically. The forwarding session ends when the selected pod terminates, and a rerun of the command is needed to resume forwarding.\n\n## Examples\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod\n\nkubectl port-forward pod/mypod 5000 6000\n\n# Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n\nkubectl port-forward deployment/mydeployment 5000 6000\n\n# Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n\nkubectl port-forward service/myservice 8443:https\n\n# Listen on port 8888 locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod 8888:5000\n\n# Listen on port 8888 on all addresses, forwarding to 5000 in the pod\n\nkubectl port-forward --address 0.0.0.0 pod/mypod 8888:5000\n\n# Listen on port 8888 on localhost and selected IP, forwarding to 5000 in the pod\n\nkubectl port-forward --address localhost,10.19.21.23 pod/mypod 8888:5000\n\n# Listen on a random port locally, forwarding to 5000 in the pod\n\nkubectl port-forward pod/mypod :5000\n\n## What are the flags?\n\n```bash\n      --address strings                Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind. (default [localhost])\n  -h, --help                           help for port-forward\n      --pod-running-timeout duration   The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" To proxy all of the Kubernetes API and nothing else","Command":"kubectl proxy --api-prefix=/","Content":"# kubectl proxy\n\nRun a proxy to the Kubernetes API server\n\n```bash\nkubectl proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix]\n```\n\n## What does it do?\n\nCreates a proxy server or application-level gateway between localhost and the Kubernetes API server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote Kubernetes API server port, except for the path matching the static content path.\n\n## Examples\n\n# To proxy all of the Kubernetes API and nothing else\n\nkubectl proxy --api-prefix=/\n\n# To proxy only part of the Kubernetes API and also some static files\n# You can get pods info with 'curl localhost:8001/api/v1/pods'\n\nkubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/\n\n# To proxy the entire Kubernetes API at a different root\n# You can get pods info with 'curl localhost:8001/custom/api/v1/pods'\n\nkubectl proxy --api-prefix=/custom/\n\n# Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/\n\nkubectl proxy --port=8011 --www=./local/www/\n\n# Run a proxy to the Kubernetes API server on an arbitrary local port\n# The chosen port for the server will be output to stdout\n\nkubectl proxy --port=0\n\n# Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api\n# This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/\n\nkubectl proxy --api-prefix=/k8s-api\n\n## What are the flags?\n\n```bash\n      --accept-hosts string     Regular expression for hosts that the proxy should accept. (default \"^localhost$,^127\\\\.0\\\\.0\\\\.1$,^\\\\[::1\\\\]$\")\n      --accept-paths string     Regular expression for paths that the proxy should accept. (default \"^.*\")\n      --address string          The IP address on which to serve on. (default \"127.0.0.1\")\n      --api-prefix string       Prefix to serve the proxied API under. (default \"/\")\n      --append-server-path      If true, enables automatic path appending of the kube context server path to each request.\n      --disable-filter          If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.\n  -h, --help                    help for proxy\n      --keepalive duration      keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.\n  -p, --port int                The port on which to run the proxy. Set to 0 to pick a random port. (default 8001)\n      --reject-methods string   Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH').  (default \"^$\")\n      --reject-paths string     Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths. (default \"^/api/.*/pods/.*/exec,^/api/.*/pods/.*/attach\")\n  -u, --unix-socket string      Unix socket on which to run the proxy.\n  -w, --www string              Also serve static files from the given directory under the specified prefix.\n  -P, --www-prefix string       Prefix to serve static files under, if static file directory is specified. (default \"/static/\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" To proxy only part of the Kubernetes API and also some static files You can get pods info with 'curl localhost:8001/api/v1/pods'","Command":"kubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/","Content":"# kubectl proxy\n\nRun a proxy to the Kubernetes API server\n\n```bash\nkubectl proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix]\n```\n\n## What does it do?\n\nCreates a proxy server or application-level gateway between localhost and the Kubernetes API server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote Kubernetes API server port, except for the path matching the static content path.\n\n## Examples\n\n# To proxy all of the Kubernetes API and nothing else\n\nkubectl proxy --api-prefix=/\n\n# To proxy only part of the Kubernetes API and also some static files\n# You can get pods info with 'curl localhost:8001/api/v1/pods'\n\nkubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/\n\n# To proxy the entire Kubernetes API at a different root\n# You can get pods info with 'curl localhost:8001/custom/api/v1/pods'\n\nkubectl proxy --api-prefix=/custom/\n\n# Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/\n\nkubectl proxy --port=8011 --www=./local/www/\n\n# Run a proxy to the Kubernetes API server on an arbitrary local port\n# The chosen port for the server will be output to stdout\n\nkubectl proxy --port=0\n\n# Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api\n# This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/\n\nkubectl proxy --api-prefix=/k8s-api\n\n## What are the flags?\n\n```bash\n      --accept-hosts string     Regular expression for hosts that the proxy should accept. (default \"^localhost$,^127\\\\.0\\\\.0\\\\.1$,^\\\\[::1\\\\]$\")\n      --accept-paths string     Regular expression for paths that the proxy should accept. (default \"^.*\")\n      --address string          The IP address on which to serve on. (default \"127.0.0.1\")\n      --api-prefix string       Prefix to serve the proxied API under. (default \"/\")\n      --append-server-path      If true, enables automatic path appending of the kube context server path to each request.\n      --disable-filter          If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.\n  -h, --help                    help for proxy\n      --keepalive duration      keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.\n  -p, --port int                The port on which to run the proxy. Set to 0 to pick a random port. (default 8001)\n      --reject-methods string   Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH').  (default \"^$\")\n      --reject-paths string     Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths. (default \"^/api/.*/pods/.*/exec,^/api/.*/pods/.*/attach\")\n  -u, --unix-socket string      Unix socket on which to run the proxy.\n  -w, --www string              Also serve static files from the given directory under the specified prefix.\n  -P, --www-prefix string       Prefix to serve static files under, if static file directory is specified. (default \"/static/\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" To proxy the entire Kubernetes API at a different root You can get pods info with 'curl localhost:8001/custom/api/v1/pods'","Command":"kubectl proxy --api-prefix=/custom/","Content":"# kubectl proxy\n\nRun a proxy to the Kubernetes API server\n\n```bash\nkubectl proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix]\n```\n\n## What does it do?\n\nCreates a proxy server or application-level gateway between localhost and the Kubernetes API server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote Kubernetes API server port, except for the path matching the static content path.\n\n## Examples\n\n# To proxy all of the Kubernetes API and nothing else\n\nkubectl proxy --api-prefix=/\n\n# To proxy only part of the Kubernetes API and also some static files\n# You can get pods info with 'curl localhost:8001/api/v1/pods'\n\nkubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/\n\n# To proxy the entire Kubernetes API at a different root\n# You can get pods info with 'curl localhost:8001/custom/api/v1/pods'\n\nkubectl proxy --api-prefix=/custom/\n\n# Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/\n\nkubectl proxy --port=8011 --www=./local/www/\n\n# Run a proxy to the Kubernetes API server on an arbitrary local port\n# The chosen port for the server will be output to stdout\n\nkubectl proxy --port=0\n\n# Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api\n# This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/\n\nkubectl proxy --api-prefix=/k8s-api\n\n## What are the flags?\n\n```bash\n      --accept-hosts string     Regular expression for hosts that the proxy should accept. (default \"^localhost$,^127\\\\.0\\\\.0\\\\.1$,^\\\\[::1\\\\]$\")\n      --accept-paths string     Regular expression for paths that the proxy should accept. (default \"^.*\")\n      --address string          The IP address on which to serve on. (default \"127.0.0.1\")\n      --api-prefix string       Prefix to serve the proxied API under. (default \"/\")\n      --append-server-path      If true, enables automatic path appending of the kube context server path to each request.\n      --disable-filter          If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.\n  -h, --help                    help for proxy\n      --keepalive duration      keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.\n  -p, --port int                The port on which to run the proxy. Set to 0 to pick a random port. (default 8001)\n      --reject-methods string   Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH').  (default \"^$\")\n      --reject-paths string     Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths. (default \"^/api/.*/pods/.*/exec,^/api/.*/pods/.*/attach\")\n  -u, --unix-socket string      Unix socket on which to run the proxy.\n  -w, --www string              Also serve static files from the given directory under the specified prefix.\n  -P, --www-prefix string       Prefix to serve static files under, if static file directory is specified. (default \"/static/\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/","Command":"kubectl proxy --port=8011 --www=./local/www/","Content":"# kubectl proxy\n\nRun a proxy to the Kubernetes API server\n\n```bash\nkubectl proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix]\n```\n\n## What does it do?\n\nCreates a proxy server or application-level gateway between localhost and the Kubernetes API server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote Kubernetes API server port, except for the path matching the static content path.\n\n## Examples\n\n# To proxy all of the Kubernetes API and nothing else\n\nkubectl proxy --api-prefix=/\n\n# To proxy only part of the Kubernetes API and also some static files\n# You can get pods info with 'curl localhost:8001/api/v1/pods'\n\nkubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/\n\n# To proxy the entire Kubernetes API at a different root\n# You can get pods info with 'curl localhost:8001/custom/api/v1/pods'\n\nkubectl proxy --api-prefix=/custom/\n\n# Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/\n\nkubectl proxy --port=8011 --www=./local/www/\n\n# Run a proxy to the Kubernetes API server on an arbitrary local port\n# The chosen port for the server will be output to stdout\n\nkubectl proxy --port=0\n\n# Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api\n# This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/\n\nkubectl proxy --api-prefix=/k8s-api\n\n## What are the flags?\n\n```bash\n      --accept-hosts string     Regular expression for hosts that the proxy should accept. (default \"^localhost$,^127\\\\.0\\\\.0\\\\.1$,^\\\\[::1\\\\]$\")\n      --accept-paths string     Regular expression for paths that the proxy should accept. (default \"^.*\")\n      --address string          The IP address on which to serve on. (default \"127.0.0.1\")\n      --api-prefix string       Prefix to serve the proxied API under. (default \"/\")\n      --append-server-path      If true, enables automatic path appending of the kube context server path to each request.\n      --disable-filter          If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.\n  -h, --help                    help for proxy\n      --keepalive duration      keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.\n  -p, --port int                The port on which to run the proxy. Set to 0 to pick a random port. (default 8001)\n      --reject-methods string   Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH').  (default \"^$\")\n      --reject-paths string     Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths. (default \"^/api/.*/pods/.*/exec,^/api/.*/pods/.*/attach\")\n  -u, --unix-socket string      Unix socket on which to run the proxy.\n  -w, --www string              Also serve static files from the given directory under the specified prefix.\n  -P, --www-prefix string       Prefix to serve static files under, if static file directory is specified. (default \"/static/\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Run a proxy to the Kubernetes API server on an arbitrary local port The chosen port for the server will be output to stdout","Command":"kubectl proxy --port=0","Content":"# kubectl proxy\n\nRun a proxy to the Kubernetes API server\n\n```bash\nkubectl proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix]\n```\n\n## What does it do?\n\nCreates a proxy server or application-level gateway between localhost and the Kubernetes API server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote Kubernetes API server port, except for the path matching the static content path.\n\n## Examples\n\n# To proxy all of the Kubernetes API and nothing else\n\nkubectl proxy --api-prefix=/\n\n# To proxy only part of the Kubernetes API and also some static files\n# You can get pods info with 'curl localhost:8001/api/v1/pods'\n\nkubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/\n\n# To proxy the entire Kubernetes API at a different root\n# You can get pods info with 'curl localhost:8001/custom/api/v1/pods'\n\nkubectl proxy --api-prefix=/custom/\n\n# Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/\n\nkubectl proxy --port=8011 --www=./local/www/\n\n# Run a proxy to the Kubernetes API server on an arbitrary local port\n# The chosen port for the server will be output to stdout\n\nkubectl proxy --port=0\n\n# Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api\n# This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/\n\nkubectl proxy --api-prefix=/k8s-api\n\n## What are the flags?\n\n```bash\n      --accept-hosts string     Regular expression for hosts that the proxy should accept. (default \"^localhost$,^127\\\\.0\\\\.0\\\\.1$,^\\\\[::1\\\\]$\")\n      --accept-paths string     Regular expression for paths that the proxy should accept. (default \"^.*\")\n      --address string          The IP address on which to serve on. (default \"127.0.0.1\")\n      --api-prefix string       Prefix to serve the proxied API under. (default \"/\")\n      --append-server-path      If true, enables automatic path appending of the kube context server path to each request.\n      --disable-filter          If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.\n  -h, --help                    help for proxy\n      --keepalive duration      keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.\n  -p, --port int                The port on which to run the proxy. Set to 0 to pick a random port. (default 8001)\n      --reject-methods string   Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH').  (default \"^$\")\n      --reject-paths string     Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths. (default \"^/api/.*/pods/.*/exec,^/api/.*/pods/.*/attach\")\n  -u, --unix-socket string      Unix socket on which to run the proxy.\n  -w, --www string              Also serve static files from the given directory under the specified prefix.\n  -P, --www-prefix string       Prefix to serve static files under, if static file directory is specified. (default \"/static/\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/","Command":"kubectl proxy --api-prefix=/k8s-api","Content":"# kubectl proxy\n\nRun a proxy to the Kubernetes API server\n\n```bash\nkubectl proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix]\n```\n\n## What does it do?\n\nCreates a proxy server or application-level gateway between localhost and the Kubernetes API server. It also allows serving static content over specified HTTP path. All incoming data enters through one port and gets forwarded to the remote Kubernetes API server port, except for the path matching the static content path.\n\n## Examples\n\n# To proxy all of the Kubernetes API and nothing else\n\nkubectl proxy --api-prefix=/\n\n# To proxy only part of the Kubernetes API and also some static files\n# You can get pods info with 'curl localhost:8001/api/v1/pods'\n\nkubectl proxy --www=/my/files --www-prefix=/static/ --api-prefix=/api/\n\n# To proxy the entire Kubernetes API at a different root\n# You can get pods info with 'curl localhost:8001/custom/api/v1/pods'\n\nkubectl proxy --api-prefix=/custom/\n\n# Run a proxy to the Kubernetes API server on port 8011, serving static content from ./local/www/\n\nkubectl proxy --port=8011 --www=./local/www/\n\n# Run a proxy to the Kubernetes API server on an arbitrary local port\n# The chosen port for the server will be output to stdout\n\nkubectl proxy --port=0\n\n# Run a proxy to the Kubernetes API server, changing the API prefix to k8s-api\n# This makes e.g. the pods API available at localhost:8001/k8s-api/v1/pods/\n\nkubectl proxy --api-prefix=/k8s-api\n\n## What are the flags?\n\n```bash\n      --accept-hosts string     Regular expression for hosts that the proxy should accept. (default \"^localhost$,^127\\\\.0\\\\.0\\\\.1$,^\\\\[::1\\\\]$\")\n      --accept-paths string     Regular expression for paths that the proxy should accept. (default \"^.*\")\n      --address string          The IP address on which to serve on. (default \"127.0.0.1\")\n      --api-prefix string       Prefix to serve the proxied API under. (default \"/\")\n      --append-server-path      If true, enables automatic path appending of the kube context server path to each request.\n      --disable-filter          If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.\n  -h, --help                    help for proxy\n      --keepalive duration      keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.\n  -p, --port int                The port on which to run the proxy. Set to 0 to pick a random port. (default 8001)\n      --reject-methods string   Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH').  (default \"^$\")\n      --reject-paths string     Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths. (default \"^/api/.*/pods/.*/exec,^/api/.*/pods/.*/attach\")\n  -u, --unix-socket string      Unix socket on which to run the proxy.\n  -w, --www string              Also serve static files from the given directory under the specified prefix.\n  -P, --www-prefix string       Prefix to serve static files under, if static file directory is specified. (default \"/static/\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Replace a pod using the data in pod.json","Command":"kubectl replace -f ./pod.json","Content":"# kubectl replace\n\nReplace a resource by file name or stdin\n\n```bash\nkubectl replace -f FILENAME\n```\n\n## What does it do?\n\nReplace a resource by file name or stdin.\n\n JSON and YAML formats are accepted. If replacing an existing resource, the complete resource spec must be provided. This can be obtained by\n\n  $ kubectl get TYPE NAME -o yaml\n\n## Examples\n\n# Replace a pod using the data in pod.json\n\nkubectl replace -f ./pod.json\n\n# Replace a pod based on the JSON passed into stdin\n\ncat pod.json | kubectl replace -f -\n\n# Update a single-container pod's image version (tag) to v4\n\nkubectl get pod mypod -o yaml | sed 's/\\(image: myimage\\):.*$/\\1:v4/' | kubectl replace -f -\n\n# Force replace, delete and then re-create the resource\n\nkubectl replace --force -f ./pod.json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-replace\")\n  -f, --filename strings                The files that contain the configurations to replace.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for replace\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --raw string                      Raw URI to PUT to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string              If specified, replace will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Replace a pod based on the JSON passed into stdin","Command":"cat pod.json | kubectl replace -f -","Content":"# kubectl replace\n\nReplace a resource by file name or stdin\n\n```bash\nkubectl replace -f FILENAME\n```\n\n## What does it do?\n\nReplace a resource by file name or stdin.\n\n JSON and YAML formats are accepted. If replacing an existing resource, the complete resource spec must be provided. This can be obtained by\n\n  $ kubectl get TYPE NAME -o yaml\n\n## Examples\n\n# Replace a pod using the data in pod.json\n\nkubectl replace -f ./pod.json\n\n# Replace a pod based on the JSON passed into stdin\n\ncat pod.json | kubectl replace -f -\n\n# Update a single-container pod's image version (tag) to v4\n\nkubectl get pod mypod -o yaml | sed 's/\\(image: myimage\\):.*$/\\1:v4/' | kubectl replace -f -\n\n# Force replace, delete and then re-create the resource\n\nkubectl replace --force -f ./pod.json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-replace\")\n  -f, --filename strings                The files that contain the configurations to replace.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for replace\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --raw string                      Raw URI to PUT to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string              If specified, replace will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update a single-container pod's image version (tag) to v4","Command":"kubectl get pod mypod -o yaml | sed 's/\\(image: myimage\\):.*$/\\1:v4/' | kubectl replace -f -","Content":"# kubectl replace\n\nReplace a resource by file name or stdin\n\n```bash\nkubectl replace -f FILENAME\n```\n\n## What does it do?\n\nReplace a resource by file name or stdin.\n\n JSON and YAML formats are accepted. If replacing an existing resource, the complete resource spec must be provided. This can be obtained by\n\n  $ kubectl get TYPE NAME -o yaml\n\n## Examples\n\n# Replace a pod using the data in pod.json\n\nkubectl replace -f ./pod.json\n\n# Replace a pod based on the JSON passed into stdin\n\ncat pod.json | kubectl replace -f -\n\n# Update a single-container pod's image version (tag) to v4\n\nkubectl get pod mypod -o yaml | sed 's/\\(image: myimage\\):.*$/\\1:v4/' | kubectl replace -f -\n\n# Force replace, delete and then re-create the resource\n\nkubectl replace --force -f ./pod.json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-replace\")\n  -f, --filename strings                The files that contain the configurations to replace.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for replace\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --raw string                      Raw URI to PUT to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string              If specified, replace will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Force replace, delete and then re-create the resource","Command":"kubectl replace --force -f ./pod.json","Content":"# kubectl replace\n\nReplace a resource by file name or stdin\n\n```bash\nkubectl replace -f FILENAME\n```\n\n## What does it do?\n\nReplace a resource by file name or stdin.\n\n JSON and YAML formats are accepted. If replacing an existing resource, the complete resource spec must be provided. This can be obtained by\n\n  $ kubectl get TYPE NAME -o yaml\n\n## Examples\n\n# Replace a pod using the data in pod.json\n\nkubectl replace -f ./pod.json\n\n# Replace a pod based on the JSON passed into stdin\n\ncat pod.json | kubectl replace -f -\n\n# Update a single-container pod's image version (tag) to v4\n\nkubectl get pod mypod -o yaml | sed 's/\\(image: myimage\\):.*$/\\1:v4/' | kubectl replace -f -\n\n# Force replace, delete and then re-create the resource\n\nkubectl replace --force -f ./pod.json\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-replace\")\n  -f, --filename strings                The files that contain the configurations to replace.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for replace\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --raw string                      Raw URI to PUT to the server.  Uses the transport specified by the kubeconfig file.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n      --subresource string              If specified, replace will operate on the subresource of the requested object. Must be one of [status scale]. This flag is alpha and may change in the future.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n      --validate string[=\"strict\"]      Must be one of: strict (or true), warn, ignore (or false).\n                                        \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                        \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                        \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" View the rollout history of a deployment","Command":"kubectl rollout history deployment/abc","Content":"# kubectl rollout history\n\nView rollout history\n\n```bash\nkubectl rollout history (TYPE NAME | TYPE/NAME) [flags]\n```\n\n## What does it do?\n\nView previous rollout revisions and configurations.\n\n## Examples\n\n# View the rollout history of a deployment\n\nkubectl rollout history deployment/abc\n\n# View the details of daemonset revision 3\n\nkubectl rollout history daemonset/abc --revision=3\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for history\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --revision int                  See the details, including podTemplate of the revision specified\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" View the details of daemonset revision 3","Command":"kubectl rollout history daemonset/abc --revision=3","Content":"# kubectl rollout history\n\nView rollout history\n\n```bash\nkubectl rollout history (TYPE NAME | TYPE/NAME) [flags]\n```\n\n## What does it do?\n\nView previous rollout revisions and configurations.\n\n## Examples\n\n# View the rollout history of a deployment\n\nkubectl rollout history deployment/abc\n\n# View the details of daemonset revision 3\n\nkubectl rollout history daemonset/abc --revision=3\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for history\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --revision int                  See the details, including podTemplate of the revision specified\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Mark the nginx deployment as paused Any current state of the deployment will continue its function; new updates to the deployment will not have an effect as long as the deployment is paused","Command":"kubectl rollout pause deployment/nginx","Content":"# kubectl rollout pause\n\nMark the provided resource as paused\n\n```bash\nkubectl rollout pause RESOURCE\n```\n\n## What does it do?\n\nMark the provided resource as paused.\n\n Paused resources will not be reconciled by a controller. Use \"kubectl rollout resume\" to resume a paused resource. Currently only deployments support being paused.\n\n## Examples\n\n# Mark the nginx deployment as paused\n# Any current state of the deployment will continue its function; new updates\n# to the deployment will not have an effect as long as the deployment is paused\n\nkubectl rollout pause deployment/nginx\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-rollout\")\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for pause\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Restart a deployment","Command":"kubectl rollout restart deployment/nginx","Content":"# kubectl rollout restart\n\nRestart a resource\n\n```bash\nkubectl rollout restart RESOURCE\n```\n\n## What does it do?\n\nRestart a resource.\n\n     Resource rollout will be restarted.\n\n## Examples\n\n# Restart a deployment\n\nkubectl rollout restart deployment/nginx\n\n# Restart a daemon set\n\nkubectl rollout restart daemonset/abc\n\n# Restart deployments with the app=nginx label\n\nkubectl rollout restart deployment --selector=app=nginx\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-rollout\")\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for restart\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Restart a daemon set","Command":"kubectl rollout restart daemonset/abc","Content":"# kubectl rollout restart\n\nRestart a resource\n\n```bash\nkubectl rollout restart RESOURCE\n```\n\n## What does it do?\n\nRestart a resource.\n\n     Resource rollout will be restarted.\n\n## Examples\n\n# Restart a deployment\n\nkubectl rollout restart deployment/nginx\n\n# Restart a daemon set\n\nkubectl rollout restart daemonset/abc\n\n# Restart deployments with the app=nginx label\n\nkubectl rollout restart deployment --selector=app=nginx\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-rollout\")\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for restart\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Restart deployments with the app=nginx label","Command":"kubectl rollout restart deployment --selector=app=nginx","Content":"# kubectl rollout restart\n\nRestart a resource\n\n```bash\nkubectl rollout restart RESOURCE\n```\n\n## What does it do?\n\nRestart a resource.\n\n     Resource rollout will be restarted.\n\n## Examples\n\n# Restart a deployment\n\nkubectl rollout restart deployment/nginx\n\n# Restart a daemon set\n\nkubectl rollout restart daemonset/abc\n\n# Restart deployments with the app=nginx label\n\nkubectl rollout restart deployment --selector=app=nginx\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-rollout\")\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for restart\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Resume an already paused deployment","Command":"kubectl rollout resume deployment/nginx","Content":"# kubectl rollout resume\n\nResume a paused resource\n\n```bash\nkubectl rollout resume RESOURCE\n```\n\n## What does it do?\n\nResume a paused resource.\n\n Paused resources will not be reconciled by a controller. By resuming a resource, we allow it to be reconciled again. Currently only deployments support being resumed.\n\n## Examples\n\n# Resume an already paused deployment\n\nkubectl rollout resume deployment/nginx\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-manager string          Name of the manager used to track field ownership. (default \"kubectl-rollout\")\n  -f, --filename strings              Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                          help for resume\n  -k, --kustomize string              Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Watch the rollout status of a deployment","Command":"kubectl rollout status deployment/nginx","Content":"# kubectl rollout status\n\nShow the status of the rollout\n\n```bash\nkubectl rollout status (TYPE NAME | TYPE/NAME) [flags]\n```\n\n## What does it do?\n\nShow the status of the rollout.\n\n By default 'rollout status' will watch the status of the latest rollout until it's done. If you don't want to wait for the rollout to finish then you can use --watch=false. Note that if a new rollout starts in-between, then 'rollout status' will continue watching the latest revision. If you want to pin to a specific revision and abort if it is rolled over by another revision, use --revision=N where N is the revision you need to watch for.\n\n## Examples\n\n# Watch the rollout status of a deployment\n\nkubectl rollout status deployment/nginx\n\n## What are the flags?\n\n```bash\n  -f, --filename strings   Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help               help for status\n  -k, --kustomize string   Process the kustomization directory. This flag can't be used together with -f or -R.\n  -R, --recursive          Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --revision int       Pin to a specific revision for showing its status. Defaults to 0 (last revision).\n  -l, --selector string    Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --timeout duration   The length of time to wait before ending watch, zero means never. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).\n  -w, --watch              Watch the status of the rollout until it's done. (default true)\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Roll back to the previous deployment","Command":"kubectl rollout undo deployment/abc","Content":"# kubectl rollout undo\n\nUndo a previous rollout\n\n```bash\nkubectl rollout undo (TYPE NAME | TYPE/NAME) [flags]\n```\n\n## What does it do?\n\nRoll back to a previous rollout.\n\n## Examples\n\n# Roll back to the previous deployment\n\nkubectl rollout undo deployment/abc\n\n# Roll back to daemonset revision 3\n\nkubectl rollout undo daemonset/abc --to-revision=3\n\n# Roll back to the previous deployment with dry-run\n\nkubectl rollout undo --dry-run=server deployment/abc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for undo\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --to-revision int                The revision to rollback to. Default to 0 (last revision).\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Roll back to daemonset revision 3","Command":"kubectl rollout undo daemonset/abc --to-revision=3","Content":"# kubectl rollout undo\n\nUndo a previous rollout\n\n```bash\nkubectl rollout undo (TYPE NAME | TYPE/NAME) [flags]\n```\n\n## What does it do?\n\nRoll back to a previous rollout.\n\n## Examples\n\n# Roll back to the previous deployment\n\nkubectl rollout undo deployment/abc\n\n# Roll back to daemonset revision 3\n\nkubectl rollout undo daemonset/abc --to-revision=3\n\n# Roll back to the previous deployment with dry-run\n\nkubectl rollout undo --dry-run=server deployment/abc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for undo\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --to-revision int                The revision to rollback to. Default to 0 (last revision).\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Roll back to the previous deployment with dry-run","Command":"kubectl rollout undo --dry-run=server deployment/abc","Content":"# kubectl rollout undo\n\nUndo a previous rollout\n\n```bash\nkubectl rollout undo (TYPE NAME | TYPE/NAME) [flags]\n```\n\n## What does it do?\n\nRoll back to a previous rollout.\n\n## Examples\n\n# Roll back to the previous deployment\n\nkubectl rollout undo deployment/abc\n\n# Roll back to daemonset revision 3\n\nkubectl rollout undo daemonset/abc --to-revision=3\n\n# Roll back to the previous deployment with dry-run\n\nkubectl rollout undo --dry-run=server deployment/abc\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for undo\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --to-revision int                The revision to rollback to. Default to 0 (last revision).\n```\n\n## SEE ALSO\n\n* kubectl rollout - Manage the rollout of a resource\n"},{"Description":" Rollback to the previous deployment","Command":"kubectl rollout undo deployment/abc","Content":"# kubectl rollout\n\nManage the rollout of a resource\n\n```bash\nkubectl rollout SUBCOMMAND\n```\n\n## What does it do?\n\nManage the rollout of one or many resources.\n  \n Valid resource types include:\n\n  *  deployments\n  *  daemonsets\n  *  statefulsets\n\n## Examples\n\n# Rollback to the previous deployment\n\nkubectl rollout undo deployment/abc\n\n# Check the rollout status of a daemonset\n\nkubectl rollout status daemonset/foo\n\n# Restart a deployment\n\nkubectl rollout restart deployment/abc\n\n# Restart deployments with the app=nginx label\n\nkubectl rollout restart deployment --selector=app=nginx\n\n## What are the flags?\n\n```bash\n  -h, --help   help for rollout\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl rollout history](kubectl_rollout_history.md) - View rollout history\n* [kubectl rollout pause](kubectl_rollout_pause.md) - Mark the provided resource as paused\n* [kubectl rollout restart](kubectl_rollout_restart.md) - Restart a resource\n* [kubectl rollout resume](kubectl_rollout_resume.md) - Resume a paused resource\n* [kubectl rollout status](kubectl_rollout_status.md) - Show the status of the rollout\n* [kubectl rollout undo](kubectl_rollout_undo.md) - Undo a previous rollout\n"},{"Description":" Check the rollout status of a daemonset","Command":"kubectl rollout status daemonset/foo","Content":"# kubectl rollout\n\nManage the rollout of a resource\n\n```bash\nkubectl rollout SUBCOMMAND\n```\n\n## What does it do?\n\nManage the rollout of one or many resources.\n  \n Valid resource types include:\n\n  *  deployments\n  *  daemonsets\n  *  statefulsets\n\n## Examples\n\n# Rollback to the previous deployment\n\nkubectl rollout undo deployment/abc\n\n# Check the rollout status of a daemonset\n\nkubectl rollout status daemonset/foo\n\n# Restart a deployment\n\nkubectl rollout restart deployment/abc\n\n# Restart deployments with the app=nginx label\n\nkubectl rollout restart deployment --selector=app=nginx\n\n## What are the flags?\n\n```bash\n  -h, --help   help for rollout\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl rollout history](kubectl_rollout_history.md) - View rollout history\n* [kubectl rollout pause](kubectl_rollout_pause.md) - Mark the provided resource as paused\n* [kubectl rollout restart](kubectl_rollout_restart.md) - Restart a resource\n* [kubectl rollout resume](kubectl_rollout_resume.md) - Resume a paused resource\n* [kubectl rollout status](kubectl_rollout_status.md) - Show the status of the rollout\n* [kubectl rollout undo](kubectl_rollout_undo.md) - Undo a previous rollout\n"},{"Description":" Restart a deployment","Command":"kubectl rollout restart deployment/abc","Content":"# kubectl rollout\n\nManage the rollout of a resource\n\n```bash\nkubectl rollout SUBCOMMAND\n```\n\n## What does it do?\n\nManage the rollout of one or many resources.\n  \n Valid resource types include:\n\n  *  deployments\n  *  daemonsets\n  *  statefulsets\n\n## Examples\n\n# Rollback to the previous deployment\n\nkubectl rollout undo deployment/abc\n\n# Check the rollout status of a daemonset\n\nkubectl rollout status daemonset/foo\n\n# Restart a deployment\n\nkubectl rollout restart deployment/abc\n\n# Restart deployments with the app=nginx label\n\nkubectl rollout restart deployment --selector=app=nginx\n\n## What are the flags?\n\n```bash\n  -h, --help   help for rollout\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl rollout history](kubectl_rollout_history.md) - View rollout history\n* [kubectl rollout pause](kubectl_rollout_pause.md) - Mark the provided resource as paused\n* [kubectl rollout restart](kubectl_rollout_restart.md) - Restart a resource\n* [kubectl rollout resume](kubectl_rollout_resume.md) - Resume a paused resource\n* [kubectl rollout status](kubectl_rollout_status.md) - Show the status of the rollout\n* [kubectl rollout undo](kubectl_rollout_undo.md) - Undo a previous rollout\n"},{"Description":" Restart deployments with the app=nginx label","Command":"kubectl rollout restart deployment --selector=app=nginx","Content":"# kubectl rollout\n\nManage the rollout of a resource\n\n```bash\nkubectl rollout SUBCOMMAND\n```\n\n## What does it do?\n\nManage the rollout of one or many resources.\n  \n Valid resource types include:\n\n  *  deployments\n  *  daemonsets\n  *  statefulsets\n\n## Examples\n\n# Rollback to the previous deployment\n\nkubectl rollout undo deployment/abc\n\n# Check the rollout status of a daemonset\n\nkubectl rollout status daemonset/foo\n\n# Restart a deployment\n\nkubectl rollout restart deployment/abc\n\n# Restart deployments with the app=nginx label\n\nkubectl rollout restart deployment --selector=app=nginx\n\n## What are the flags?\n\n```bash\n  -h, --help   help for rollout\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n* [kubectl rollout history](kubectl_rollout_history.md) - View rollout history\n* [kubectl rollout pause](kubectl_rollout_pause.md) - Mark the provided resource as paused\n* [kubectl rollout restart](kubectl_rollout_restart.md) - Restart a resource\n* [kubectl rollout resume](kubectl_rollout_resume.md) - Resume a paused resource\n* [kubectl rollout status](kubectl_rollout_status.md) - Show the status of the rollout\n* [kubectl rollout undo](kubectl_rollout_undo.md) - Undo a previous rollout\n"},{"Description":" Start a nginx pod","Command":"kubectl run nginx --image=nginx","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Start a hazelcast pod and let the container expose port 5701","Command":"kubectl run hazelcast --image=hazelcast/hazelcast --port=5701","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container","Command":"kubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container","Command":"kubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Dry run; print the corresponding API objects without creating them","Command":"kubectl run nginx --image=nginx --dry-run=client","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Start a nginx pod, but overload the spec with a partial set of values parsed from JSON","Command":"kubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Start a busybox pod and keep it in the foreground, don't restart it if it exits","Command":"kubectl run -i -t busybox --image=busybox --restart=Never","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command","Command":"kubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Start the nginx pod using a different command and custom arguments","Command":"kubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e","Content":"# kubectl run\n\nRun a particular image on the cluster\n\n```bash\nkubectl run NAME --image=image [--env=\"key=value\"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]\n```\n\n## What does it do?\n\nCreate and run a particular image in a pod.\n\n## Examples\n\n# Start a nginx pod\n\nkubectl run nginx --image=nginx\n\n# Start a hazelcast pod and let the container expose port 5701\n\nkubectl run hazelcast --image=hazelcast/hazelcast --port=5701\n\n# Start a hazelcast pod and set environment variables \"DNS_DOMAIN=cluster\" and \"POD_NAMESPACE=default\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --env=\"DNS_DOMAIN=cluster\" --env=\"POD_NAMESPACE=default\"\n\n# Start a hazelcast pod and set labels \"app=hazelcast\" and \"env=prod\" in the container\n\nkubectl run hazelcast --image=hazelcast/hazelcast --labels=\"app=hazelcast,env=prod\"\n\n# Dry run; print the corresponding API objects without creating them\n\nkubectl run nginx --image=nginx --dry-run=client\n\n# Start a nginx pod, but overload the spec with a partial set of values parsed from JSON\n\nkubectl run nginx --image=nginx --overrides='{ \"apiVersion\": \"v1\", \"spec\": { ... } }'\n\n# Start a busybox pod and keep it in the foreground, don't restart it if it exits\n\nkubectl run -i -t busybox --image=busybox --restart=Never\n\n# Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command\n\nkubectl run nginx --image=nginx -- \u003carg1\u003e \u003carg2\u003e ... \u003cargN\u003e\n\n# Start the nginx pod using a different command and custom arguments\n\nkubectl run nginx --image=nginx --command -- \u003ccmd\u003e \u003carg1\u003e ... \u003cargN\u003e\n\n## What are the flags?\n\n```bash\n      --allow-missing-template-keys     If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --annotations stringArray         Annotations to apply to the pod.\n      --attach                          If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.\n      --cascade string[=\"background\"]   Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\")\n      --command                         If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.\n      --dry-run string[=\"unchanged\"]    Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --env stringArray                 Environment variables to set in the container.\n      --expose --port                   If true, create a ClusterIP service associated with the pod.  Requires --port.\n      --field-manager string            Name of the manager used to track field ownership. (default \"kubectl-run\")\n  -f, --filename strings                to use to replace the resource.\n      --force                           If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.\n      --grace-period int                Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1)\n  -h, --help                            help for run\n      --image string                    The image for the container to run.\n      --image-pull-policy string        The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.\n  -k, --kustomize string                Process a kustomization directory. This flag can't be used together with -f or -R.\n  -l, --labels string                   Comma separated labels to apply to the pod. Will override previous values.\n      --leave-stdin-open                If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.\n  -o, --output string                   Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --override-type string            The method used to override the generated object: json, merge, or strategic. (default \"merge\")\n      --overrides string                An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.\n      --pod-running-timeout duration    The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 1m0s)\n      --port string                     The port that this container exposes.\n      --privileged                      If true, run the container in privileged mode.\n  -q, --quiet                           If true, suppress prompt messages.\n  -R, --recursive                       Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --restart string                  The restart policy for this Pod.  Legal values [Always, OnFailure, Never]. (default \"Always\")\n      --rm                              If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.\n      --save-config                     If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n      --show-managed-fields             If true, keep the managedFields when printing objects in JSON or YAML format.\n  -i, --stdin                           Keep stdin open on the container in the pod, even if nothing is attached.\n      --template string                 Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration                The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object\n  -t, --tty                             Allocate a TTY for the container in the pod.\n      --wait                            If true, wait for resources to be gone before returning. This waits for finalizers.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Scale a replica set named 'foo' to 3","Command":"kubectl scale --replicas=3 rs/foo","Content":"# kubectl scale\n\nSet a new size for a deployment, replica set, or replication controller\n\n```bash\nkubectl scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)\n```\n\n## What does it do?\n\nSet a new size for a deployment, replica set, replication controller, or stateful set.\n\n Scale also allows users to specify one or more preconditions for the scale action.\n\n If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.\n\n## Examples\n\n# Scale a replica set named 'foo' to 3\n\nkubectl scale --replicas=3 rs/foo\n\n# Scale a resource identified by type and name specified in \"foo.yaml\" to 3\n\nkubectl scale --replicas=3 -f foo.yaml\n\n# If the deployment named mysql's current size is 2, scale mysql to 3\n\nkubectl scale --current-replicas=2 --replicas=3 deployment/mysql\n\n# Scale multiple replication controllers\n\nkubectl scale --replicas=5 rc/foo rc/bar rc/baz\n\n# Scale stateful set named 'web' to 3\n\nkubectl scale --replicas=3 statefulset/web\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --current-replicas int           Precondition for current size. Requires that the current size of the resource match this value in order to scale. -1 (default) for no condition. (default -1)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to set a new size\n  -h, --help                           help for scale\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --replicas int                   The new desired number of replicas. Required.\n      --resource-version string        Precondition for resource version. Requires that the current resource version match this value in order to scale.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration               The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Scale a resource identified by type and name specified in \"foo.yaml\" to 3","Command":"kubectl scale --replicas=3 -f foo.yaml","Content":"# kubectl scale\n\nSet a new size for a deployment, replica set, or replication controller\n\n```bash\nkubectl scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)\n```\n\n## What does it do?\n\nSet a new size for a deployment, replica set, replication controller, or stateful set.\n\n Scale also allows users to specify one or more preconditions for the scale action.\n\n If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.\n\n## Examples\n\n# Scale a replica set named 'foo' to 3\n\nkubectl scale --replicas=3 rs/foo\n\n# Scale a resource identified by type and name specified in \"foo.yaml\" to 3\n\nkubectl scale --replicas=3 -f foo.yaml\n\n# If the deployment named mysql's current size is 2, scale mysql to 3\n\nkubectl scale --current-replicas=2 --replicas=3 deployment/mysql\n\n# Scale multiple replication controllers\n\nkubectl scale --replicas=5 rc/foo rc/bar rc/baz\n\n# Scale stateful set named 'web' to 3\n\nkubectl scale --replicas=3 statefulset/web\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --current-replicas int           Precondition for current size. Requires that the current size of the resource match this value in order to scale. -1 (default) for no condition. (default -1)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to set a new size\n  -h, --help                           help for scale\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --replicas int                   The new desired number of replicas. Required.\n      --resource-version string        Precondition for resource version. Requires that the current resource version match this value in order to scale.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration               The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" If the deployment named mysql's current size is 2, scale mysql to 3","Command":"kubectl scale --current-replicas=2 --replicas=3 deployment/mysql","Content":"# kubectl scale\n\nSet a new size for a deployment, replica set, or replication controller\n\n```bash\nkubectl scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)\n```\n\n## What does it do?\n\nSet a new size for a deployment, replica set, replication controller, or stateful set.\n\n Scale also allows users to specify one or more preconditions for the scale action.\n\n If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.\n\n## Examples\n\n# Scale a replica set named 'foo' to 3\n\nkubectl scale --replicas=3 rs/foo\n\n# Scale a resource identified by type and name specified in \"foo.yaml\" to 3\n\nkubectl scale --replicas=3 -f foo.yaml\n\n# If the deployment named mysql's current size is 2, scale mysql to 3\n\nkubectl scale --current-replicas=2 --replicas=3 deployment/mysql\n\n# Scale multiple replication controllers\n\nkubectl scale --replicas=5 rc/foo rc/bar rc/baz\n\n# Scale stateful set named 'web' to 3\n\nkubectl scale --replicas=3 statefulset/web\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --current-replicas int           Precondition for current size. Requires that the current size of the resource match this value in order to scale. -1 (default) for no condition. (default -1)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to set a new size\n  -h, --help                           help for scale\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --replicas int                   The new desired number of replicas. Required.\n      --resource-version string        Precondition for resource version. Requires that the current resource version match this value in order to scale.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration               The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Scale multiple replication controllers","Command":"kubectl scale --replicas=5 rc/foo rc/bar rc/baz","Content":"# kubectl scale\n\nSet a new size for a deployment, replica set, or replication controller\n\n```bash\nkubectl scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)\n```\n\n## What does it do?\n\nSet a new size for a deployment, replica set, replication controller, or stateful set.\n\n Scale also allows users to specify one or more preconditions for the scale action.\n\n If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.\n\n## Examples\n\n# Scale a replica set named 'foo' to 3\n\nkubectl scale --replicas=3 rs/foo\n\n# Scale a resource identified by type and name specified in \"foo.yaml\" to 3\n\nkubectl scale --replicas=3 -f foo.yaml\n\n# If the deployment named mysql's current size is 2, scale mysql to 3\n\nkubectl scale --current-replicas=2 --replicas=3 deployment/mysql\n\n# Scale multiple replication controllers\n\nkubectl scale --replicas=5 rc/foo rc/bar rc/baz\n\n# Scale stateful set named 'web' to 3\n\nkubectl scale --replicas=3 statefulset/web\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --current-replicas int           Precondition for current size. Requires that the current size of the resource match this value in order to scale. -1 (default) for no condition. (default -1)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to set a new size\n  -h, --help                           help for scale\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --replicas int                   The new desired number of replicas. Required.\n      --resource-version string        Precondition for resource version. Requires that the current resource version match this value in order to scale.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration               The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Scale stateful set named 'web' to 3","Command":"kubectl scale --replicas=3 statefulset/web","Content":"# kubectl scale\n\nSet a new size for a deployment, replica set, or replication controller\n\n```bash\nkubectl scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)\n```\n\n## What does it do?\n\nSet a new size for a deployment, replica set, replication controller, or stateful set.\n\n Scale also allows users to specify one or more preconditions for the scale action.\n\n If --current-replicas or --resource-version is specified, it is validated before the scale is attempted, and it is guaranteed that the precondition holds true when the scale is sent to the server.\n\n## Examples\n\n# Scale a replica set named 'foo' to 3\n\nkubectl scale --replicas=3 rs/foo\n\n# Scale a resource identified by type and name specified in \"foo.yaml\" to 3\n\nkubectl scale --replicas=3 -f foo.yaml\n\n# If the deployment named mysql's current size is 2, scale mysql to 3\n\nkubectl scale --current-replicas=2 --replicas=3 deployment/mysql\n\n# Scale multiple replication controllers\n\nkubectl scale --replicas=5 rc/foo rc/bar rc/baz\n\n# Scale stateful set named 'web' to 3\n\nkubectl scale --replicas=3 statefulset/web\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --current-replicas int           Precondition for current size. Requires that the current size of the resource match this value in order to scale. -1 (default) for no condition. (default -1)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to set a new size\n  -h, --help                           help for scale\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --replicas int                   The new desired number of replicas. Required.\n      --resource-version string        Precondition for resource version. Requires that the current resource version match this value in order to scale.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration               The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Update deployment 'registry' with a new environment variable","Command":"kubectl set env deployment/registry STORAGE_DIR=/local","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" List the environment variables defined on a deployments 'sample-build'","Command":"kubectl set env deployment/sample-build --list","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" List the environment variables defined on all pods","Command":"kubectl set env pods --all --list","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Output modified deployment in YAML, and does not alter the object on the server","Command":"kubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Update all containers in all replication controllers in the project to have ENV=prod","Command":"kubectl set env rc --all ENV=prod","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Import environment from a secret","Command":"kubectl set env --from=secret/mysecret deployment/myapp","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Import environment from a config map with a prefix","Command":"kubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Import specific keys from a config map","Command":"kubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Remove the environment variable ENV from container 'c1' in all deployment configs","Command":"kubectl set env deployments --all --containers=\"c1\" ENV-","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Remove the environment variable ENV from a deployment definition on disk and update the deployment config on the server","Command":"kubectl set env -f deploy.json ENV-","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Set some of the local shell environment into a deployment config on the server","Command":"env | grep RAILS_ | kubectl set env -e - deployment/registry","Content":"# kubectl set env\n\nUpdate environment variables on a pod template\n\n```bash\nkubectl set env RESOURCE/NAME KEY_1=VAL_1 ... KEY_N=VAL_N\n```\n\n## What does it do?\n\nUpdate environment variables on a pod template.\n\n List environment variable definitions in one or more pods, pod templates. Add, update, or remove container environment variable definitions in one or more pod templates (within replication controllers or deployment configurations). View or modify the environment variable definitions on all containers in the specified pods or pod templates, or just those that match a wildcard.\n\n If \"--env -\" is passed, environment variables can be read from STDIN using the standard env syntax.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Update deployment 'registry' with a new environment variable\n\nkubectl set env deployment/registry STORAGE_DIR=/local\n\n# List the environment variables defined on a deployments 'sample-build'\n\nkubectl set env deployment/sample-build --list\n\n# List the environment variables defined on all pods\n\nkubectl set env pods --all --list\n\n# Output modified deployment in YAML, and does not alter the object on the server\n\nkubectl set env deployment/sample-build STORAGE_DIR=/data -o yaml\n\n# Update all containers in all replication controllers in the project to have ENV=prod\n\nkubectl set env rc --all ENV=prod\n\n# Import environment from a secret\n\nkubectl set env --from=secret/mysecret deployment/myapp\n\n# Import environment from a config map with a prefix\n\nkubectl set env --from=configmap/myconfigmap --prefix=MYSQL_ deployment/myapp\n\n# Import specific keys from a config map\n\nkubectl set env --keys=my-example-key --from=configmap/myconfigmap deployment/myapp\n\n# Remove the environment variable ENV from container 'c1' in all deployment configs\n\nkubectl set env deployments --all --containers=\"c1\" ENV-\n\n# Remove the environment variable ENV from a deployment definition on disk and\n# update the deployment config on the server\n\nkubectl set env -f deploy.json ENV-\n\n# Set some of the local shell environment into a deployment config on the server\n\nenv | grep RAILS_ | kubectl set env -e - deployment/registry\n\n## What are the flags?\n\n```bash\n      --all                            If true, select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -e, --env stringArray                Specify a key-value pair for an environment variable to set into each container.\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the env\n      --from string                    The name of a resource from which to inject environment variables\n  -h, --help                           help for env\n      --keys strings                   Comma-separated list of keys to import from specified resource\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --list                           If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.\n      --local                          If true, set env will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment. (default true)\n      --prefix string                  Prefix to append to variable names\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --resolve                        If true, show secret or configmap references when listing variables\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'","Command":"kubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1","Content":"# kubectl set image\n\nUpdate the image of a pod template\n\n```bash\nkubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N\n```\n\n## What does it do?\n\nUpdate existing container image(s) of resources.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'\n\nkubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1\n\n# Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'\n\nkubectl set image deployments,rc nginx=nginx:1.9.1 --all\n\n# Update image of all containers of daemonset abc to 'nginx:1.9.1'\n\nkubectl set image daemonset abc *=nginx:1.9.1\n\n# Print result (in yaml format) of updating nginx container image from local file, without hitting the server\n\nkubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for image\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set image will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'","Command":"kubectl set image deployments,rc nginx=nginx:1.9.1 --all","Content":"# kubectl set image\n\nUpdate the image of a pod template\n\n```bash\nkubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N\n```\n\n## What does it do?\n\nUpdate existing container image(s) of resources.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'\n\nkubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1\n\n# Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'\n\nkubectl set image deployments,rc nginx=nginx:1.9.1 --all\n\n# Update image of all containers of daemonset abc to 'nginx:1.9.1'\n\nkubectl set image daemonset abc *=nginx:1.9.1\n\n# Print result (in yaml format) of updating nginx container image from local file, without hitting the server\n\nkubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for image\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set image will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Update image of all containers of daemonset abc to 'nginx:1.9.1'","Command":"kubectl set image daemonset abc *=nginx:1.9.1","Content":"# kubectl set image\n\nUpdate the image of a pod template\n\n```bash\nkubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N\n```\n\n## What does it do?\n\nUpdate existing container image(s) of resources.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'\n\nkubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1\n\n# Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'\n\nkubectl set image deployments,rc nginx=nginx:1.9.1 --all\n\n# Update image of all containers of daemonset abc to 'nginx:1.9.1'\n\nkubectl set image daemonset abc *=nginx:1.9.1\n\n# Print result (in yaml format) of updating nginx container image from local file, without hitting the server\n\nkubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for image\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set image will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Print result (in yaml format) of updating nginx container image from local file, without hitting the server","Command":"kubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml","Content":"# kubectl set image\n\nUpdate the image of a pod template\n\n```bash\nkubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N\n```\n\n## What does it do?\n\nUpdate existing container image(s) of resources.\n\n Possible resources include (case insensitive):\n\n  pod (po), replicationcontroller (rc), deployment (deploy), daemonset (ds), statefulset (sts), cronjob (cj), replicaset (rs)\n\n## Examples\n\n# Set a deployment's nginx container image to 'nginx:1.9.1', and its busybox container image to 'busybox'\n\nkubectl set image deployment/nginx busybox=busybox nginx=nginx:1.9.1\n\n# Update all deployments' and rc's nginx container's image to 'nginx:1.9.1'\n\nkubectl set image deployments,rc nginx=nginx:1.9.1 --all\n\n# Update image of all containers of daemonset abc to 'nginx:1.9.1'\n\nkubectl set image daemonset abc *=nginx:1.9.1\n\n# Print result (in yaml format) of updating nginx container image from local file, without hitting the server\n\nkubectl set image -f path/to/file.yaml nginx=nginx:1.9.1 --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for image\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set image will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Set a deployments nginx container cpu limits to \"200m\" and memory to \"512Mi\"","Command":"kubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi","Content":"# kubectl set resources\n\nUpdate resource requests/limits on objects with pod templates\n\n```bash\nkubectl set resources (-f FILENAME | TYPE NAME)  ([--limits=LIMITS \u0026 --requests=REQUESTS]\n```\n\n## What does it do?\n\nSpecify compute resource requirements (CPU, memory) for any resource that defines a pod template.  If a pod is successfully scheduled, it is guaranteed the amount of resource requested, but may burst up to its specified limits.\n\n For each compute resource, if a limit is specified and a request is omitted, the request will default to the limit.\n\n Possible resources include (case insensitive): Use \"kubectl api-resources\" for a complete list of supported resources..\n\n## Examples\n\n# Set a deployments nginx container cpu limits to \"200m\" and memory to \"512Mi\"\n\nkubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi\n\n# Set the resource request and limits for all containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi\n\n# Remove the resource requests for resources on containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0\n\n# Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server\n\nkubectl set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change, all containers are selected by default - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for resources\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --limits string                  The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n      --local                          If true, set resources will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --requests string                The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Set the resource request and limits for all containers in nginx","Command":"kubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi","Content":"# kubectl set resources\n\nUpdate resource requests/limits on objects with pod templates\n\n```bash\nkubectl set resources (-f FILENAME | TYPE NAME)  ([--limits=LIMITS \u0026 --requests=REQUESTS]\n```\n\n## What does it do?\n\nSpecify compute resource requirements (CPU, memory) for any resource that defines a pod template.  If a pod is successfully scheduled, it is guaranteed the amount of resource requested, but may burst up to its specified limits.\n\n For each compute resource, if a limit is specified and a request is omitted, the request will default to the limit.\n\n Possible resources include (case insensitive): Use \"kubectl api-resources\" for a complete list of supported resources..\n\n## Examples\n\n# Set a deployments nginx container cpu limits to \"200m\" and memory to \"512Mi\"\n\nkubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi\n\n# Set the resource request and limits for all containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi\n\n# Remove the resource requests for resources on containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0\n\n# Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server\n\nkubectl set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change, all containers are selected by default - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for resources\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --limits string                  The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n      --local                          If true, set resources will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --requests string                The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Remove the resource requests for resources on containers in nginx","Command":"kubectl set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0","Content":"# kubectl set resources\n\nUpdate resource requests/limits on objects with pod templates\n\n```bash\nkubectl set resources (-f FILENAME | TYPE NAME)  ([--limits=LIMITS \u0026 --requests=REQUESTS]\n```\n\n## What does it do?\n\nSpecify compute resource requirements (CPU, memory) for any resource that defines a pod template.  If a pod is successfully scheduled, it is guaranteed the amount of resource requested, but may burst up to its specified limits.\n\n For each compute resource, if a limit is specified and a request is omitted, the request will default to the limit.\n\n Possible resources include (case insensitive): Use \"kubectl api-resources\" for a complete list of supported resources..\n\n## Examples\n\n# Set a deployments nginx container cpu limits to \"200m\" and memory to \"512Mi\"\n\nkubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi\n\n# Set the resource request and limits for all containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi\n\n# Remove the resource requests for resources on containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0\n\n# Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server\n\nkubectl set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change, all containers are selected by default - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for resources\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --limits string                  The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n      --local                          If true, set resources will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --requests string                The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server","Command":"kubectl set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml","Content":"# kubectl set resources\n\nUpdate resource requests/limits on objects with pod templates\n\n```bash\nkubectl set resources (-f FILENAME | TYPE NAME)  ([--limits=LIMITS \u0026 --requests=REQUESTS]\n```\n\n## What does it do?\n\nSpecify compute resource requirements (CPU, memory) for any resource that defines a pod template.  If a pod is successfully scheduled, it is guaranteed the amount of resource requested, but may burst up to its specified limits.\n\n For each compute resource, if a limit is specified and a request is omitted, the request will default to the limit.\n\n Possible resources include (case insensitive): Use \"kubectl api-resources\" for a complete list of supported resources..\n\n## Examples\n\n# Set a deployments nginx container cpu limits to \"200m\" and memory to \"512Mi\"\n\nkubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi\n\n# Set the resource request and limits for all containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi\n\n# Remove the resource requests for resources on containers in nginx\n\nkubectl set resources deployment nginx --limits=cpu=0,memory=0 --requests=cpu=0,memory=0\n\n# Print the result (in yaml format) of updating nginx container limits from a local, without hitting the server\n\nkubectl set resources -f path/to/file.yaml --limits=cpu=200m,memory=512Mi --local -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n  -c, --containers string              The names of containers in the selected pod templates to change, all containers are selected by default - may use wildcards (default \"*\")\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for resources\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --limits string                  The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n      --local                          If true, set resources will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --requests string                The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Set the labels and selector before creating a deployment/service pair","Command":"kubectl create service clusterip my-svc --clusterip=\"None\" -o yaml --dry-run=client | kubectl set selector --local -f - 'environment=qa' -o yaml | kubectl create -f -","Content":"# kubectl set selector\n\nSet the selector on a resource\n\n```bash\nkubectl set selector (-f FILENAME | TYPE NAME) EXPRESSIONS [--resource-version=version]\n```\n\n## What does it do?\n\nSet the selector on a resource. Note that the new selector will overwrite the old selector if the resource had one prior to the invocation of 'set selector'.\n\n A selector must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters. If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used. Note: currently selectors can only be set on Service objects.\n\n## Examples\n\n# Set the labels and selector before creating a deployment/service pair\n\nkubectl create service clusterip my-svc --clusterip=\"None\" -o yaml --dry-run=client | kubectl set selector --local -f - 'environment=qa' -o yaml | kubectl create -f -\n\n\nkubectl create deployment my-dep -o yaml --dry-run=client | kubectl label --local -f - environment=qa -o yaml | kubectl create -f -\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               identifying the resource.\n  -h, --help                           help for selector\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. (default true)\n      --resource-version string        If non-empty, the selectors update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":"","Command":"kubectl create deployment my-dep -o yaml --dry-run=client | kubectl label --local -f - environment=qa -o yaml | kubectl create -f -","Content":"# kubectl set selector\n\nSet the selector on a resource\n\n```bash\nkubectl set selector (-f FILENAME | TYPE NAME) EXPRESSIONS [--resource-version=version]\n```\n\n## What does it do?\n\nSet the selector on a resource. Note that the new selector will overwrite the old selector if the resource had one prior to the invocation of 'set selector'.\n\n A selector must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters. If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used. Note: currently selectors can only be set on Service objects.\n\n## Examples\n\n# Set the labels and selector before creating a deployment/service pair\n\nkubectl create service clusterip my-svc --clusterip=\"None\" -o yaml --dry-run=client | kubectl set selector --local -f - 'environment=qa' -o yaml | kubectl create -f -\n\n\nkubectl create deployment my-dep -o yaml --dry-run=client | kubectl label --local -f - environment=qa -o yaml | kubectl create -f -\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               identifying the resource.\n  -h, --help                           help for selector\n      --local                          If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. (default true)\n      --resource-version string        If non-empty, the selectors update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Set deployment nginx-deployment's service account to serviceaccount1","Command":"kubectl set serviceaccount deployment nginx-deployment serviceaccount1","Content":"# kubectl set serviceaccount\n\nUpdate the service account of a resource\n\n```bash\nkubectl set serviceaccount (-f FILENAME | TYPE NAME) SERVICE_ACCOUNT\n```\n\n## What does it do?\n\nUpdate the service account of pod template resources.\n\n Possible resources (case insensitive) can be:\n\n replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs), statefulset\n\n## Examples\n\n# Set deployment nginx-deployment's service account to serviceaccount1\n\nkubectl set serviceaccount deployment nginx-deployment serviceaccount1\n\n# Print the result (in YAML format) of updated nginx deployment with the service account from local file, without hitting the API server\n\nkubectl set sa -f nginx-deployment.yaml serviceaccount1 --local --dry-run=client -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for serviceaccount\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set serviceaccount will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Print the result (in YAML format) of updated nginx deployment with the service account from local file, without hitting the API server","Command":"kubectl set sa -f nginx-deployment.yaml serviceaccount1 --local --dry-run=client -o yaml","Content":"# kubectl set serviceaccount\n\nUpdate the service account of a resource\n\n```bash\nkubectl set serviceaccount (-f FILENAME | TYPE NAME) SERVICE_ACCOUNT\n```\n\n## What does it do?\n\nUpdate the service account of pod template resources.\n\n Possible resources (case insensitive) can be:\n\n replicationcontroller (rc), deployment (deploy), daemonset (ds), job, replicaset (rs), statefulset\n\n## Examples\n\n# Set deployment nginx-deployment's service account to serviceaccount1\n\nkubectl set serviceaccount deployment nginx-deployment serviceaccount1\n\n# Print the result (in YAML format) of updated nginx deployment with the service account from local file, without hitting the API server\n\nkubectl set sa -f nginx-deployment.yaml serviceaccount1 --local --dry-run=client -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files identifying the resource to get from a server.\n  -h, --help                           help for serviceaccount\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set serviceaccount will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Update a cluster role binding for serviceaccount1","Command":"kubectl set subject clusterrolebinding admin --serviceaccount=namespace:serviceaccount1","Content":"# kubectl set subject\n\nUpdate the user, group, or service account in a role binding or cluster role binding\n\n```bash\nkubectl set subject (-f FILENAME | TYPE NAME) [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nUpdate the user, group, or service account in a role binding or cluster role binding.\n\n## Examples\n\n# Update a cluster role binding for serviceaccount1\n\nkubectl set subject clusterrolebinding admin --serviceaccount=namespace:serviceaccount1\n\n# Update a role binding for user1, user2, and group1\n\nkubectl set subject rolebinding admin --user=user1 --user=user2 --group=group1\n\n# Print the result (in YAML format) of updating rolebinding subjects from a local, without hitting the server\n\nkubectl create rolebinding admin --role=admin --user=admin -o yaml --dry-run=client | kubectl set subject --local -f - --user=foo -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the subjects\n      --group stringArray              Groups to bind to the role\n  -h, --help                           help for subject\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set subject will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --serviceaccount stringArray     Service accounts to bind to the role\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Update a role binding for user1, user2, and group1","Command":"kubectl set subject rolebinding admin --user=user1 --user=user2 --group=group1","Content":"# kubectl set subject\n\nUpdate the user, group, or service account in a role binding or cluster role binding\n\n```bash\nkubectl set subject (-f FILENAME | TYPE NAME) [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nUpdate the user, group, or service account in a role binding or cluster role binding.\n\n## Examples\n\n# Update a cluster role binding for serviceaccount1\n\nkubectl set subject clusterrolebinding admin --serviceaccount=namespace:serviceaccount1\n\n# Update a role binding for user1, user2, and group1\n\nkubectl set subject rolebinding admin --user=user1 --user=user2 --group=group1\n\n# Print the result (in YAML format) of updating rolebinding subjects from a local, without hitting the server\n\nkubectl create rolebinding admin --role=admin --user=admin -o yaml --dry-run=client | kubectl set subject --local -f - --user=foo -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the subjects\n      --group stringArray              Groups to bind to the role\n  -h, --help                           help for subject\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set subject will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --serviceaccount stringArray     Service accounts to bind to the role\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Print the result (in YAML format) of updating rolebinding subjects from a local, without hitting the server","Command":"kubectl create rolebinding admin --role=admin --user=admin -o yaml --dry-run=client | kubectl set subject --local -f - --user=foo -o yaml","Content":"# kubectl set subject\n\nUpdate the user, group, or service account in a role binding or cluster role binding\n\n```bash\nkubectl set subject (-f FILENAME | TYPE NAME) [--user=username] [--group=groupname] [--serviceaccount=namespace:serviceaccountname] [--dry-run=server|client|none]\n```\n\n## What does it do?\n\nUpdate the user, group, or service account in a role binding or cluster role binding.\n\n## Examples\n\n# Update a cluster role binding for serviceaccount1\n\nkubectl set subject clusterrolebinding admin --serviceaccount=namespace:serviceaccount1\n\n# Update a role binding for user1, user2, and group1\n\nkubectl set subject rolebinding admin --user=user1 --user=user2 --group=group1\n\n# Print the result (in YAML format) of updating rolebinding subjects from a local, without hitting the server\n\nkubectl create rolebinding admin --role=admin --user=admin -o yaml --dry-run=client | kubectl set subject --local -f - --user=foo -o yaml\n\n## What are the flags?\n\n```bash\n      --all                            Select all resources, in the namespace of the specified resource types\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-set\")\n  -f, --filename strings               Filename, directory, or URL to files the resource to update the subjects\n      --group stringArray              Groups to bind to the role\n  -h, --help                           help for subject\n  -k, --kustomize string               Process the kustomization directory. This flag can't be used together with -f or -R.\n      --local                          If true, set subject will NOT contact api-server but run locally.\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                      Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --serviceaccount stringArray     Service accounts to bind to the role\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n```\n\n## SEE ALSO\n\n* kubectl set - Set specific features on objects\n"},{"Description":" Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule' If a taint with that key and effect already exists, its value is replaced as specified","Command":"kubectl taint nodes foo dedicated=special-user:NoSchedule","Content":"# kubectl taint\n\nUpdate the taints on one or more nodes\n\n```bash\nkubectl taint NODE NAME KEY_1=VAL_1:TAINT_EFFECT_1 ... KEY_N=VAL_N:TAINT_EFFECT_N\n```\n\n## What does it do?\n\nUpdate the taints on one or more nodes.\n\n  *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.\n  *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  The value is optional. If given, it must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.\n  *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.\n  *  Currently taint can only apply to node.\n\n## Examples\n\n# Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'\n# If a taint with that key and effect already exists, its value is replaced as specified\n\nkubectl taint nodes foo dedicated=special-user:NoSchedule\n\n# Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists\n\nkubectl taint nodes foo dedicated:NoSchedule-\n\n# Remove from node 'foo' all the taints with key 'dedicated'\n\nkubectl taint nodes foo dedicated-\n\n# Add a taint with key 'dedicated' on nodes having label mylabel=X\n\nkubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule\n\n# Add to node 'foo' a taint with key 'bar' and no value\n\nkubectl taint nodes foo bar:NoSchedule\n\n## What are the flags?\n\n```bash\n      --all                            Select all nodes in the cluster\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-taint\")\n  -h, --help                           help for taint\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists","Command":"kubectl taint nodes foo dedicated:NoSchedule-","Content":"# kubectl taint\n\nUpdate the taints on one or more nodes\n\n```bash\nkubectl taint NODE NAME KEY_1=VAL_1:TAINT_EFFECT_1 ... KEY_N=VAL_N:TAINT_EFFECT_N\n```\n\n## What does it do?\n\nUpdate the taints on one or more nodes.\n\n  *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.\n  *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  The value is optional. If given, it must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.\n  *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.\n  *  Currently taint can only apply to node.\n\n## Examples\n\n# Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'\n# If a taint with that key and effect already exists, its value is replaced as specified\n\nkubectl taint nodes foo dedicated=special-user:NoSchedule\n\n# Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists\n\nkubectl taint nodes foo dedicated:NoSchedule-\n\n# Remove from node 'foo' all the taints with key 'dedicated'\n\nkubectl taint nodes foo dedicated-\n\n# Add a taint with key 'dedicated' on nodes having label mylabel=X\n\nkubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule\n\n# Add to node 'foo' a taint with key 'bar' and no value\n\nkubectl taint nodes foo bar:NoSchedule\n\n## What are the flags?\n\n```bash\n      --all                            Select all nodes in the cluster\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-taint\")\n  -h, --help                           help for taint\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Remove from node 'foo' all the taints with key 'dedicated'","Command":"kubectl taint nodes foo dedicated-","Content":"# kubectl taint\n\nUpdate the taints on one or more nodes\n\n```bash\nkubectl taint NODE NAME KEY_1=VAL_1:TAINT_EFFECT_1 ... KEY_N=VAL_N:TAINT_EFFECT_N\n```\n\n## What does it do?\n\nUpdate the taints on one or more nodes.\n\n  *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.\n  *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  The value is optional. If given, it must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.\n  *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.\n  *  Currently taint can only apply to node.\n\n## Examples\n\n# Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'\n# If a taint with that key and effect already exists, its value is replaced as specified\n\nkubectl taint nodes foo dedicated=special-user:NoSchedule\n\n# Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists\n\nkubectl taint nodes foo dedicated:NoSchedule-\n\n# Remove from node 'foo' all the taints with key 'dedicated'\n\nkubectl taint nodes foo dedicated-\n\n# Add a taint with key 'dedicated' on nodes having label mylabel=X\n\nkubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule\n\n# Add to node 'foo' a taint with key 'bar' and no value\n\nkubectl taint nodes foo bar:NoSchedule\n\n## What are the flags?\n\n```bash\n      --all                            Select all nodes in the cluster\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-taint\")\n  -h, --help                           help for taint\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Add a taint with key 'dedicated' on nodes having label mylabel=X","Command":"kubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule","Content":"# kubectl taint\n\nUpdate the taints on one or more nodes\n\n```bash\nkubectl taint NODE NAME KEY_1=VAL_1:TAINT_EFFECT_1 ... KEY_N=VAL_N:TAINT_EFFECT_N\n```\n\n## What does it do?\n\nUpdate the taints on one or more nodes.\n\n  *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.\n  *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  The value is optional. If given, it must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.\n  *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.\n  *  Currently taint can only apply to node.\n\n## Examples\n\n# Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'\n# If a taint with that key and effect already exists, its value is replaced as specified\n\nkubectl taint nodes foo dedicated=special-user:NoSchedule\n\n# Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists\n\nkubectl taint nodes foo dedicated:NoSchedule-\n\n# Remove from node 'foo' all the taints with key 'dedicated'\n\nkubectl taint nodes foo dedicated-\n\n# Add a taint with key 'dedicated' on nodes having label mylabel=X\n\nkubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule\n\n# Add to node 'foo' a taint with key 'bar' and no value\n\nkubectl taint nodes foo bar:NoSchedule\n\n## What are the flags?\n\n```bash\n      --all                            Select all nodes in the cluster\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-taint\")\n  -h, --help                           help for taint\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Add to node 'foo' a taint with key 'bar' and no value","Command":"kubectl taint nodes foo bar:NoSchedule","Content":"# kubectl taint\n\nUpdate the taints on one or more nodes\n\n```bash\nkubectl taint NODE NAME KEY_1=VAL_1:TAINT_EFFECT_1 ... KEY_N=VAL_N:TAINT_EFFECT_N\n```\n\n## What does it do?\n\nUpdate the taints on one or more nodes.\n\n  *  A taint consists of a key, value, and effect. As an argument here, it is expressed as key=value:effect.\n  *  The key must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  253 characters.\n  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.\n  *  The value is optional. If given, it must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters.\n  *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.\n  *  Currently taint can only apply to node.\n\n## Examples\n\n# Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule'\n# If a taint with that key and effect already exists, its value is replaced as specified\n\nkubectl taint nodes foo dedicated=special-user:NoSchedule\n\n# Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists\n\nkubectl taint nodes foo dedicated:NoSchedule-\n\n# Remove from node 'foo' all the taints with key 'dedicated'\n\nkubectl taint nodes foo dedicated-\n\n# Add a taint with key 'dedicated' on nodes having label mylabel=X\n\nkubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule\n\n# Add to node 'foo' a taint with key 'bar' and no value\n\nkubectl taint nodes foo bar:NoSchedule\n\n## What are the flags?\n\n```bash\n      --all                            Select all nodes in the cluster\n      --allow-missing-template-keys    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n      --field-manager string           Name of the manager used to track field ownership. (default \"kubectl-taint\")\n  -h, --help                           help for taint\n  -o, --output string                  Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n      --overwrite                      If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-managed-fields            If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string                Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --validate string[=\"strict\"]     Must be one of: strict (or true), warn, ignore (or false).\n                                       \t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n                                       \t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n                                       \t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields. (default \"strict\")\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Show metrics for all nodes","Command":"kubectl top node","Content":"# kubectl top node\n\nDisplay resource (CPU/memory) usage of nodes\n\n```bash\nkubectl top node [NAME | -l label]\n```\n\n## What does it do?\n\nDisplay resource (CPU/memory) usage of nodes.\n\n The top-node command allows you to see the resource consumption of nodes.\n\n## Examples\n\n# Show metrics for all nodes\n\nkubectl top node\n\n# Show metrics for a given node\n\nkubectl top node NODE_NAME\n\n## What are the flags?\n\n```bash\n  -h, --help                   help for node\n      --no-headers             If present, print output without headers\n  -l, --selector string        Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-capacity          Print node resources based on Capacity instead of Allocatable(default) of the nodes.\n      --sort-by string         If non-empty, sort nodes list using specified field. The field can be either 'cpu' or 'memory'.\n      --use-protocol-buffers   Enables using protocol-buffers to access Metrics API. (default true)\n```\n\n## SEE ALSO\n\n* kubectl top - Display resource (CPU/memory) usage\n"},{"Description":" Show metrics for a given node","Command":"kubectl top node NODE_NAME","Content":"# kubectl top node\n\nDisplay resource (CPU/memory) usage of nodes\n\n```bash\nkubectl top node [NAME | -l label]\n```\n\n## What does it do?\n\nDisplay resource (CPU/memory) usage of nodes.\n\n The top-node command allows you to see the resource consumption of nodes.\n\n## Examples\n\n# Show metrics for all nodes\n\nkubectl top node\n\n# Show metrics for a given node\n\nkubectl top node NODE_NAME\n\n## What are the flags?\n\n```bash\n  -h, --help                   help for node\n      --no-headers             If present, print output without headers\n  -l, --selector string        Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --show-capacity          Print node resources based on Capacity instead of Allocatable(default) of the nodes.\n      --sort-by string         If non-empty, sort nodes list using specified field. The field can be either 'cpu' or 'memory'.\n      --use-protocol-buffers   Enables using protocol-buffers to access Metrics API. (default true)\n```\n\n## SEE ALSO\n\n* kubectl top - Display resource (CPU/memory) usage\n"},{"Description":" Show metrics for all pods in the default namespace","Command":"kubectl top pod","Content":"# kubectl top pod\n\nDisplay resource (CPU/memory) usage of pods\n\n```bash\nkubectl top pod [NAME | -l label]\n```\n\n## What does it do?\n\nDisplay resource (CPU/memory) usage of pods.\n\n The 'top pod' command allows you to see the resource consumption of pods.\n\n Due to the metrics pipeline delay, they may be unavailable for a few minutes since pod creation.\n\n## Examples\n\n# Show metrics for all pods in the default namespace\n\nkubectl top pod\n\n# Show metrics for all pods in the given namespace\n\nkubectl top pod --namespace=NAMESPACE\n\n# Show metrics for a given pod and its containers\n\nkubectl top pod POD_NAME --containers\n\n# Show metrics for the pods defined by label name=myLabel\n\nkubectl top pod -l name=myLabel\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces          If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --containers              If present, print usage of containers within a pod.\n      --field-selector string   Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -h, --help                    help for pod\n      --no-headers              If present, print output without headers.\n  -l, --selector string         Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --sort-by string          If non-empty, sort pods list using specified field. The field can be either 'cpu' or 'memory'.\n      --sum                     Print the sum of the resource usage\n      --use-protocol-buffers    Enables using protocol-buffers to access Metrics API. (default true)\n```\n\n## SEE ALSO\n\n* kubectl top - Display resource (CPU/memory) usage\n"},{"Description":" Show metrics for all pods in the given namespace","Command":"kubectl top pod --namespace=NAMESPACE","Content":"# kubectl top pod\n\nDisplay resource (CPU/memory) usage of pods\n\n```bash\nkubectl top pod [NAME | -l label]\n```\n\n## What does it do?\n\nDisplay resource (CPU/memory) usage of pods.\n\n The 'top pod' command allows you to see the resource consumption of pods.\n\n Due to the metrics pipeline delay, they may be unavailable for a few minutes since pod creation.\n\n## Examples\n\n# Show metrics for all pods in the default namespace\n\nkubectl top pod\n\n# Show metrics for all pods in the given namespace\n\nkubectl top pod --namespace=NAMESPACE\n\n# Show metrics for a given pod and its containers\n\nkubectl top pod POD_NAME --containers\n\n# Show metrics for the pods defined by label name=myLabel\n\nkubectl top pod -l name=myLabel\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces          If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --containers              If present, print usage of containers within a pod.\n      --field-selector string   Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -h, --help                    help for pod\n      --no-headers              If present, print output without headers.\n  -l, --selector string         Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --sort-by string          If non-empty, sort pods list using specified field. The field can be either 'cpu' or 'memory'.\n      --sum                     Print the sum of the resource usage\n      --use-protocol-buffers    Enables using protocol-buffers to access Metrics API. (default true)\n```\n\n## SEE ALSO\n\n* kubectl top - Display resource (CPU/memory) usage\n"},{"Description":" Show metrics for a given pod and its containers","Command":"kubectl top pod POD_NAME --containers","Content":"# kubectl top pod\n\nDisplay resource (CPU/memory) usage of pods\n\n```bash\nkubectl top pod [NAME | -l label]\n```\n\n## What does it do?\n\nDisplay resource (CPU/memory) usage of pods.\n\n The 'top pod' command allows you to see the resource consumption of pods.\n\n Due to the metrics pipeline delay, they may be unavailable for a few minutes since pod creation.\n\n## Examples\n\n# Show metrics for all pods in the default namespace\n\nkubectl top pod\n\n# Show metrics for all pods in the given namespace\n\nkubectl top pod --namespace=NAMESPACE\n\n# Show metrics for a given pod and its containers\n\nkubectl top pod POD_NAME --containers\n\n# Show metrics for the pods defined by label name=myLabel\n\nkubectl top pod -l name=myLabel\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces          If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --containers              If present, print usage of containers within a pod.\n      --field-selector string   Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -h, --help                    help for pod\n      --no-headers              If present, print output without headers.\n  -l, --selector string         Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --sort-by string          If non-empty, sort pods list using specified field. The field can be either 'cpu' or 'memory'.\n      --sum                     Print the sum of the resource usage\n      --use-protocol-buffers    Enables using protocol-buffers to access Metrics API. (default true)\n```\n\n## SEE ALSO\n\n* kubectl top - Display resource (CPU/memory) usage\n"},{"Description":" Show metrics for the pods defined by label name=myLabel","Command":"kubectl top pod -l name=myLabel","Content":"# kubectl top pod\n\nDisplay resource (CPU/memory) usage of pods\n\n```bash\nkubectl top pod [NAME | -l label]\n```\n\n## What does it do?\n\nDisplay resource (CPU/memory) usage of pods.\n\n The 'top pod' command allows you to see the resource consumption of pods.\n\n Due to the metrics pipeline delay, they may be unavailable for a few minutes since pod creation.\n\n## Examples\n\n# Show metrics for all pods in the default namespace\n\nkubectl top pod\n\n# Show metrics for all pods in the given namespace\n\nkubectl top pod --namespace=NAMESPACE\n\n# Show metrics for a given pod and its containers\n\nkubectl top pod POD_NAME --containers\n\n# Show metrics for the pods defined by label name=myLabel\n\nkubectl top pod -l name=myLabel\n\n## What are the flags?\n\n```bash\n  -A, --all-namespaces          If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --containers              If present, print usage of containers within a pod.\n      --field-selector string   Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -h, --help                    help for pod\n      --no-headers              If present, print output without headers.\n  -l, --selector string         Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n      --sort-by string          If non-empty, sort pods list using specified field. The field can be either 'cpu' or 'memory'.\n      --sum                     Print the sum of the resource usage\n      --use-protocol-buffers    Enables using protocol-buffers to access Metrics API. (default true)\n```\n\n## SEE ALSO\n\n* kubectl top - Display resource (CPU/memory) usage\n"},{"Description":" Mark node \"foo\" as schedulable","Command":"kubectl uncordon foo","Content":"# kubectl uncordon\n\nMark node as schedulable\n\n```bash\nkubectl uncordon NODE\n```\n\n## What does it do?\n\nMark node as schedulable.\n\n## Examples\n\n# Mark node \"foo\" as schedulable\n\nkubectl uncordon foo\n\n## What are the flags?\n\n```bash\n      --dry-run string[=\"unchanged\"]   Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\")\n  -h, --help                           help for uncordon\n  -l, --selector string                Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Print the client and server versions for the current context","Command":"kubectl version","Content":"# kubectl version\n\nPrint the client and server version information\n\n```bash\nkubectl version [flags]\n```\n\n## What does it do?\n\nPrint the client and server version information for the current context.\n\n## Examples\n\n# Print the client and server versions for the current context\n\nkubectl version\n\n## What are the flags?\n\n```bash\n      --client          If true, shows client version only (no server required).\n  -h, --help            help for version\n  -o, --output string   One of 'yaml' or 'json'.\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Wait for the pod \"busybox1\" to contain the status condition of type \"Ready\"","Command":"kubectl wait --for=condition=Ready pod/busybox1","Content":"# kubectl wait\n\nExperimental: Wait for a specific condition on one or many resources\n\n```bash\nkubectl wait ([-f FILENAME] | resource.group/resource.name | resource.group [(-l label | --all)]) [--for=delete|--for condition=available|--for=jsonpath='{}'=value]\n```\n\n## What does it do?\n\nExperimental: Wait for a specific condition on one or many resources.\n\n The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.\n\n Alternatively, the command can wait for the given set of resources to be deleted by providing the \"delete\" keyword as the value to the --for flag.\n\n A successful message will be printed to stdout indicating when the specified condition has been met. You can use -o option to change to output destination.\n\n## Examples\n\n# Wait for the pod \"busybox1\" to contain the status condition of type \"Ready\"\n\nkubectl wait --for=condition=Ready pod/busybox1\n\n# The default value of status condition is true; you can wait for other targets after an equal delimiter (compared after Unicode simple case folding, which is a more general form of case-insensitivity):\n\nkubectl wait --for=condition=Ready=false pod/busybox1\n\n# Wait for the pod \"busybox1\" to contain the status phase to be \"Running\".\n\nkubectl wait --for=jsonpath='{.status.phase}'=Running pod/busybox1\n\n# Wait for the pod \"busybox1\" to be deleted, with a timeout of 60s, after having issued the \"delete\" command\n\nkubectl delete pod/busybox1\n\n\nkubectl wait --for=delete pod/busybox1 --timeout=60s\n\n## What are the flags?\n\n```bash\n      --all                           Select all resources in the namespace of the specified resource types\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              identifying the resource.\n      --for string                    The condition to wait on: [delete|condition=condition-name[=condition-value]|jsonpath='{JSONPath expression}'=JSONPath Condition]. The default condition-value is true.  Condition values are compared after Unicode simple case folding, which is a more general form of case-insensitivity.\n  -h, --help                          help for wait\n      --local                         If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. (default true)\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration              The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week. (default 30s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" The default value of status condition is true; you can wait for other targets after an equal delimiter (compared after Unicode simple case folding, which is a more general form of case-insensitivity):","Command":"kubectl wait --for=condition=Ready=false pod/busybox1","Content":"# kubectl wait\n\nExperimental: Wait for a specific condition on one or many resources\n\n```bash\nkubectl wait ([-f FILENAME] | resource.group/resource.name | resource.group [(-l label | --all)]) [--for=delete|--for condition=available|--for=jsonpath='{}'=value]\n```\n\n## What does it do?\n\nExperimental: Wait for a specific condition on one or many resources.\n\n The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.\n\n Alternatively, the command can wait for the given set of resources to be deleted by providing the \"delete\" keyword as the value to the --for flag.\n\n A successful message will be printed to stdout indicating when the specified condition has been met. You can use -o option to change to output destination.\n\n## Examples\n\n# Wait for the pod \"busybox1\" to contain the status condition of type \"Ready\"\n\nkubectl wait --for=condition=Ready pod/busybox1\n\n# The default value of status condition is true; you can wait for other targets after an equal delimiter (compared after Unicode simple case folding, which is a more general form of case-insensitivity):\n\nkubectl wait --for=condition=Ready=false pod/busybox1\n\n# Wait for the pod \"busybox1\" to contain the status phase to be \"Running\".\n\nkubectl wait --for=jsonpath='{.status.phase}'=Running pod/busybox1\n\n# Wait for the pod \"busybox1\" to be deleted, with a timeout of 60s, after having issued the \"delete\" command\n\nkubectl delete pod/busybox1\n\n\nkubectl wait --for=delete pod/busybox1 --timeout=60s\n\n## What are the flags?\n\n```bash\n      --all                           Select all resources in the namespace of the specified resource types\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              identifying the resource.\n      --for string                    The condition to wait on: [delete|condition=condition-name[=condition-value]|jsonpath='{JSONPath expression}'=JSONPath Condition]. The default condition-value is true.  Condition values are compared after Unicode simple case folding, which is a more general form of case-insensitivity.\n  -h, --help                          help for wait\n      --local                         If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. (default true)\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration              The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week. (default 30s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Wait for the pod \"busybox1\" to contain the status phase to be \"Running\".","Command":"kubectl wait --for=jsonpath='{.status.phase}'=Running pod/busybox1","Content":"# kubectl wait\n\nExperimental: Wait for a specific condition on one or many resources\n\n```bash\nkubectl wait ([-f FILENAME] | resource.group/resource.name | resource.group [(-l label | --all)]) [--for=delete|--for condition=available|--for=jsonpath='{}'=value]\n```\n\n## What does it do?\n\nExperimental: Wait for a specific condition on one or many resources.\n\n The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.\n\n Alternatively, the command can wait for the given set of resources to be deleted by providing the \"delete\" keyword as the value to the --for flag.\n\n A successful message will be printed to stdout indicating when the specified condition has been met. You can use -o option to change to output destination.\n\n## Examples\n\n# Wait for the pod \"busybox1\" to contain the status condition of type \"Ready\"\n\nkubectl wait --for=condition=Ready pod/busybox1\n\n# The default value of status condition is true; you can wait for other targets after an equal delimiter (compared after Unicode simple case folding, which is a more general form of case-insensitivity):\n\nkubectl wait --for=condition=Ready=false pod/busybox1\n\n# Wait for the pod \"busybox1\" to contain the status phase to be \"Running\".\n\nkubectl wait --for=jsonpath='{.status.phase}'=Running pod/busybox1\n\n# Wait for the pod \"busybox1\" to be deleted, with a timeout of 60s, after having issued the \"delete\" command\n\nkubectl delete pod/busybox1\n\n\nkubectl wait --for=delete pod/busybox1 --timeout=60s\n\n## What are the flags?\n\n```bash\n      --all                           Select all resources in the namespace of the specified resource types\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              identifying the resource.\n      --for string                    The condition to wait on: [delete|condition=condition-name[=condition-value]|jsonpath='{JSONPath expression}'=JSONPath Condition]. The default condition-value is true.  Condition values are compared after Unicode simple case folding, which is a more general form of case-insensitivity.\n  -h, --help                          help for wait\n      --local                         If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. (default true)\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration              The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week. (default 30s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":" Wait for the pod \"busybox1\" to be deleted, with a timeout of 60s, after having issued the \"delete\" command","Command":"kubectl delete pod/busybox1","Content":"# kubectl wait\n\nExperimental: Wait for a specific condition on one or many resources\n\n```bash\nkubectl wait ([-f FILENAME] | resource.group/resource.name | resource.group [(-l label | --all)]) [--for=delete|--for condition=available|--for=jsonpath='{}'=value]\n```\n\n## What does it do?\n\nExperimental: Wait for a specific condition on one or many resources.\n\n The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.\n\n Alternatively, the command can wait for the given set of resources to be deleted by providing the \"delete\" keyword as the value to the --for flag.\n\n A successful message will be printed to stdout indicating when the specified condition has been met. You can use -o option to change to output destination.\n\n## Examples\n\n# Wait for the pod \"busybox1\" to contain the status condition of type \"Ready\"\n\nkubectl wait --for=condition=Ready pod/busybox1\n\n# The default value of status condition is true; you can wait for other targets after an equal delimiter (compared after Unicode simple case folding, which is a more general form of case-insensitivity):\n\nkubectl wait --for=condition=Ready=false pod/busybox1\n\n# Wait for the pod \"busybox1\" to contain the status phase to be \"Running\".\n\nkubectl wait --for=jsonpath='{.status.phase}'=Running pod/busybox1\n\n# Wait for the pod \"busybox1\" to be deleted, with a timeout of 60s, after having issued the \"delete\" command\n\nkubectl delete pod/busybox1\n\n\nkubectl wait --for=delete pod/busybox1 --timeout=60s\n\n## What are the flags?\n\n```bash\n      --all                           Select all resources in the namespace of the specified resource types\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              identifying the resource.\n      --for string                    The condition to wait on: [delete|condition=condition-name[=condition-value]|jsonpath='{JSONPath expression}'=JSONPath Condition]. The default condition-value is true.  Condition values are compared after Unicode simple case folding, which is a more general form of case-insensitivity.\n  -h, --help                          help for wait\n      --local                         If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. (default true)\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration              The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week. (default 30s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"},{"Description":"","Command":"kubectl wait --for=delete pod/busybox1 --timeout=60s","Content":"# kubectl wait\n\nExperimental: Wait for a specific condition on one or many resources\n\n```bash\nkubectl wait ([-f FILENAME] | resource.group/resource.name | resource.group [(-l label | --all)]) [--for=delete|--for condition=available|--for=jsonpath='{}'=value]\n```\n\n## What does it do?\n\nExperimental: Wait for a specific condition on one or many resources.\n\n The command takes multiple resources and waits until the specified condition is seen in the Status field of every given resource.\n\n Alternatively, the command can wait for the given set of resources to be deleted by providing the \"delete\" keyword as the value to the --for flag.\n\n A successful message will be printed to stdout indicating when the specified condition has been met. You can use -o option to change to output destination.\n\n## Examples\n\n# Wait for the pod \"busybox1\" to contain the status condition of type \"Ready\"\n\nkubectl wait --for=condition=Ready pod/busybox1\n\n# The default value of status condition is true; you can wait for other targets after an equal delimiter (compared after Unicode simple case folding, which is a more general form of case-insensitivity):\n\nkubectl wait --for=condition=Ready=false pod/busybox1\n\n# Wait for the pod \"busybox1\" to contain the status phase to be \"Running\".\n\nkubectl wait --for=jsonpath='{.status.phase}'=Running pod/busybox1\n\n# Wait for the pod \"busybox1\" to be deleted, with a timeout of 60s, after having issued the \"delete\" command\n\nkubectl delete pod/busybox1\n\n\nkubectl wait --for=delete pod/busybox1 --timeout=60s\n\n## What are the flags?\n\n```bash\n      --all                           Select all resources in the namespace of the specified resource types\n  -A, --all-namespaces                If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.\n      --allow-missing-template-keys   If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. (default true)\n      --field-selector string         Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.\n  -f, --filename strings              identifying the resource.\n      --for string                    The condition to wait on: [delete|condition=condition-name[=condition-value]|jsonpath='{JSONPath expression}'=JSONPath Condition]. The default condition-value is true.  Condition values are compared after Unicode simple case folding, which is a more general form of case-insensitivity.\n  -h, --help                          help for wait\n      --local                         If true, annotation will NOT contact api-server but run locally.\n  -o, --output string                 Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n  -R, --recursive                     Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. (default true)\n  -l, --selector string               Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)\n      --show-managed-fields           If true, keep the managedFields when printing objects in JSON or YAML format.\n      --template string               Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n      --timeout duration              The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week. (default 30s)\n```\n\n## SEE ALSO\n\n* kubectl - kubectl controls the Kubernetes cluster manager\n"}]